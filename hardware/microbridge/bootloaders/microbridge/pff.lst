   1               		.file	"pff.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	clust2sect:
  13               	.LFB3:
  14               		.file 1 "pff.c"
   1:pff.c         **** /*----------------------------------------------------------------------------/
   2:pff.c         **** /  Petit FatFs - FAT file system module  R0.02a                (C)ChaN, 2010
   3:pff.c         **** /-----------------------------------------------------------------------------/
   4:pff.c         **** / Petit FatFs module is an open source software to implement FAT file system to
   5:pff.c         **** / small embedded systems. This is a free software and is opened for education,
   6:pff.c         **** / research and commercial developments under license policy of following trems.
   7:pff.c         **** /
   8:pff.c         **** /  Copyright (C) 2010, ChaN, all right reserved.
   9:pff.c         **** /
  10:pff.c         **** / * The Petit FatFs module is a free software and there is NO WARRANTY.
  11:pff.c         **** / * No restriction on use. You can use, modify and redistribute it for
  12:pff.c         **** /   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
  13:pff.c         **** / * Redistributions of source code must retain the above copyright notice.
  14:pff.c         **** /
  15:pff.c         **** /-----------------------------------------------------------------------------/
  16:pff.c         **** / Jun 15,'09  R0.01a  First release. (Branched from FatFs R0.07b.)
  17:pff.c         **** /
  18:pff.c         **** / Dec 14,'09  R0.02   Added multiple code page support.
  19:pff.c         **** /                     Added write funciton.
  20:pff.c         **** /                     Changed stream read mode interface.
  21:pff.c         **** / Dec 07,'10  R0.02a  Added some configuration options.
  22:pff.c         **** /                     Fixed fails to open objects with DBCS character.
  23:pff.c         **** /----------------------------------------------------------------------------*/
  24:pff.c         **** 
  25:pff.c         **** #include "pff.h"		/* Petit FatFs configurations and declarations */
  26:pff.c         **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  27:pff.c         **** 
  28:pff.c         **** 
  29:pff.c         **** 
  30:pff.c         **** /*--------------------------------------------------------------------------
  31:pff.c         **** 
  32:pff.c         ****    Module Private Definitions
  33:pff.c         **** 
  34:pff.c         **** ---------------------------------------------------------------------------*/
  35:pff.c         **** 
  36:pff.c         **** 
  37:pff.c         **** #if _FS_FAT32
  38:pff.c         **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
  39:pff.c         **** #else
  40:pff.c         **** #define LD_CLUST(dir)	LD_WORD(dir+DIR_FstClusLO)
  41:pff.c         **** #endif
  42:pff.c         **** 
  43:pff.c         **** 
  44:pff.c         **** /*--------------------------------------------------------*/
  45:pff.c         **** /* DBCS code ranges and SBCS extend char conversion table */
  46:pff.c         **** 
  47:pff.c         **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  48:pff.c         **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  49:pff.c         **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  50:pff.c         **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  51:pff.c         **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  52:pff.c         **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  53:pff.c         **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  54:pff.c         **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  55:pff.c         **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  56:pff.c         **** 
  57:pff.c         **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  58:pff.c         **** #define _DF1S	0x81
  59:pff.c         **** #define _DF1E	0xFE
  60:pff.c         **** #define _DS1S	0x40
  61:pff.c         **** #define _DS1E	0x7E
  62:pff.c         **** #define _DS2S	0x80
  63:pff.c         **** #define _DS2E	0xFE
  64:pff.c         **** 
  65:pff.c         **** #elif _CODE_PAGE == 949	/* Korean */
  66:pff.c         **** #define _DF1S	0x81
  67:pff.c         **** #define _DF1E	0xFE
  68:pff.c         **** #define _DS1S	0x41
  69:pff.c         **** #define _DS1E	0x5A
  70:pff.c         **** #define _DS2S	0x61
  71:pff.c         **** #define _DS2E	0x7A
  72:pff.c         **** #define _DS3S	0x81
  73:pff.c         **** #define _DS3E	0xFE
  74:pff.c         **** 
  75:pff.c         **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  76:pff.c         **** #define _DF1S	0x81
  77:pff.c         **** #define _DF1E	0xFE
  78:pff.c         **** #define _DS1S	0x40
  79:pff.c         **** #define _DS1E	0x7E
  80:pff.c         **** #define _DS2S	0xA1
  81:pff.c         **** #define _DS2E	0xFE
  82:pff.c         **** 
  83:pff.c         **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
  84:pff.c         **** #define _DF1S	0
  85:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
  86:pff.c         **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
  87:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
  88:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
  89:pff.c         **** 
  90:pff.c         **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
  91:pff.c         **** #define _DF1S	0
  92:pff.c         **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
  93:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
  94:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
  95:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
  96:pff.c         **** 
  97:pff.c         **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
  98:pff.c         **** #define _DF1S	0
  99:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 100:pff.c         **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 101:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 102:pff.c         **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 103:pff.c         **** 
 104:pff.c         **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 105:pff.c         **** #define _DF1S	0
 106:pff.c         **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 107:pff.c         **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 108:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 109:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 110:pff.c         **** 
 111:pff.c         **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 112:pff.c         **** #define _DF1S	0
 113:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 114:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 115:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 116:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 117:pff.c         **** 
 118:pff.c         **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 119:pff.c         **** #define _DF1S	0
 120:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 121:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 122:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 123:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 124:pff.c         **** 
 125:pff.c         **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 126:pff.c         **** #define _DF1S	0
 127:pff.c         **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 128:pff.c         **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 129:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 130:pff.c         **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 131:pff.c         **** 
 132:pff.c         **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 133:pff.c         **** #define _DF1S	0
 134:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 135:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 136:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 137:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 138:pff.c         **** 
 139:pff.c         **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 140:pff.c         **** #define _DF1S	0
 141:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 142:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 143:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 144:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 145:pff.c         **** 
 146:pff.c         **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 147:pff.c         **** #define _DF1S	0
 148:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 149:pff.c         **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 150:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 151:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 152:pff.c         **** 
 153:pff.c         **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 154:pff.c         **** #define _DF1S	0
 155:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 156:pff.c         **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 157:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 158:pff.c         **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 159:pff.c         **** 
 160:pff.c         **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 161:pff.c         **** #define _DF1S	0
 162:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 163:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 164:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 165:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 166:pff.c         **** 
 167:pff.c         **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 168:pff.c         **** #define _DF1S	0
 169:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 170:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 171:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 172:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 173:pff.c         **** 
 174:pff.c         **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 175:pff.c         **** #define _DF1S	0
 176:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 177:pff.c         **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 178:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 179:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 180:pff.c         **** 
 181:pff.c         **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 182:pff.c         **** #define _DF1S	0
 183:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 184:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 185:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 186:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 187:pff.c         **** 
 188:pff.c         **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 189:pff.c         **** #define _DF1S	0
 190:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 191:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 192:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 193:pff.c         **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 194:pff.c         **** 
 195:pff.c         **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 196:pff.c         **** #define _DF1S	0
 197:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 198:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 199:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 200:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 201:pff.c         **** 
 202:pff.c         **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 203:pff.c         **** #define _DF1S	0
 204:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 205:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 206:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 207:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 208:pff.c         **** 
 209:pff.c         **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 210:pff.c         **** #define _DF1S	0
 211:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 212:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 213:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 214:pff.c         **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 215:pff.c         **** 
 216:pff.c         **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 217:pff.c         **** #define _DF1S	0
 218:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 219:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 220:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 221:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 222:pff.c         **** 
 223:pff.c         **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 224:pff.c         **** #define _DF1S	0
 225:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 226:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 227:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 228:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 229:pff.c         **** 
 230:pff.c         **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 231:pff.c         **** #define _DF1S	0
 232:pff.c         **** 
 233:pff.c         **** #else
 234:pff.c         **** #error Unknown code page
 235:pff.c         **** 
 236:pff.c         **** #endif
 237:pff.c         **** 
 238:pff.c         **** 
 239:pff.c         **** 
 240:pff.c         **** /* Character code support macros */
 241:pff.c         **** 
 242:pff.c         **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 243:pff.c         **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 244:pff.c         **** 
 245:pff.c         **** #if _DF1S		/* DBCS configuration */
 246:pff.c         **** 
 247:pff.c         **** #ifdef _DF2S	/* Two 1st byte areas */
 248:pff.c         **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 249:pff.c         **** #else			/* One 1st byte area */
 250:pff.c         **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 251:pff.c         **** #endif
 252:pff.c         **** 
 253:pff.c         **** #ifdef _DS3S	/* Three 2nd byte areas */
 254:pff.c         **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 255:pff.c         **** #else			/* Two 2nd byte areas */
 256:pff.c         **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 257:pff.c         **** #endif
 258:pff.c         **** 
 259:pff.c         **** #else			/* SBCS configuration */
 260:pff.c         **** 
 261:pff.c         **** #define IsDBCS1(c)	0
 262:pff.c         **** #define IsDBCS2(c)	0
 263:pff.c         **** 
 264:pff.c         **** #endif /* _DF1S */
 265:pff.c         **** 
 266:pff.c         **** 
 267:pff.c         **** /* FatFs refers the members in the FAT structures with byte offset instead
 268:pff.c         **** / of structure member because there are incompatibility of the packing option
 269:pff.c         **** / between various compilers. */
 270:pff.c         **** 
 271:pff.c         **** #define BS_jmpBoot			0
 272:pff.c         **** #define BS_OEMName			3
 273:pff.c         **** #define BPB_BytsPerSec		11
 274:pff.c         **** #define BPB_SecPerClus		13
 275:pff.c         **** #define BPB_RsvdSecCnt		14
 276:pff.c         **** #define BPB_NumFATs			16
 277:pff.c         **** #define BPB_RootEntCnt		17
 278:pff.c         **** #define BPB_TotSec16		19
 279:pff.c         **** #define BPB_Media			21
 280:pff.c         **** #define BPB_FATSz16			22
 281:pff.c         **** #define BPB_SecPerTrk		24
 282:pff.c         **** #define BPB_NumHeads		26
 283:pff.c         **** #define BPB_HiddSec			28
 284:pff.c         **** #define BPB_TotSec32		32
 285:pff.c         **** #define BS_55AA				510
 286:pff.c         **** 
 287:pff.c         **** #define BS_DrvNum			36
 288:pff.c         **** #define BS_BootSig			38
 289:pff.c         **** #define BS_VolID			39
 290:pff.c         **** #define BS_VolLab			43
 291:pff.c         **** #define BS_FilSysType		54
 292:pff.c         **** 
 293:pff.c         **** #define BPB_FATSz32			36
 294:pff.c         **** #define BPB_ExtFlags		40
 295:pff.c         **** #define BPB_FSVer			42
 296:pff.c         **** #define BPB_RootClus		44
 297:pff.c         **** #define BPB_FSInfo			48
 298:pff.c         **** #define BPB_BkBootSec		50
 299:pff.c         **** #define BS_DrvNum32			64
 300:pff.c         **** #define BS_BootSig32		66
 301:pff.c         **** #define BS_VolID32			67
 302:pff.c         **** #define BS_VolLab32			71
 303:pff.c         **** #define BS_FilSysType32		82
 304:pff.c         **** 
 305:pff.c         **** #define MBR_Table			446
 306:pff.c         **** 
 307:pff.c         **** #define	DIR_Name			0
 308:pff.c         **** #define	DIR_Attr			11
 309:pff.c         **** #define	DIR_NTres			12
 310:pff.c         **** #define	DIR_CrtTime			14
 311:pff.c         **** #define	DIR_CrtDate			16
 312:pff.c         **** #define	DIR_FstClusHI		20
 313:pff.c         **** #define	DIR_WrtTime			22
 314:pff.c         **** #define	DIR_WrtDate			24
 315:pff.c         **** #define	DIR_FstClusLO		26
 316:pff.c         **** #define	DIR_FileSize		28
 317:pff.c         **** 
 318:pff.c         **** 
 319:pff.c         **** 
 320:pff.c         **** /*--------------------------------------------------------------------------
 321:pff.c         **** 
 322:pff.c         ****    Private Functions
 323:pff.c         **** 
 324:pff.c         **** ---------------------------------------------------------------------------*/
 325:pff.c         **** 
 326:pff.c         **** 
 327:pff.c         **** static
 328:pff.c         **** FATFS *FatFs;	/* Pointer to the file system object (logical drive) */
 329:pff.c         **** 
 330:pff.c         **** 
 331:pff.c         **** /* Fill memory */
 332:pff.c         **** static
 333:pff.c         **** void mem_set (void* dst, int val, int cnt) {
 334:pff.c         **** 	char *d = (char*)dst;
 335:pff.c         **** 	while (cnt--) *d++ = (char)val;
 336:pff.c         **** }
 337:pff.c         **** 
 338:pff.c         **** /* Compare memory to memory */
 339:pff.c         **** static
 340:pff.c         **** int mem_cmp (const void* dst, const void* src, int cnt) {
 341:pff.c         **** 	const char *d = (const char *)dst, *s = (const char *)src;
 342:pff.c         **** 	int r = 0;
 343:pff.c         **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 344:pff.c         **** 	return r;
 345:pff.c         **** }
 346:pff.c         **** 
 347:pff.c         **** 
 348:pff.c         **** 
 349:pff.c         **** /*-----------------------------------------------------------------------*/
 350:pff.c         **** /* FAT access - Read value of a FAT entry                                */
 351:pff.c         **** /*-----------------------------------------------------------------------*/
 352:pff.c         **** 
 353:pff.c         **** static
 354:pff.c         **** CLUST get_fat (	/* 1:IO error, Else:Cluster status */
 355:pff.c         **** 	CLUST clst	/* Cluster# to get the link information */
 356:pff.c         **** )
 357:pff.c         **** {
 358:pff.c         **** 	WORD wc, bc, ofs;
 359:pff.c         **** 	BYTE buf[4];
 360:pff.c         **** 	FATFS *fs = FatFs;
 361:pff.c         **** 
 362:pff.c         **** 
 363:pff.c         **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
 364:pff.c         **** 		return 1;
 365:pff.c         **** 
 366:pff.c         **** 	switch (fs->fs_type) {
 367:pff.c         **** #if _FS_FAT12
 368:pff.c         **** 	case FS_FAT12 :
 369:pff.c         **** 		bc = (WORD)clst; bc += bc / 2;
 370:pff.c         **** 		ofs = bc % 512; bc /= 512;
 371:pff.c         **** 		if (ofs != 511) {
 372:pff.c         **** 			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
 373:pff.c         **** 		} else {
 374:pff.c         **** 			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
 375:pff.c         **** 			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
 376:pff.c         **** 		}
 377:pff.c         **** 		wc = LD_WORD(buf);
 378:pff.c         **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 379:pff.c         **** #endif
 380:pff.c         **** 	case FS_FAT16 :
 381:pff.c         **** 		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
 382:pff.c         **** 		return LD_WORD(buf);
 383:pff.c         **** #if _FS_FAT32
 384:pff.c         **** 	case FS_FAT32 :
 385:pff.c         **** 		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
 386:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 387:pff.c         **** #endif
 388:pff.c         **** 	}
 389:pff.c         **** 
 390:pff.c         **** 	return 1;	/* An error occured at the disk I/O layer */
 391:pff.c         **** }
 392:pff.c         **** 
 393:pff.c         **** 
 394:pff.c         **** 
 395:pff.c         **** 
 396:pff.c         **** /*-----------------------------------------------------------------------*/
 397:pff.c         **** /* Get sector# from cluster#                                             */
 398:pff.c         **** /*-----------------------------------------------------------------------*/
 399:pff.c         **** 
 400:pff.c         **** static
 401:pff.c         **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 402:pff.c         **** 	CLUST clst		/* Cluster# to be converted */
 403:pff.c         **** )
 404:pff.c         **** {
  15               		.loc 1 404 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 4
  21               		.cfi_offset 16, -3
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 5
  25               		.cfi_offset 17, -4
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 405:pff.c         **** 	FATFS *fs = FatFs;
  30               		.loc 1 405 0
  31 0004 E091 0000 		lds r30,FatFs
  32 0008 F091 0000 		lds r31,FatFs+1
  33               	.LVL1:
 406:pff.c         **** 
 407:pff.c         **** 
 408:pff.c         **** 	clst -= 2;
  34               		.loc 1 408 0
  35 000c 9B01      		movw r18,r22
  36 000e AC01      		movw r20,r24
  37 0010 2250      		subi r18,2
  38 0012 3109      		sbc r19,__zero_reg__
  39 0014 4109      		sbc r20,__zero_reg__
  40 0016 5109      		sbc r21,__zero_reg__
  41               	.LVL2:
 409:pff.c         **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  42               		.loc 1 409 0
  43 0018 8681      		ldd r24,Z+6
  44 001a 9781      		ldd r25,Z+7
  45 001c A085      		ldd r26,Z+8
  46 001e B185      		ldd r27,Z+9
  47 0020 0297      		sbiw r24,2
  48 0022 A109      		sbc r26,__zero_reg__
  49 0024 B109      		sbc r27,__zero_reg__
  50 0026 2817      		cp r18,r24
  51 0028 3907      		cpc r19,r25
  52 002a 4A07      		cpc r20,r26
  53 002c 5B07      		cpc r21,r27
  54 002e 00F4      		brsh .L3
 410:pff.c         **** 	return (DWORD)clst * fs->csize + fs->database;
  55               		.loc 1 410 0
  56 0030 A281      		ldd r26,Z+2
  57 0032 B0E0      		ldi r27,0
  58 0034 0E94 0000 		call __muluhisi3
  59 0038 0289      		ldd r16,Z+18
  60 003a 1389      		ldd r17,Z+19
  61 003c 2489      		ldd r18,Z+20
  62 003e 3589      		ldd r19,Z+21
  63 0040 600F      		add r22,r16
  64 0042 711F      		adc r23,r17
  65 0044 821F      		adc r24,r18
  66 0046 931F      		adc r25,r19
  67 0048 00C0      		rjmp .L2
  68               	.L3:
 409:pff.c         **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  69               		.loc 1 409 0
  70 004a 60E0      		ldi r22,0
  71 004c 70E0      		ldi r23,0
  72 004e CB01      		movw r24,r22
  73               	.L2:
  74               	/* epilogue start */
 411:pff.c         **** }
  75               		.loc 1 411 0
  76 0050 1F91      		pop r17
  77 0052 0F91      		pop r16
  78 0054 0895      		ret
  79               		.cfi_endproc
  80               	.LFE3:
  83               	dir_rewind:
  84               	.LFB4:
 412:pff.c         **** 
 413:pff.c         **** 
 414:pff.c         **** 
 415:pff.c         **** 
 416:pff.c         **** /*-----------------------------------------------------------------------*/
 417:pff.c         **** /* Directory handling - Rewind directory index                           */
 418:pff.c         **** /*-----------------------------------------------------------------------*/
 419:pff.c         **** 
 420:pff.c         **** static
 421:pff.c         **** FRESULT dir_rewind (
 422:pff.c         **** 	DIR *dj			/* Pointer to directory object */
 423:pff.c         **** )
 424:pff.c         **** {
  85               		.loc 1 424 0
  86               		.cfi_startproc
  87               	.LVL3:
  88 0056 0F93      		push r16
  89               	.LCFI2:
  90               		.cfi_def_cfa_offset 4
  91               		.cfi_offset 16, -3
  92 0058 1F93      		push r17
  93               	.LCFI3:
  94               		.cfi_def_cfa_offset 5
  95               		.cfi_offset 17, -4
  96 005a CF93      		push r28
  97               	.LCFI4:
  98               		.cfi_def_cfa_offset 6
  99               		.cfi_offset 28, -5
 100 005c DF93      		push r29
 101               	.LCFI5:
 102               		.cfi_def_cfa_offset 7
 103               		.cfi_offset 29, -6
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 4 */
 107               	.L__stack_usage = 4
 108 005e DC01      		movw r26,r24
 425:pff.c         **** 	CLUST clst;
 426:pff.c         **** 	FATFS *fs = FatFs;
 109               		.loc 1 426 0
 110 0060 E091 0000 		lds r30,FatFs
 111 0064 F091 0000 		lds r31,FatFs+1
 112               	.LVL4:
 427:pff.c         **** 
 428:pff.c         **** 
 429:pff.c         **** 	dj->index = 0;
 113               		.loc 1 429 0
 114 0068 1196      		adiw r26,1
 115 006a 1C92      		st X,__zero_reg__
 116 006c 1E92      		st -X,__zero_reg__
 430:pff.c         **** 	clst = dj->sclust;
 117               		.loc 1 430 0
 118 006e 1496      		adiw r26,4
 119 0070 6D91      		ld r22,X+
 120 0072 7D91      		ld r23,X+
 121 0074 8D91      		ld r24,X+
 122 0076 9C91      		ld r25,X
 123 0078 1797      		sbiw r26,4+3
 124               	.LVL5:
 431:pff.c         **** 	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
 125               		.loc 1 431 0
 126 007a 6130      		cpi r22,1
 127 007c 7105      		cpc r23,__zero_reg__
 128 007e 8105      		cpc r24,__zero_reg__
 129 0080 9105      		cpc r25,__zero_reg__
 130 0082 01F0      		breq .L11
 131               		.loc 1 431 0 is_stmt 0 discriminator 1
 132 0084 0681      		ldd r16,Z+6
 133 0086 1781      		ldd r17,Z+7
 134 0088 2085      		ldd r18,Z+8
 135 008a 3185      		ldd r19,Z+9
 136 008c 6017      		cp r22,r16
 137 008e 7107      		cpc r23,r17
 138 0090 8207      		cpc r24,r18
 139 0092 9307      		cpc r25,r19
 140 0094 00F4      		brsh .L11
 432:pff.c         **** 		return FR_DISK_ERR;
 433:pff.c         **** 	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in 
 141               		.loc 1 433 0 is_stmt 1
 142 0096 6115      		cp r22,__zero_reg__
 143 0098 7105      		cpc r23,__zero_reg__
 144 009a 8105      		cpc r24,__zero_reg__
 145 009c 9105      		cpc r25,__zero_reg__
 146 009e 01F4      		brne .L7
 147               		.loc 1 433 0 is_stmt 0 discriminator 1
 148 00a0 2081      		ld r18,Z
 149 00a2 2330      		cpi r18,lo8(3)
 150 00a4 01F4      		brne .L7
 434:pff.c         **** 		clst = (CLUST)fs->dirbase;
 151               		.loc 1 434 0 is_stmt 1
 152 00a6 6685      		ldd r22,Z+14
 153 00a8 7785      		ldd r23,Z+15
 154 00aa 8089      		ldd r24,Z+16
 155 00ac 9189      		ldd r25,Z+17
 156               	.LVL6:
 157               	.L7:
 158 00ae ED01      		movw r28,r26
 435:pff.c         **** 	dj->clust = clst;						/* Current cluster */
 159               		.loc 1 435 0
 160 00b0 6887      		std Y+8,r22
 161 00b2 7987      		std Y+9,r23
 162 00b4 8A87      		std Y+10,r24
 163 00b6 9B87      		std Y+11,r25
 436:pff.c         **** 	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 164               		.loc 1 436 0
 165 00b8 6115      		cp r22,__zero_reg__
 166 00ba 7105      		cpc r23,__zero_reg__
 167 00bc 8105      		cpc r24,__zero_reg__
 168 00be 9105      		cpc r25,__zero_reg__
 169 00c0 01F0      		breq .L8
 170               		.loc 1 436 0 is_stmt 0 discriminator 1
 171 00c2 0E94 0000 		call clust2sect
 172               	.LVL7:
 173 00c6 00C0      		rjmp .L9
 174               	.LVL8:
 175               	.L8:
 176               		.loc 1 436 0 discriminator 2
 177 00c8 6685      		ldd r22,Z+14
 178 00ca 7785      		ldd r23,Z+15
 179 00cc 8089      		ldd r24,Z+16
 180 00ce 9189      		ldd r25,Z+17
 181               	.LVL9:
 182               	.L9:
 183               		.loc 1 436 0 discriminator 4
 184 00d0 6C87      		std Y+12,r22
 185 00d2 7D87      		std Y+13,r23
 186 00d4 8E87      		std Y+14,r24
 187 00d6 9F87      		std Y+15,r25
 437:pff.c         **** 
 438:pff.c         **** 	return FR_OK;	/* Seek succeeded */
 188               		.loc 1 438 0 is_stmt 1 discriminator 4
 189 00d8 80E0      		ldi r24,0
 190 00da 00C0      		rjmp .L6
 191               	.LVL10:
 192               	.L11:
 432:pff.c         **** 	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in 
 193               		.loc 1 432 0
 194 00dc 81E0      		ldi r24,lo8(1)
 195               	.LVL11:
 196               	.L6:
 197               	/* epilogue start */
 439:pff.c         **** }
 198               		.loc 1 439 0
 199 00de DF91      		pop r29
 200 00e0 CF91      		pop r28
 201 00e2 1F91      		pop r17
 202 00e4 0F91      		pop r16
 203 00e6 0895      		ret
 204               		.cfi_endproc
 205               	.LFE4:
 208               	get_fat:
 209               	.LFB2:
 357:pff.c         **** 	WORD wc, bc, ofs;
 210               		.loc 1 357 0
 211               		.cfi_startproc
 212               	.LVL12:
 213 00e8 CF92      		push r12
 214               	.LCFI6:
 215               		.cfi_def_cfa_offset 4
 216               		.cfi_offset 12, -3
 217 00ea DF92      		push r13
 218               	.LCFI7:
 219               		.cfi_def_cfa_offset 5
 220               		.cfi_offset 13, -4
 221 00ec EF92      		push r14
 222               	.LCFI8:
 223               		.cfi_def_cfa_offset 6
 224               		.cfi_offset 14, -5
 225 00ee FF92      		push r15
 226               	.LCFI9:
 227               		.cfi_def_cfa_offset 7
 228               		.cfi_offset 15, -6
 229 00f0 0F93      		push r16
 230               	.LCFI10:
 231               		.cfi_def_cfa_offset 8
 232               		.cfi_offset 16, -7
 233 00f2 1F93      		push r17
 234               	.LCFI11:
 235               		.cfi_def_cfa_offset 9
 236               		.cfi_offset 17, -8
 237 00f4 CF93      		push r28
 238               	.LCFI12:
 239               		.cfi_def_cfa_offset 10
 240               		.cfi_offset 28, -9
 241 00f6 DF93      		push r29
 242               	.LCFI13:
 243               		.cfi_def_cfa_offset 11
 244               		.cfi_offset 29, -10
 245 00f8 00D0      		rcall .
 246 00fa 1F92      		push __zero_reg__
 247               	.LCFI14:
 248               		.cfi_def_cfa_offset 15
 249 00fc CDB7      		in r28,__SP_L__
 250 00fe DEB7      		in r29,__SP_H__
 251               	.LCFI15:
 252               		.cfi_def_cfa_register 28
 253               	/* prologue: function */
 254               	/* frame size = 4 */
 255               	/* stack size = 12 */
 256               	.L__stack_usage = 12
 360:pff.c         **** 
 257               		.loc 1 360 0
 258 0100 E091 0000 		lds r30,FatFs
 259 0104 F091 0000 		lds r31,FatFs+1
 260               	.LVL13:
 363:pff.c         **** 		return 1;
 261               		.loc 1 363 0
 262 0108 6230      		cpi r22,2
 263 010a 7105      		cpc r23,__zero_reg__
 264 010c 8105      		cpc r24,__zero_reg__
 265 010e 9105      		cpc r25,__zero_reg__
 266 0110 00F4      		brsh .+2
 267 0112 00C0      		rjmp .L19
 363:pff.c         **** 		return 1;
 268               		.loc 1 363 0 is_stmt 0 discriminator 1
 269 0114 C680      		ldd r12,Z+6
 270 0116 D780      		ldd r13,Z+7
 271 0118 E084      		ldd r14,Z+8
 272 011a F184      		ldd r15,Z+9
 273 011c 6C15      		cp r22,r12
 274 011e 7D05      		cpc r23,r13
 275 0120 8E05      		cpc r24,r14
 276 0122 9F05      		cpc r25,r15
 277 0124 00F0      		brlo .+2
 278 0126 00C0      		rjmp .L19
 366:pff.c         **** #if _FS_FAT12
 279               		.loc 1 366 0 is_stmt 1
 280 0128 2081      		ld r18,Z
 281 012a 2230      		cpi r18,lo8(2)
 282 012c 01F0      		breq .L16
 283 012e 2330      		cpi r18,lo8(3)
 284 0130 01F0      		breq .L17
 285 0132 00C0      		rjmp .L19
 286               	.L16:
 381:pff.c         **** 		return LD_WORD(buf);
 287               		.loc 1 381 0
 288 0134 9B01      		movw r18,r22
 289 0136 3327      		clr r19
 290 0138 220F      		lsl r18
 291 013a 331F      		rol r19
 292 013c BB27      		clr r27
 293 013e A92F      		mov r26,r25
 294 0140 982F      		mov r25,r24
 295 0142 872F      		mov r24,r23
 296 0144 C284      		ldd r12,Z+10
 297 0146 D384      		ldd r13,Z+11
 298 0148 E484      		ldd r14,Z+12
 299 014a F584      		ldd r15,Z+13
 300 014c AC01      		movw r20,r24
 301 014e BD01      		movw r22,r26
 302 0150 4C0D      		add r20,r12
 303 0152 5D1D      		adc r21,r13
 304 0154 6E1D      		adc r22,r14
 305 0156 7F1D      		adc r23,r15
 306 0158 02E0      		ldi r16,lo8(2)
 307 015a 10E0      		ldi r17,0
 308 015c CE01      		movw r24,r28
 309 015e 0196      		adiw r24,1
 310 0160 0E94 0000 		call disk_readp
 311               	.LVL14:
 312 0164 8111      		cpse r24,__zero_reg__
 313 0166 00C0      		rjmp .L19
 382:pff.c         **** #if _FS_FAT32
 314               		.loc 1 382 0
 315 0168 6981      		ldd r22,Y+1
 316 016a 7A81      		ldd r23,Y+2
 317 016c 80E0      		ldi r24,0
 318 016e 90E0      		ldi r25,0
 319 0170 00C0      		rjmp .L14
 320               	.LVL15:
 321               	.L17:
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 322               		.loc 1 385 0
 323 0172 9B01      		movw r18,r22
 324 0174 2F77      		andi r18,127
 325 0176 3327      		clr r19
 326 0178 220F      		lsl r18
 327 017a 331F      		rol r19
 328 017c 220F      		lsl r18
 329 017e 331F      		rol r19
 330 0180 DC01      		movw r26,r24
 331 0182 CB01      		movw r24,r22
 332 0184 57E0      		ldi r21,7
 333               		1:
 334 0186 B695      		lsr r27
 335 0188 A795      		ror r26
 336 018a 9795      		ror r25
 337 018c 8795      		ror r24
 338 018e 5A95      		dec r21
 339 0190 01F4      		brne 1b
 340 0192 C284      		ldd r12,Z+10
 341 0194 D384      		ldd r13,Z+11
 342 0196 E484      		ldd r14,Z+12
 343 0198 F584      		ldd r15,Z+13
 344 019a AC01      		movw r20,r24
 345 019c BD01      		movw r22,r26
 346 019e 4C0D      		add r20,r12
 347 01a0 5D1D      		adc r21,r13
 348 01a2 6E1D      		adc r22,r14
 349 01a4 7F1D      		adc r23,r15
 350 01a6 04E0      		ldi r16,lo8(4)
 351 01a8 10E0      		ldi r17,0
 352 01aa CE01      		movw r24,r28
 353 01ac 0196      		adiw r24,1
 354 01ae 0E94 0000 		call disk_readp
 355               	.LVL16:
 356 01b2 8111      		cpse r24,__zero_reg__
 357 01b4 00C0      		rjmp .L19
 386:pff.c         **** #endif
 358               		.loc 1 386 0
 359 01b6 8981      		ldd r24,Y+1
 360 01b8 9A81      		ldd r25,Y+2
 361 01ba AB81      		ldd r26,Y+3
 362 01bc BC81      		ldd r27,Y+4
 363 01be BC01      		movw r22,r24
 364 01c0 CD01      		movw r24,r26
 365 01c2 9F70      		andi r25,15
 366 01c4 00C0      		rjmp .L14
 367               	.L19:
 390:pff.c         **** }
 368               		.loc 1 390 0
 369 01c6 61E0      		ldi r22,lo8(1)
 370 01c8 70E0      		ldi r23,0
 371 01ca 80E0      		ldi r24,0
 372 01cc 90E0      		ldi r25,0
 373               	.L14:
 374               	/* epilogue start */
 391:pff.c         **** 
 375               		.loc 1 391 0
 376 01ce 0F90      		pop __tmp_reg__
 377 01d0 0F90      		pop __tmp_reg__
 378 01d2 0F90      		pop __tmp_reg__
 379 01d4 0F90      		pop __tmp_reg__
 380 01d6 DF91      		pop r29
 381 01d8 CF91      		pop r28
 382 01da 1F91      		pop r17
 383 01dc 0F91      		pop r16
 384 01de FF90      		pop r15
 385 01e0 EF90      		pop r14
 386 01e2 DF90      		pop r13
 387 01e4 CF90      		pop r12
 388 01e6 0895      		ret
 389               		.cfi_endproc
 390               	.LFE2:
 393               	check_fs:
 394               	.LFB9:
 440:pff.c         **** 
 441:pff.c         **** 
 442:pff.c         **** 
 443:pff.c         **** 
 444:pff.c         **** /*-----------------------------------------------------------------------*/
 445:pff.c         **** /* Directory handling - Move directory index next                        */
 446:pff.c         **** /*-----------------------------------------------------------------------*/
 447:pff.c         **** 
 448:pff.c         **** static
 449:pff.c         **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
 450:pff.c         **** 	DIR *dj			/* Pointer to directory object */
 451:pff.c         **** )
 452:pff.c         **** {
 453:pff.c         **** 	CLUST clst;
 454:pff.c         **** 	WORD i;
 455:pff.c         **** 	FATFS *fs = FatFs;
 456:pff.c         **** 
 457:pff.c         **** 
 458:pff.c         **** 	i = dj->index + 1;
 459:pff.c         **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 460:pff.c         **** 		return FR_NO_FILE;
 461:pff.c         **** 
 462:pff.c         **** 	if (!(i % 16)) {		/* Sector changed? */
 463:pff.c         **** 		dj->sect++;			/* Next sector */
 464:pff.c         **** 
 465:pff.c         **** 		if (dj->clust == 0) {	/* Static table */
 466:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 467:pff.c         **** 				return FR_NO_FILE;
 468:pff.c         **** 		}
 469:pff.c         **** 		else {					/* Dynamic table */
 470:pff.c         **** 			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
 471:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 472:pff.c         **** 				if (clst <= 1) return FR_DISK_ERR;
 473:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 474:pff.c         **** 					return FR_NO_FILE;			/* Report EOT */
 475:pff.c         **** 				dj->clust = clst;				/* Initialize data for new cluster */
 476:pff.c         **** 				dj->sect = clust2sect(clst);
 477:pff.c         **** 			}
 478:pff.c         **** 		}
 479:pff.c         **** 	}
 480:pff.c         **** 
 481:pff.c         **** 	dj->index = i;
 482:pff.c         **** 
 483:pff.c         **** 	return FR_OK;
 484:pff.c         **** }
 485:pff.c         **** 
 486:pff.c         **** 
 487:pff.c         **** 
 488:pff.c         **** 
 489:pff.c         **** /*-----------------------------------------------------------------------*/
 490:pff.c         **** /* Directory handling - Find an object in the directory                  */
 491:pff.c         **** /*-----------------------------------------------------------------------*/
 492:pff.c         **** 
 493:pff.c         **** static
 494:pff.c         **** FRESULT dir_find (
 495:pff.c         **** 	DIR *dj,		/* Pointer to the directory object linked to the file name */
 496:pff.c         **** 	BYTE *dir		/* 32-byte working buffer */
 497:pff.c         **** )
 498:pff.c         **** {
 499:pff.c         **** 	FRESULT res;
 500:pff.c         **** 	BYTE c;
 501:pff.c         **** 
 502:pff.c         **** 
 503:pff.c         **** 	res = dir_rewind(dj);			/* Rewind directory object */
 504:pff.c         **** 	if (res != FR_OK) return res;
 505:pff.c         **** 
 506:pff.c         **** 	do {
 507:pff.c         **** 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 508:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 509:pff.c         **** 		if (res != FR_OK) break;
 510:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 511:pff.c         **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 512:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 513:pff.c         **** 			break;
 514:pff.c         **** 		res = dir_next(dj);					/* Next entry */
 515:pff.c         **** 	} while (res == FR_OK);
 516:pff.c         **** 
 517:pff.c         **** 	return res;
 518:pff.c         **** }
 519:pff.c         **** 
 520:pff.c         **** 
 521:pff.c         **** 
 522:pff.c         **** 
 523:pff.c         **** /*-----------------------------------------------------------------------*/
 524:pff.c         **** /* Read an object from the directory                                     */
 525:pff.c         **** /*-----------------------------------------------------------------------*/
 526:pff.c         **** #if _USE_DIR
 527:pff.c         **** static
 528:pff.c         **** FRESULT dir_read (
 529:pff.c         **** 	DIR *dj,		/* Pointer to the directory object to store read object name */
 530:pff.c         **** 	BYTE *dir		/* 32-byte working buffer */
 531:pff.c         **** )
 532:pff.c         **** {
 533:pff.c         **** 	FRESULT res;
 534:pff.c         **** 	BYTE a, c;
 535:pff.c         **** 
 536:pff.c         **** 
 537:pff.c         **** 	res = FR_NO_FILE;
 538:pff.c         **** 	while (dj->sect) {
 539:pff.c         **** 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 540:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 541:pff.c         **** 		if (res != FR_OK) break;
 542:pff.c         **** 		c = dir[DIR_Name];
 543:pff.c         **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 544:pff.c         **** 		a = dir[DIR_Attr] & AM_MASK;
 545:pff.c         **** 		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
 546:pff.c         **** 			break;
 547:pff.c         **** 		res = dir_next(dj);			/* Next entry */
 548:pff.c         **** 		if (res != FR_OK) break;
 549:pff.c         **** 	}
 550:pff.c         **** 
 551:pff.c         **** 	if (res != FR_OK) dj->sect = 0;
 552:pff.c         **** 
 553:pff.c         **** 	return res;
 554:pff.c         **** }
 555:pff.c         **** #endif
 556:pff.c         **** 
 557:pff.c         **** 
 558:pff.c         **** 
 559:pff.c         **** /*-----------------------------------------------------------------------*/
 560:pff.c         **** /* Pick a segment and create the object name in directory form           */
 561:pff.c         **** /*-----------------------------------------------------------------------*/
 562:pff.c         **** 
 563:pff.c         **** #ifdef _EXCVT
 564:pff.c         **** 	static const BYTE cvt[] = _EXCVT;
 565:pff.c         **** #endif
 566:pff.c         **** 
 567:pff.c         **** static
 568:pff.c         **** FRESULT create_name (
 569:pff.c         **** 	DIR *dj,			/* Pointer to the directory object */
 570:pff.c         **** 	const char **path	/* Pointer to pointer to the segment in the path string */
 571:pff.c         **** )
 572:pff.c         **** {
 573:pff.c         **** 	BYTE c, d, ni, si, i, *sfn;
 574:pff.c         **** 	const char *p;
 575:pff.c         **** 
 576:pff.c         **** 	/* Create file name in directory form */
 577:pff.c         **** 	sfn = dj->fn;
 578:pff.c         **** 	mem_set(sfn, ' ', 11);
 579:pff.c         **** 	si = i = 0; ni = 8;
 580:pff.c         **** 	p = *path;
 581:pff.c         **** 	for (;;) {
 582:pff.c         **** 		c = p[si++];
 583:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 584:pff.c         **** 		if (c == '.' || i >= ni) {
 585:pff.c         **** 			if (ni != 8 || c != '.') break;
 586:pff.c         **** 			i = 8; ni = 11;
 587:pff.c         **** 			continue;
 588:pff.c         **** 		}
 589:pff.c         **** #ifdef _EXCVT
 590:pff.c         **** 		if (c >= 0x80)					/* To upper extended char (SBCS) */
 591:pff.c         **** 			c = cvt[c - 0x80];
 592:pff.c         **** #endif
 593:pff.c         **** 		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
 594:pff.c         **** 			d = p[si++];				/* Get 2nd byte */
 595:pff.c         **** 			sfn[i++] = c;
 596:pff.c         **** 			sfn[i++] = d;
 597:pff.c         **** 		} else {						/* Single byte code */
 598:pff.c         **** 			if (IsLower(c)) c -= 0x20;	/* toupper */
 599:pff.c         **** 			sfn[i++] = c;
 600:pff.c         **** 		}
 601:pff.c         **** 	}
 602:pff.c         **** 	*path = &p[si];						/* Rerurn pointer to the next segment */
 603:pff.c         **** 
 604:pff.c         **** 	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
 605:pff.c         **** 
 606:pff.c         **** 	return FR_OK;
 607:pff.c         **** }
 608:pff.c         **** 
 609:pff.c         **** 
 610:pff.c         **** 
 611:pff.c         **** 
 612:pff.c         **** /*-----------------------------------------------------------------------*/
 613:pff.c         **** /* Get file information from directory entry                             */
 614:pff.c         **** /*-----------------------------------------------------------------------*/
 615:pff.c         **** #if _USE_DIR
 616:pff.c         **** static
 617:pff.c         **** void get_fileinfo (		/* No return code */
 618:pff.c         **** 	DIR *dj,			/* Pointer to the directory object */
 619:pff.c         **** 	BYTE *dir,			/* 32-byte working buffer */
 620:pff.c         **** 	FILINFO *fno	 	/* Pointer to store the file information */
 621:pff.c         **** )
 622:pff.c         **** {
 623:pff.c         **** 	BYTE i, c;
 624:pff.c         **** 	char *p;
 625:pff.c         **** 
 626:pff.c         **** 
 627:pff.c         **** 	p = fno->fname;
 628:pff.c         **** 	if (dj->sect) {
 629:pff.c         **** 		for (i = 0; i < 8; i++) {	/* Copy file name body */
 630:pff.c         **** 			c = dir[i];
 631:pff.c         **** 			if (c == ' ') break;
 632:pff.c         **** 			if (c == 0x05) c = 0xE5;
 633:pff.c         **** 			*p++ = c;
 634:pff.c         **** 		}
 635:pff.c         **** 		if (dir[8] != ' ') {		/* Copy file name extension */
 636:pff.c         **** 			*p++ = '.';
 637:pff.c         **** 			for (i = 8; i < 11; i++) {
 638:pff.c         **** 				c = dir[i];
 639:pff.c         **** 				if (c == ' ') break;
 640:pff.c         **** 				*p++ = c;
 641:pff.c         **** 			}
 642:pff.c         **** 		}
 643:pff.c         **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 644:pff.c         **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 645:pff.c         **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 646:pff.c         **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 647:pff.c         **** 	}
 648:pff.c         **** 	*p = 0;
 649:pff.c         **** }
 650:pff.c         **** #endif /* _USE_DIR */
 651:pff.c         **** 
 652:pff.c         **** 
 653:pff.c         **** 
 654:pff.c         **** /*-----------------------------------------------------------------------*/
 655:pff.c         **** /* Follow a file path                                                    */
 656:pff.c         **** /*-----------------------------------------------------------------------*/
 657:pff.c         **** 
 658:pff.c         **** static
 659:pff.c         **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 660:pff.c         **** 	DIR *dj,			/* Directory object to return last directory and found object */
 661:pff.c         **** 	BYTE *dir,			/* 32-byte working buffer */
 662:pff.c         **** 	const char *path	/* Full-path string to find a file or directory */
 663:pff.c         **** )
 664:pff.c         **** {
 665:pff.c         **** 	FRESULT res;
 666:pff.c         **** 
 667:pff.c         **** 
 668:pff.c         **** 	while (*path == ' ') path++;		/* Skip leading spaces */
 669:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 670:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 671:pff.c         **** 
 672:pff.c         **** 	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
 673:pff.c         **** 		res = dir_rewind(dj);
 674:pff.c         **** 		dir[0] = 0;
 675:pff.c         **** 
 676:pff.c         **** 	} else {							/* Follow path */
 677:pff.c         **** 		for (;;) {
 678:pff.c         **** 			res = create_name(dj, &path);	/* Get a segment */
 679:pff.c         **** 			if (res != FR_OK) break;
 680:pff.c         **** 			res = dir_find(dj, dir);		/* Find it */
 681:pff.c         **** 			if (res != FR_OK) {				/* Could not find the object */
 682:pff.c         **** 				if (res == FR_NO_FILE && !*(dj->fn+11))
 683:pff.c         **** 					res = FR_NO_PATH;
 684:pff.c         **** 				break;
 685:pff.c         **** 			}
 686:pff.c         **** 			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
 687:pff.c         **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 688:pff.c         **** 				res = FR_NO_PATH; break;
 689:pff.c         **** 			}
 690:pff.c         **** 			dj->sclust = LD_CLUST(dir);
 691:pff.c         **** 		}
 692:pff.c         **** 	}
 693:pff.c         **** 
 694:pff.c         **** 	return res;
 695:pff.c         **** }
 696:pff.c         **** 
 697:pff.c         **** 
 698:pff.c         **** 
 699:pff.c         **** 
 700:pff.c         **** /*-----------------------------------------------------------------------*/
 701:pff.c         **** /* Check a sector if it is an FAT boot record                            */
 702:pff.c         **** /*-----------------------------------------------------------------------*/
 703:pff.c         **** 
 704:pff.c         **** static
 705:pff.c         **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
 706:pff.c         **** 	BYTE *buf,	/* Working buffer */
 707:pff.c         **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
 708:pff.c         **** )
 709:pff.c         **** {
 395               		.loc 1 709 0
 396               		.cfi_startproc
 397               	.LVL17:
 398 01e8 CF92      		push r12
 399               	.LCFI16:
 400               		.cfi_def_cfa_offset 4
 401               		.cfi_offset 12, -3
 402 01ea DF92      		push r13
 403               	.LCFI17:
 404               		.cfi_def_cfa_offset 5
 405               		.cfi_offset 13, -4
 406 01ec EF92      		push r14
 407               	.LCFI18:
 408               		.cfi_def_cfa_offset 6
 409               		.cfi_offset 14, -5
 410 01ee FF92      		push r15
 411               	.LCFI19:
 412               		.cfi_def_cfa_offset 7
 413               		.cfi_offset 15, -6
 414 01f0 0F93      		push r16
 415               	.LCFI20:
 416               		.cfi_def_cfa_offset 8
 417               		.cfi_offset 16, -7
 418 01f2 1F93      		push r17
 419               	.LCFI21:
 420               		.cfi_def_cfa_offset 9
 421               		.cfi_offset 17, -8
 422 01f4 CF93      		push r28
 423               	.LCFI22:
 424               		.cfi_def_cfa_offset 10
 425               		.cfi_offset 28, -9
 426 01f6 DF93      		push r29
 427               	.LCFI23:
 428               		.cfi_def_cfa_offset 11
 429               		.cfi_offset 29, -10
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 8 */
 433               	.L__stack_usage = 8
 434 01f8 EC01      		movw r28,r24
 435 01fa 6A01      		movw r12,r20
 436 01fc 7B01      		movw r14,r22
 710:pff.c         **** 	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
 437               		.loc 1 710 0
 438 01fe 02E0      		ldi r16,lo8(2)
 439 0200 10E0      		ldi r17,0
 440 0202 2EEF      		ldi r18,lo8(-2)
 441 0204 31E0      		ldi r19,lo8(1)
 442 0206 0E94 0000 		call disk_readp
 443               	.LVL18:
 444 020a 8111      		cpse r24,__zero_reg__
 445 020c 00C0      		rjmp .L24
 711:pff.c         **** 		return 3;
 712:pff.c         **** 	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 446               		.loc 1 712 0
 447 020e 8881      		ld r24,Y
 448 0210 9981      		ldd r25,Y+1
 449 0212 8535      		cpi r24,85
 450 0214 9A4A      		sbci r25,-86
 451 0216 01F4      		brne .L25
 713:pff.c         **** 		return 2;
 714:pff.c         **** 
 715:pff.c         **** 	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
 452               		.loc 1 715 0
 453 0218 26E3      		ldi r18,lo8(54)
 454 021a 30E0      		ldi r19,0
 455 021c B701      		movw r22,r14
 456 021e A601      		movw r20,r12
 457 0220 CE01      		movw r24,r28
 458 0222 0E94 0000 		call disk_readp
 459               	.LVL19:
 460 0226 8111      		cpse r24,__zero_reg__
 461 0228 00C0      		rjmp .L22
 462               		.loc 1 715 0 is_stmt 0 discriminator 1
 463 022a 8881      		ld r24,Y
 464 022c 9981      		ldd r25,Y+1
 465 022e 8634      		cpi r24,70
 466 0230 9144      		sbci r25,65
 467 0232 01F4      		brne .L22
 468               	.L23:
 716:pff.c         **** 		return 0;
 469               		.loc 1 716 0 is_stmt 1
 470 0234 80E0      		ldi r24,0
 471 0236 00C0      		rjmp .L21
 472               	.L22:
 473               	.LVL20:
 474               	.LBB4:
 475               	.LBB5:
 717:pff.c         **** 	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FA
 476               		.loc 1 717 0
 477 0238 02E0      		ldi r16,lo8(2)
 478 023a 10E0      		ldi r17,0
 479 023c 22E5      		ldi r18,lo8(82)
 480 023e 30E0      		ldi r19,0
 481 0240 B701      		movw r22,r14
 482 0242 A601      		movw r20,r12
 483 0244 CE01      		movw r24,r28
 484 0246 0E94 0000 		call disk_readp
 485               	.LVL21:
 486 024a 8111      		cpse r24,__zero_reg__
 487 024c 00C0      		rjmp .L26
 488 024e 8881      		ld r24,Y
 489 0250 9981      		ldd r25,Y+1
 490 0252 8634      		cpi r24,70
 491 0254 9144      		sbci r25,65
 492 0256 01F4      		brne .L26
 493 0258 00C0      		rjmp .L23
 494               	.LVL22:
 495               	.L24:
 496               	.LBE5:
 497               	.LBE4:
 711:pff.c         **** 	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 498               		.loc 1 711 0
 499 025a 83E0      		ldi r24,lo8(3)
 500 025c 00C0      		rjmp .L21
 501               	.L25:
 713:pff.c         **** 
 502               		.loc 1 713 0
 503 025e 82E0      		ldi r24,lo8(2)
 504 0260 00C0      		rjmp .L21
 505               	.LVL23:
 506               	.L26:
 507               	.LBB7:
 508               	.LBB6:
 718:pff.c         **** 		return 0;
 719:pff.c         **** 	return 1;
 509               		.loc 1 719 0
 510 0262 81E0      		ldi r24,lo8(1)
 511               	.LVL24:
 512               	.L21:
 513               	/* epilogue start */
 514               	.LBE6:
 515               	.LBE7:
 720:pff.c         **** }
 516               		.loc 1 720 0
 517 0264 DF91      		pop r29
 518 0266 CF91      		pop r28
 519               	.LVL25:
 520 0268 1F91      		pop r17
 521 026a 0F91      		pop r16
 522 026c FF90      		pop r15
 523 026e EF90      		pop r14
 524 0270 DF90      		pop r13
 525 0272 CF90      		pop r12
 526               	.LVL26:
 527 0274 0895      		ret
 528               		.cfi_endproc
 529               	.LFE9:
 531               	.global	pf_mount
 533               	pf_mount:
 534               	.LFB10:
 721:pff.c         **** 
 722:pff.c         **** 
 723:pff.c         **** 
 724:pff.c         **** 
 725:pff.c         **** /*--------------------------------------------------------------------------
 726:pff.c         **** 
 727:pff.c         ****    Public Functions
 728:pff.c         **** 
 729:pff.c         **** --------------------------------------------------------------------------*/
 730:pff.c         **** 
 731:pff.c         **** 
 732:pff.c         **** 
 733:pff.c         **** /*-----------------------------------------------------------------------*/
 734:pff.c         **** /* Mount/Unmount a Locical Drive                                         */
 735:pff.c         **** /*-----------------------------------------------------------------------*/
 736:pff.c         **** 
 737:pff.c         **** FRESULT pf_mount (
 738:pff.c         **** 	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
 739:pff.c         **** )
 740:pff.c         **** {
 535               		.loc 1 740 0
 536               		.cfi_startproc
 537               	.LVL27:
 538 0276 2F92      		push r2
 539               	.LCFI24:
 540               		.cfi_def_cfa_offset 4
 541               		.cfi_offset 2, -3
 542 0278 3F92      		push r3
 543               	.LCFI25:
 544               		.cfi_def_cfa_offset 5
 545               		.cfi_offset 3, -4
 546 027a 4F92      		push r4
 547               	.LCFI26:
 548               		.cfi_def_cfa_offset 6
 549               		.cfi_offset 4, -5
 550 027c 5F92      		push r5
 551               	.LCFI27:
 552               		.cfi_def_cfa_offset 7
 553               		.cfi_offset 5, -6
 554 027e 6F92      		push r6
 555               	.LCFI28:
 556               		.cfi_def_cfa_offset 8
 557               		.cfi_offset 6, -7
 558 0280 7F92      		push r7
 559               	.LCFI29:
 560               		.cfi_def_cfa_offset 9
 561               		.cfi_offset 7, -8
 562 0282 8F92      		push r8
 563               	.LCFI30:
 564               		.cfi_def_cfa_offset 10
 565               		.cfi_offset 8, -9
 566 0284 9F92      		push r9
 567               	.LCFI31:
 568               		.cfi_def_cfa_offset 11
 569               		.cfi_offset 9, -10
 570 0286 AF92      		push r10
 571               	.LCFI32:
 572               		.cfi_def_cfa_offset 12
 573               		.cfi_offset 10, -11
 574 0288 BF92      		push r11
 575               	.LCFI33:
 576               		.cfi_def_cfa_offset 13
 577               		.cfi_offset 11, -12
 578 028a CF92      		push r12
 579               	.LCFI34:
 580               		.cfi_def_cfa_offset 14
 581               		.cfi_offset 12, -13
 582 028c DF92      		push r13
 583               	.LCFI35:
 584               		.cfi_def_cfa_offset 15
 585               		.cfi_offset 13, -14
 586 028e EF92      		push r14
 587               	.LCFI36:
 588               		.cfi_def_cfa_offset 16
 589               		.cfi_offset 14, -15
 590 0290 FF92      		push r15
 591               	.LCFI37:
 592               		.cfi_def_cfa_offset 17
 593               		.cfi_offset 15, -16
 594 0292 0F93      		push r16
 595               	.LCFI38:
 596               		.cfi_def_cfa_offset 18
 597               		.cfi_offset 16, -17
 598 0294 1F93      		push r17
 599               	.LCFI39:
 600               		.cfi_def_cfa_offset 19
 601               		.cfi_offset 17, -18
 602 0296 CF93      		push r28
 603               	.LCFI40:
 604               		.cfi_def_cfa_offset 20
 605               		.cfi_offset 28, -19
 606 0298 DF93      		push r29
 607               	.LCFI41:
 608               		.cfi_def_cfa_offset 21
 609               		.cfi_offset 29, -20
 610 029a CDB7      		in r28,__SP_L__
 611 029c DEB7      		in r29,__SP_H__
 612               	.LCFI42:
 613               		.cfi_def_cfa_register 28
 614 029e A497      		sbiw r28,36
 615               	.LCFI43:
 616               		.cfi_def_cfa_offset 57
 617 02a0 0FB6      		in __tmp_reg__,__SREG__
 618 02a2 F894      		cli
 619 02a4 DEBF      		out __SP_H__,r29
 620 02a6 0FBE      		out __SREG__,__tmp_reg__
 621 02a8 CDBF      		out __SP_L__,r28
 622               	/* prologue: function */
 623               	/* frame size = 36 */
 624               	/* stack size = 54 */
 625               	.L__stack_usage = 54
 741:pff.c         **** 	BYTE fmt, buf[36];
 742:pff.c         **** 	DWORD bsect, fsize, tsect, mclst;
 743:pff.c         **** 
 744:pff.c         **** 
 745:pff.c         **** 	FatFs = 0;
 626               		.loc 1 745 0
 627 02aa 1092 0000 		sts FatFs+1,__zero_reg__
 628 02ae 1092 0000 		sts FatFs,__zero_reg__
 746:pff.c         **** 	if (!fs) return FR_OK;				/* Unregister fs object */
 629               		.loc 1 746 0
 630 02b2 0097      		sbiw r24,0
 631 02b4 01F4      		brne .+2
 632 02b6 00C0      		rjmp .L42
 633 02b8 1C01      		movw r2,r24
 747:pff.c         **** 
 748:pff.c         **** 	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
 634               		.loc 1 748 0
 635 02ba 0E94 0000 		call disk_initialize
 636               	.LVL28:
 637 02be 80FD      		sbrc r24,0
 638 02c0 00C0      		rjmp .L43
 639               	.LVL29:
 749:pff.c         **** 		return FR_NOT_READY;
 750:pff.c         **** 
 751:pff.c         **** 	/* Search FAT partition on the drive */
 752:pff.c         **** 	bsect = 0;
 753:pff.c         **** 	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 640               		.loc 1 753 0
 641 02c2 40E0      		ldi r20,0
 642 02c4 50E0      		ldi r21,0
 643 02c6 BA01      		movw r22,r20
 644 02c8 CE01      		movw r24,r28
 645 02ca 0196      		adiw r24,1
 646 02cc 0E94 0000 		call check_fs
 647               	.LVL30:
 754:pff.c         **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
 648               		.loc 1 754 0
 649 02d0 8130      		cpi r24,lo8(1)
 650 02d2 01F4      		brne .L44
 755:pff.c         **** 		/* Check a partition listed in top of the partition table */
 756:pff.c         **** 		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
 651               		.loc 1 756 0
 652 02d4 00E1      		ldi r16,lo8(16)
 653 02d6 10E0      		ldi r17,0
 654 02d8 2EEB      		ldi r18,lo8(-66)
 655 02da 31E0      		ldi r19,lo8(1)
 656 02dc 40E0      		ldi r20,0
 657 02de 50E0      		ldi r21,0
 658 02e0 BA01      		movw r22,r20
 659 02e2 CE01      		movw r24,r28
 660               	.LVL31:
 661 02e4 0196      		adiw r24,1
 662 02e6 0E94 0000 		call disk_readp
 663               	.LVL32:
 664 02ea 8823      		tst r24
 665 02ec 01F0      		breq .L33
 666               	.LVL33:
 667               	.L35:
 757:pff.c         **** 			fmt = 3;
 758:pff.c         **** 		} else {
 759:pff.c         **** 			if (buf[4]) {					/* Is the partition existing? */
 760:pff.c         **** 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 761:pff.c         **** 				fmt = check_fs(buf, bsect);	/* Check the partition */
 762:pff.c         **** 			}
 763:pff.c         **** 		}
 764:pff.c         **** 	}
 765:pff.c         **** 	if (fmt == 3) return FR_DISK_ERR;
 668               		.loc 1 765 0
 669 02ee 81E0      		ldi r24,lo8(1)
 670 02f0 00C0      		rjmp .L31
 671               	.LVL34:
 672               	.L33:
 759:pff.c         **** 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 673               		.loc 1 759 0
 674 02f2 8D81      		ldd r24,Y+5
 675 02f4 8111      		cpse r24,__zero_reg__
 676 02f6 00C0      		rjmp .L34
 677               	.LVL35:
 678               	.L36:
 766:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 679               		.loc 1 766 0
 680 02f8 87E0      		ldi r24,lo8(7)
 681 02fa 00C0      		rjmp .L31
 682               	.LVL36:
 683               	.L34:
 760:pff.c         **** 				fmt = check_fs(buf, bsect);	/* Check the partition */
 684               		.loc 1 760 0
 685 02fc 4984      		ldd r4,Y+9
 686 02fe 5A84      		ldd r5,Y+10
 687 0300 6B84      		ldd r6,Y+11
 688 0302 7C84      		ldd r7,Y+12
 689               	.LVL37:
 761:pff.c         **** 			}
 690               		.loc 1 761 0
 691 0304 B301      		movw r22,r6
 692 0306 A201      		movw r20,r4
 693 0308 CE01      		movw r24,r28
 694 030a 0196      		adiw r24,1
 695 030c 0E94 0000 		call check_fs
 696               	.LVL38:
 697 0310 00C0      		rjmp .L32
 698               	.LVL39:
 699               	.L44:
 752:pff.c         **** 	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 700               		.loc 1 752 0
 701 0312 412C      		mov r4,__zero_reg__
 702 0314 512C      		mov r5,__zero_reg__
 703 0316 3201      		movw r6,r4
 704               	.LVL40:
 705               	.L32:
 765:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 706               		.loc 1 765 0
 707 0318 8330      		cpi r24,lo8(3)
 708 031a 01F0      		breq .L35
 709               		.loc 1 766 0
 710 031c 8111      		cpse r24,__zero_reg__
 711 031e 00C0      		rjmp .L36
 767:pff.c         **** 
 768:pff.c         **** 	/* Initialize the file system object */
 769:pff.c         **** 	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
 712               		.loc 1 769 0
 713 0320 04E2      		ldi r16,lo8(36)
 714 0322 10E0      		ldi r17,0
 715 0324 2DE0      		ldi r18,lo8(13)
 716 0326 30E0      		ldi r19,0
 717 0328 B301      		movw r22,r6
 718 032a A201      		movw r20,r4
 719 032c CE01      		movw r24,r28
 720               	.LVL41:
 721 032e 0196      		adiw r24,1
 722 0330 0E94 0000 		call disk_readp
 723               	.LVL42:
 724 0334 8111      		cpse r24,__zero_reg__
 725 0336 00C0      		rjmp .L35
 770:pff.c         **** 
 771:pff.c         **** 	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
 726               		.loc 1 771 0
 727 0338 2A85      		ldd r18,Y+10
 728 033a 3B85      		ldd r19,Y+11
 729 033c 40E0      		ldi r20,0
 730 033e 50E0      		ldi r21,0
 731               	.LVL43:
 772:pff.c         **** 	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 732               		.loc 1 772 0
 733 0340 2115      		cp r18,__zero_reg__
 734 0342 3105      		cpc r19,__zero_reg__
 735 0344 4105      		cpc r20,__zero_reg__
 736 0346 5105      		cpc r21,__zero_reg__
 737 0348 01F4      		brne .L37
 738               		.loc 1 772 0 is_stmt 0 discriminator 1
 739 034a 288D      		ldd r18,Y+24
 740 034c 398D      		ldd r19,Y+25
 741 034e 4A8D      		ldd r20,Y+26
 742 0350 5B8D      		ldd r21,Y+27
 743               	.LVL44:
 744               	.L37:
 773:pff.c         **** 
 774:pff.c         **** 	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
 745               		.loc 1 774 0 is_stmt 1
 746 0352 AC81      		ldd r26,Y+4
 747 0354 B0E0      		ldi r27,0
 748 0356 0E94 0000 		call __muluhisi3
 749 035a 6B01      		movw r12,r22
 750 035c 7C01      		movw r14,r24
 751               	.LVL45:
 775:pff.c         **** 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 752               		.loc 1 775 0
 753 035e 0A81      		ldd r16,Y+2
 754 0360 1B81      		ldd r17,Y+3
 755 0362 20E0      		ldi r18,0
 756 0364 30E0      		ldi r19,0
 757 0366 400E      		add r4,r16
 758 0368 511E      		adc r5,r17
 759 036a 621E      		adc r6,r18
 760 036c 731E      		adc r7,r19
 761               	.LVL46:
 762 036e F101      		movw r30,r2
 763 0370 4286      		std Z+10,r4
 764 0372 5386      		std Z+11,r5
 765 0374 6486      		std Z+12,r6
 766 0376 7586      		std Z+13,r7
 776:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 767               		.loc 1 776 0
 768 0378 4981      		ldd r20,Y+1
 769 037a 4283      		std Z+2,r20
 777:pff.c         **** 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 770               		.loc 1 777 0
 771 037c 8D80      		ldd r8,Y+5
 772 037e 9E80      		ldd r9,Y+6
 773 0380 9582      		std Z+5,r9
 774 0382 8482      		std Z+4,r8
 778:pff.c         **** 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 775               		.loc 1 778 0
 776 0384 8F81      		ldd r24,Y+7
 777 0386 9885      		ldd r25,Y+8
 778 0388 A0E0      		ldi r26,0
 779 038a B0E0      		ldi r27,0
 780               	.LVL47:
 779:pff.c         **** 	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 781               		.loc 1 779 0
 782 038c 0097      		sbiw r24,0
 783 038e A105      		cpc r26,__zero_reg__
 784 0390 B105      		cpc r27,__zero_reg__
 785 0392 01F4      		brne .L38
 786               		.loc 1 779 0 is_stmt 0 discriminator 1
 787 0394 8C89      		ldd r24,Y+20
 788 0396 9D89      		ldd r25,Y+21
 789 0398 AE89      		ldd r26,Y+22
 790 039a BF89      		ldd r27,Y+23
 791               	.LVL48:
 792               	.L38:
 780:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 781:pff.c         **** 		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
 793               		.loc 1 781 0 is_stmt 1
 794 039c 54E0      		ldi r21,4
 795               		1:
 796 039e 9694      		lsr r9
 797 03a0 8794      		ror r8
 798 03a2 5A95      		dec r21
 799 03a4 01F4      		brne 1b
 800 03a6 A12C      		mov r10,__zero_reg__
 801 03a8 B12C      		mov r11,__zero_reg__
 802 03aa 801B      		sub r24,r16
 803 03ac 910B      		sbc r25,r17
 804 03ae A20B      		sbc r26,r18
 805 03b0 B30B      		sbc r27,r19
 806               	.LVL49:
 807 03b2 8C19      		sub r24,r12
 808 03b4 9D09      		sbc r25,r13
 809 03b6 AE09      		sbc r26,r14
 810 03b8 BF09      		sbc r27,r15
 811 03ba BC01      		movw r22,r24
 812 03bc CD01      		movw r24,r26
 813 03be 6819      		sub r22,r8
 814 03c0 7909      		sbc r23,r9
 815 03c2 8A09      		sbc r24,r10
 816 03c4 9B09      		sbc r25,r11
 782:pff.c         **** 		) / fs->csize + 2;
 817               		.loc 1 782 0
 818 03c6 242F      		mov r18,r20
 819 03c8 30E0      		ldi r19,0
 820 03ca 40E0      		ldi r20,0
 821 03cc 50E0      		ldi r21,0
 822 03ce 0E94 0000 		call __udivmodsi4
 780:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 823               		.loc 1 780 0
 824 03d2 DA01      		movw r26,r20
 825 03d4 C901      		movw r24,r18
 826 03d6 0296      		adiw r24,2
 827 03d8 A11D      		adc r26,__zero_reg__
 828 03da B11D      		adc r27,__zero_reg__
 829               	.LVL50:
 783:pff.c         **** 	fs->n_fatent = (CLUST)mclst;
 830               		.loc 1 783 0
 831 03dc F101      		movw r30,r2
 832 03de 8683      		std Z+6,r24
 833 03e0 9783      		std Z+7,r25
 834 03e2 A087      		std Z+8,r26
 835 03e4 B187      		std Z+9,r27
 836               	.LVL51:
 784:pff.c         **** 
 785:pff.c         **** 	fmt = FS_FAT16;							/* Determine the FAT sub type */
 786:pff.c         **** 	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 837               		.loc 1 786 0
 838 03e6 873F      		cpi r24,-9
 839 03e8 FFE0      		ldi r31,15
 840 03ea 9F07      		cpc r25,r31
 841 03ec A105      		cpc r26,__zero_reg__
 842 03ee B105      		cpc r27,__zero_reg__
 843 03f0 00F4      		brsh .+2
 844 03f2 00C0      		rjmp .L36
 787:pff.c         **** #if _FS_FAT12
 788:pff.c         **** 		fmt = FS_FAT12;
 789:pff.c         **** #else
 790:pff.c         **** 		return FR_NO_FILESYSTEM;
 791:pff.c         **** #endif
 792:pff.c         **** 	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
 845               		.loc 1 792 0
 846 03f4 873F      		cpi r24,-9
 847 03f6 9F4F      		sbci r25,-1
 848 03f8 A105      		cpc r26,__zero_reg__
 849 03fa B105      		cpc r27,__zero_reg__
 850 03fc 00F0      		brlo .L45
 793:pff.c         **** #if _FS_FAT32
 794:pff.c         **** 		fmt = FS_FAT32;
 851               		.loc 1 794 0
 852 03fe 83E0      		ldi r24,lo8(3)
 853               	.LVL52:
 854 0400 00C0      		rjmp .L39
 855               	.LVL53:
 856               	.L45:
 785:pff.c         **** 	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 857               		.loc 1 785 0
 858 0402 82E0      		ldi r24,lo8(2)
 859               	.LVL54:
 860               	.L39:
 795:pff.c         **** #else
 796:pff.c         **** 		return FR_NO_FILESYSTEM;
 797:pff.c         **** #endif
 798:pff.c         **** 
 799:pff.c         **** 	fs->fs_type = fmt;		/* FAT sub-type */
 861               		.loc 1 799 0
 862 0404 F101      		movw r30,r2
 863 0406 8083      		st Z,r24
 800:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 864               		.loc 1 800 0
 865 0408 8330      		cpi r24,lo8(3)
 866 040a 01F4      		brne .L40
 867               	.LVL55:
 801:pff.c         **** 		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 868               		.loc 1 801 0
 869 040c 88A1      		ldd r24,Y+32
 870 040e 99A1      		ldd r25,Y+33
 871 0410 AAA1      		ldd r26,Y+34
 872 0412 BBA1      		ldd r27,Y+35
 873 0414 00C0      		rjmp .L49
 874               	.LVL56:
 875               	.L40:
 802:pff.c         **** 	else
 803:pff.c         **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 876               		.loc 1 803 0
 877 0416 D701      		movw r26,r14
 878 0418 C601      		movw r24,r12
 879 041a 840D      		add r24,r4
 880 041c 951D      		adc r25,r5
 881 041e A61D      		adc r26,r6
 882 0420 B71D      		adc r27,r7
 883 0422 F101      		movw r30,r2
 884               	.L49:
 885 0424 8687      		std Z+14,r24
 886 0426 9787      		std Z+15,r25
 887 0428 A08B      		std Z+16,r26
 888 042a B18B      		std Z+17,r27
 889 042c 840C      		add r8,r4
 890 042e 951C      		adc r9,r5
 891 0430 A61C      		adc r10,r6
 892 0432 B71C      		adc r11,r7
 804:pff.c         **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 893               		.loc 1 804 0
 894 0434 8C0C      		add r8,r12
 895 0436 9D1C      		adc r9,r13
 896 0438 AE1C      		adc r10,r14
 897 043a BF1C      		adc r11,r15
 898 043c F101      		movw r30,r2
 899 043e 828A      		std Z+18,r8
 900 0440 938A      		std Z+19,r9
 901 0442 A48A      		std Z+20,r10
 902 0444 B58A      		std Z+21,r11
 805:pff.c         **** 
 806:pff.c         **** 	fs->flag = 0;
 903               		.loc 1 806 0
 904 0446 1182      		std Z+1,__zero_reg__
 807:pff.c         **** 	FatFs = fs;
 905               		.loc 1 807 0
 906 0448 3092 0000 		sts FatFs+1,r3
 907 044c 2092 0000 		sts FatFs,r2
 908               	.LVL57:
 909               	.L42:
 746:pff.c         **** 
 910               		.loc 1 746 0
 911 0450 80E0      		ldi r24,0
 912 0452 00C0      		rjmp .L31
 913               	.LVL58:
 914               	.L43:
 749:pff.c         **** 
 915               		.loc 1 749 0
 916 0454 82E0      		ldi r24,lo8(2)
 917               	.LVL59:
 918               	.L31:
 919               	/* epilogue start */
 808:pff.c         **** 
 809:pff.c         **** 	return FR_OK;
 810:pff.c         **** }
 920               		.loc 1 810 0
 921 0456 A496      		adiw r28,36
 922 0458 0FB6      		in __tmp_reg__,__SREG__
 923 045a F894      		cli
 924 045c DEBF      		out __SP_H__,r29
 925 045e 0FBE      		out __SREG__,__tmp_reg__
 926 0460 CDBF      		out __SP_L__,r28
 927 0462 DF91      		pop r29
 928 0464 CF91      		pop r28
 929 0466 1F91      		pop r17
 930 0468 0F91      		pop r16
 931 046a FF90      		pop r15
 932 046c EF90      		pop r14
 933 046e DF90      		pop r13
 934 0470 CF90      		pop r12
 935 0472 BF90      		pop r11
 936 0474 AF90      		pop r10
 937 0476 9F90      		pop r9
 938 0478 8F90      		pop r8
 939 047a 7F90      		pop r7
 940 047c 6F90      		pop r6
 941 047e 5F90      		pop r5
 942 0480 4F90      		pop r4
 943 0482 3F90      		pop r3
 944 0484 2F90      		pop r2
 945 0486 0895      		ret
 946               		.cfi_endproc
 947               	.LFE10:
 949               	.global	pf_open
 951               	pf_open:
 952               	.LFB11:
 811:pff.c         **** 
 812:pff.c         **** 
 813:pff.c         **** 
 814:pff.c         **** 
 815:pff.c         **** /*-----------------------------------------------------------------------*/
 816:pff.c         **** /* Open or Create a File                                                 */
 817:pff.c         **** /*-----------------------------------------------------------------------*/
 818:pff.c         **** 
 819:pff.c         **** FRESULT pf_open (
 820:pff.c         **** 	const char *path,	/* Pointer to the file name */
 821:pff.c         **** 	DWORD* remain
 822:pff.c         **** )
 823:pff.c         **** {
 953               		.loc 1 823 0
 954               		.cfi_startproc
 955               	.LVL60:
 956 0488 4F92      		push r4
 957               	.LCFI44:
 958               		.cfi_def_cfa_offset 4
 959               		.cfi_offset 4, -3
 960 048a 5F92      		push r5
 961               	.LCFI45:
 962               		.cfi_def_cfa_offset 5
 963               		.cfi_offset 5, -4
 964 048c 7F92      		push r7
 965               	.LCFI46:
 966               		.cfi_def_cfa_offset 6
 967               		.cfi_offset 7, -5
 968 048e 8F92      		push r8
 969               	.LCFI47:
 970               		.cfi_def_cfa_offset 7
 971               		.cfi_offset 8, -6
 972 0490 9F92      		push r9
 973               	.LCFI48:
 974               		.cfi_def_cfa_offset 8
 975               		.cfi_offset 9, -7
 976 0492 AF92      		push r10
 977               	.LCFI49:
 978               		.cfi_def_cfa_offset 9
 979               		.cfi_offset 10, -8
 980 0494 BF92      		push r11
 981               	.LCFI50:
 982               		.cfi_def_cfa_offset 10
 983               		.cfi_offset 11, -9
 984 0496 CF92      		push r12
 985               	.LCFI51:
 986               		.cfi_def_cfa_offset 11
 987               		.cfi_offset 12, -10
 988 0498 DF92      		push r13
 989               	.LCFI52:
 990               		.cfi_def_cfa_offset 12
 991               		.cfi_offset 13, -11
 992 049a EF92      		push r14
 993               	.LCFI53:
 994               		.cfi_def_cfa_offset 13
 995               		.cfi_offset 14, -12
 996 049c FF92      		push r15
 997               	.LCFI54:
 998               		.cfi_def_cfa_offset 14
 999               		.cfi_offset 15, -13
 1000 049e 0F93      		push r16
 1001               	.LCFI55:
 1002               		.cfi_def_cfa_offset 15
 1003               		.cfi_offset 16, -14
 1004 04a0 1F93      		push r17
 1005               	.LCFI56:
 1006               		.cfi_def_cfa_offset 16
 1007               		.cfi_offset 17, -15
 1008 04a2 CF93      		push r28
 1009               	.LCFI57:
 1010               		.cfi_def_cfa_offset 17
 1011               		.cfi_offset 28, -16
 1012 04a4 DF93      		push r29
 1013               	.LCFI58:
 1014               		.cfi_def_cfa_offset 18
 1015               		.cfi_offset 29, -17
 1016 04a6 CDB7      		in r28,__SP_L__
 1017 04a8 DEB7      		in r29,__SP_H__
 1018               	.LCFI59:
 1019               		.cfi_def_cfa_register 28
 1020 04aa EC97      		sbiw r28,60
 1021               	.LCFI60:
 1022               		.cfi_def_cfa_offset 78
 1023 04ac 0FB6      		in __tmp_reg__,__SREG__
 1024 04ae F894      		cli
 1025 04b0 DEBF      		out __SP_H__,r29
 1026 04b2 0FBE      		out __SREG__,__tmp_reg__
 1027 04b4 CDBF      		out __SP_L__,r28
 1028               	/* prologue: function */
 1029               	/* frame size = 60 */
 1030               	/* stack size = 75 */
 1031               	.L__stack_usage = 75
 824:pff.c         **** 	FRESULT res;
 825:pff.c         **** 	DIR dj;
 826:pff.c         **** 	BYTE sp[12], dir[32];
 827:pff.c         **** 	FATFS *fs = FatFs;
 1032               		.loc 1 827 0
 1033 04b6 C090 0000 		lds r12,FatFs
 1034 04ba D090 0000 		lds r13,FatFs+1
 1035               	.LVL61:
 828:pff.c         **** 
 829:pff.c         **** 
 830:pff.c         **** 	if (!fs)						/* Check file system */
 1036               		.loc 1 830 0
 1037 04be C114      		cp r12,__zero_reg__
 1038 04c0 D104      		cpc r13,__zero_reg__
 1039 04c2 01F4      		brne .+2
 1040 04c4 00C0      		rjmp .L78
 831:pff.c         **** 		return FR_NOT_ENABLED;
 832:pff.c         **** 
 833:pff.c         **** 	fs->flag = 0;
 1041               		.loc 1 833 0
 1042 04c6 D601      		movw r26,r12
 1043 04c8 1196      		adiw r26,1
 1044 04ca 1C92      		st X,__zero_reg__
 834:pff.c         **** 	dj.fn = sp;
 1045               		.loc 1 834 0
 1046 04cc 9E01      		movw r18,r28
 1047 04ce 2F5C      		subi r18,-49
 1048 04d0 3F4F      		sbci r19,-1
 1049 04d2 3CA3      		std Y+36,r19
 1050 04d4 2BA3      		std Y+35,r18
 1051               	.LVL62:
 1052 04d6 FC01      		movw r30,r24
 1053               	.LVL63:
 1054               	.L52:
 1055 04d8 2E2F      		mov r18,r30
 1056 04da 9F2F      		mov r25,r31
 1057               	.LVL64:
 1058               	.LBB20:
 1059               	.LBB21:
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1060               		.loc 1 668 0
 1061 04dc 8191      		ld r24,Z+
 1062               	.LVL65:
 1063 04de 8032      		cpi r24,lo8(32)
 1064 04e0 01F0      		breq .L52
 1065 04e2 E22E      		mov r14,r18
 1066 04e4 F92E      		mov r15,r25
 669:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 1067               		.loc 1 669 0
 1068 04e6 8F32      		cpi r24,lo8(47)
 1069 04e8 01F4      		brne .L53
 1070 04ea BFEF      		ldi r27,-1
 1071 04ec EB1A      		sub r14,r27
 1072 04ee FB0A      		sbc r15,r27
 1073               	.LVL66:
 1074               	.L53:
 1075 04f0 5B01      		movw r10,r22
 1076               	.LVL67:
 670:pff.c         **** 
 1077               		.loc 1 670 0
 1078 04f2 1DA2      		std Y+37,__zero_reg__
 1079 04f4 1EA2      		std Y+38,__zero_reg__
 1080 04f6 1FA2      		std Y+39,__zero_reg__
 1081 04f8 18A6      		std Y+40,__zero_reg__
 672:pff.c         **** 		res = dir_rewind(dj);
 1082               		.loc 1 672 0
 1083 04fa F701      		movw r30,r14
 1084 04fc 8081      		ld r24,Z
 1085 04fe 8132      		cpi r24,lo8(33)
 1086 0500 00F0      		brlo .L54
 1087               	.LVL68:
 1088               	.LBB22:
 1089               	.LBB23:
 1090               	.LBB24:
 1091               	.LBB25:
 335:pff.c         **** }
 1092               		.loc 1 335 0
 1093 0502 A0E2      		ldi r26,lo8(32)
 1094 0504 7A2E      		mov r7,r26
 1095 0506 4E01      		movw r8,r28
 1096 0508 FCE0      		ldi r31,12
 1097 050a 8F0E      		add r8,r31
 1098 050c 911C      		adc r9,__zero_reg__
 1099 050e 00C0      		rjmp .L55
 1100               	.L54:
 1101               	.LBE25:
 1102               	.LBE24:
 1103               	.LBE23:
 1104               	.LBE22:
 673:pff.c         **** 		dir[0] = 0;
 1105               		.loc 1 673 0
 1106 0510 CE01      		movw r24,r28
 1107 0512 8196      		adiw r24,33
 1108 0514 0E94 0000 		call dir_rewind
 1109               	.LVL69:
 674:pff.c         **** 
 1110               		.loc 1 674 0
 1111 0518 1982      		std Y+1,__zero_reg__
 1112               	.LBE21:
 1113               	.LBE20:
 835:pff.c         **** 	res = follow_path(&dj, dir, path);	/* Follow the file path */
 836:pff.c         **** 	if (res != FR_OK) return res;		/* Follow failed */
 1114               		.loc 1 836 0
 1115 051a 8823      		tst r24
 1116 051c 01F4      		brne .+2
 1117 051e 00C0      		rjmp .L56
 1118 0520 00C0      		rjmp .L106
 1119               	.LVL70:
 1120               	.L109:
 1121               	.LBB52:
 1122               	.LBB50:
 1123               	.LBB33:
 1124               	.LBB30:
 1125               	.LBB28:
 1126               	.LBB26:
 335:pff.c         **** }
 1127               		.loc 1 335 0
 1128 0522 90E0      		ldi r25,0
 1129 0524 80E0      		ldi r24,0
 1130 0526 28E0      		ldi r18,lo8(8)
 1131               	.LVL71:
 1132               	.L59:
 1133               	.LBE26:
 1134               	.LBE28:
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1135               		.loc 1 582 0
 1136 0528 31E0      		ldi r19,lo8(1)
 1137 052a 380F      		add r19,r24
 1138               	.LVL72:
 1139 052c D701      		movw r26,r14
 1140 052e A80F      		add r26,r24
 1141 0530 B11D      		adc r27,__zero_reg__
 1142 0532 8C91      		ld r24,X
 1143               	.LVL73:
 583:pff.c         **** 		if (c == '.' || i >= ni) {
 1144               		.loc 1 583 0
 1145 0534 8132      		cpi r24,lo8(33)
 1146 0536 00F0      		brlo .+2
 1147 0538 00C0      		rjmp .L107
 1148               	.L60:
 602:pff.c         **** 
 1149               		.loc 1 602 0
 1150 053a E30E      		add r14,r19
 1151 053c F11C      		adc r15,__zero_reg__
 1152               	.LVL74:
 604:pff.c         **** 
 1153               		.loc 1 604 0
 1154 053e 91E0      		ldi r25,lo8(1)
 1155               	.LVL75:
 1156 0540 8132      		cpi r24,lo8(33)
 1157 0542 00F0      		brlo .L64
 1158 0544 90E0      		ldi r25,0
 1159               	.L64:
 1160 0546 9387      		std Z+11,r25
 1161               	.LBE30:
 1162               	.LBE33:
 1163               	.LBB34:
 1164               	.LBB35:
 503:pff.c         **** 	if (res != FR_OK) return res;
 1165               		.loc 1 503 0
 1166 0548 CE01      		movw r24,r28
 1167               	.LVL76:
 1168 054a 8196      		adiw r24,33
 1169 054c 0E94 0000 		call dir_rewind
 1170               	.LVL77:
 504:pff.c         **** 
 1171               		.loc 1 504 0
 1172 0550 8111      		cpse r24,__zero_reg__
 1173 0552 00C0      		rjmp .L65
 1174               	.LVL78:
 1175               	.L77:
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1176               		.loc 1 507 0
 1177 0554 29A1      		ldd r18,Y+33
 1178 0556 3AA1      		ldd r19,Y+34
 1179 0558 2F70      		andi r18,15
 1180 055a 3327      		clr r19
 1181 055c F5E0      		ldi r31,5
 1182               		1:
 1183 055e 220F      		lsl r18
 1184 0560 331F      		rol r19
 1185 0562 FA95      		dec r31
 1186 0564 01F4      		brne 1b
 1187 0566 4DA5      		ldd r20,Y+45
 1188 0568 5EA5      		ldd r21,Y+46
 1189 056a 6FA5      		ldd r22,Y+47
 1190 056c 78A9      		ldd r23,Y+48
 1191 056e 00E2      		ldi r16,lo8(32)
 1192 0570 10E0      		ldi r17,0
 1193 0572 CE01      		movw r24,r28
 1194 0574 0196      		adiw r24,1
 1195 0576 0E94 0000 		call disk_readp
 1196               	.LVL79:
 509:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 1197               		.loc 1 509 0
 1198 057a 8111      		cpse r24,__zero_reg__
 1199 057c 00C0      		rjmp .L81
 1200               	.LVL80:
 511:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 1201               		.loc 1 511 0
 1202 057e 8981      		ldd r24,Y+1
 1203               	.LVL81:
 1204 0580 8823      		tst r24
 1205 0582 01F4      		brne .+2
 1206 0584 00C0      		rjmp .L67
 512:pff.c         **** 			break;
 1207               		.loc 1 512 0
 1208 0586 4C85      		ldd r20,Y+12
 1209 0588 43FD      		sbrc r20,3
 1210 058a 00C0      		rjmp .L68
 1211 058c 6BA1      		ldd r22,Y+35
 1212 058e 7CA1      		ldd r23,Y+36
 1213               	.LVL82:
 1214 0590 FE01      		movw r30,r28
 1215 0592 3196      		adiw r30,1
 1216 0594 9B01      		movw r18,r22
 1217               	.LVL83:
 1218               	.L70:
 1219               	.LBB36:
 1220               	.LBB37:
 343:pff.c         **** 	return r;
 1221               		.loc 1 343 0
 1222 0596 E815      		cp r30,r8
 1223 0598 F905      		cpc r31,r9
 1224 059a 01F4      		brne .L108
 1225               	.LBE37:
 1226               	.LBE36:
 1227               	.LBE35:
 1228               	.LBE34:
 686:pff.c         **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 1229               		.loc 1 686 0
 1230 059c DB01      		movw r26,r22
 1231 059e 1B96      		adiw r26,11
 1232 05a0 8C91      		ld r24,X
 1233 05a2 8111      		cpse r24,__zero_reg__
 1234 05a4 00C0      		rjmp .L56
 687:pff.c         **** 				res = FR_NO_PATH; break;
 1235               		.loc 1 687 0
 1236 05a6 44FF      		sbrs r20,4
 1237 05a8 00C0      		rjmp .L84
 690:pff.c         **** 		}
 1238               		.loc 1 690 0
 1239 05aa 8D89      		ldd r24,Y+21
 1240 05ac 9E89      		ldd r25,Y+22
 1241 05ae A0E0      		ldi r26,0
 1242 05b0 B0E0      		ldi r27,0
 1243 05b2 DC01      		movw r26,r24
 1244 05b4 9927      		clr r25
 1245 05b6 8827      		clr r24
 1246 05b8 4B8D      		ldd r20,Y+27
 1247 05ba 5C8D      		ldd r21,Y+28
 1248 05bc 60E0      		ldi r22,0
 1249 05be 70E0      		ldi r23,0
 1250               	.LVL84:
 1251 05c0 842B      		or r24,r20
 1252 05c2 952B      		or r25,r21
 1253 05c4 A62B      		or r26,r22
 1254 05c6 B72B      		or r27,r23
 1255 05c8 8DA3      		std Y+37,r24
 1256 05ca 9EA3      		std Y+38,r25
 1257 05cc AFA3      		std Y+39,r26
 1258 05ce B8A7      		std Y+40,r27
 1259               	.LVL85:
 1260               	.L55:
 1261 05d0 EBA1      		ldd r30,Y+35
 1262 05d2 FCA1      		ldd r31,Y+36
 1263               	.LVL86:
 1264 05d4 DF01      		movw r26,r30
 1265 05d6 CF01      		movw r24,r30
 1266 05d8 0B96      		adiw r24,11
 1267               	.LVL87:
 1268               	.L57:
 1269               	.LBB46:
 1270               	.LBB31:
 1271               	.LBB29:
 1272               	.LBB27:
 335:pff.c         **** }
 1273               		.loc 1 335 0
 1274 05da A817      		cp r26,r24
 1275 05dc B907      		cpc r27,r25
 1276 05de 01F4      		brne .+2
 1277 05e0 00C0      		rjmp .L109
 1278               	.LVL88:
 1279 05e2 7D92      		st X+,r7
 1280               	.LVL89:
 1281 05e4 00C0      		rjmp .L57
 1282               	.LVL90:
 1283               	.L107:
 1284               	.LBE27:
 1285               	.LBE29:
 583:pff.c         **** 		if (c == '.' || i >= ni) {
 1286               		.loc 1 583 0
 1287 05e6 8F32      		cpi r24,lo8(47)
 1288 05e8 01F4      		brne .+2
 1289 05ea 00C0      		rjmp .L60
 584:pff.c         **** 			if (ni != 8 || c != '.') break;
 1290               		.loc 1 584 0
 1291 05ec 8E32      		cpi r24,lo8(46)
 1292 05ee 01F4      		brne .+2
 1293 05f0 00C0      		rjmp .L61
 1294 05f2 9217      		cp r25,r18
 1295 05f4 00F0      		brlo .+2
 1296 05f6 00C0      		rjmp .L60
 598:pff.c         **** 			sfn[i++] = c;
 1297               		.loc 1 598 0
 1298 05f8 4FE9      		ldi r20,lo8(-97)
 1299 05fa 480F      		add r20,r24
 1300 05fc 4A31      		cpi r20,lo8(26)
 1301 05fe 00F4      		brsh .L62
 1302 0600 8052      		subi r24,lo8(-(-32))
 1303               	.LVL91:
 1304               	.L62:
 599:pff.c         **** 		}
 1305               		.loc 1 599 0
 1306 0602 DF01      		movw r26,r30
 1307 0604 A90F      		add r26,r25
 1308 0606 B11D      		adc r27,__zero_reg__
 1309 0608 8C93      		st X,r24
 1310 060a 9F5F      		subi r25,lo8(-(1))
 1311               	.LVL92:
 1312               	.L63:
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1313               		.loc 1 582 0
 1314 060c 832F      		mov r24,r19
 1315               	.LVL93:
 1316 060e 00C0      		rjmp .L59
 1317               	.LVL94:
 1318               	.L108:
 1319               	.LBE31:
 1320               	.LBE46:
 1321               	.LBB47:
 1322               	.LBB44:
 1323               	.LBB39:
 1324               	.LBB38:
 343:pff.c         **** 	return r;
 1325               		.loc 1 343 0
 1326 0610 8191      		ld r24,Z+
 1327               	.LVL95:
 1328 0612 D901      		movw r26,r18
 1329 0614 5D91      		ld r21,X+
 1330 0616 9D01      		movw r18,r26
 1331 0618 90E0      		ldi r25,0
 1332 061a 851B      		sub r24,r21
 1333 061c 9109      		sbc r25,__zero_reg__
 1334               	.LVL96:
 1335 061e 01F4      		brne .+2
 1336 0620 00C0      		rjmp .L70
 1337               	.LVL97:
 1338               	.L68:
 1339               	.LBE38:
 1340               	.LBE39:
 1341               	.LBB40:
 1342               	.LBB41:
 455:pff.c         **** 
 1343               		.loc 1 455 0
 1344 0622 0091 0000 		lds r16,FatFs
 1345 0626 1091 0000 		lds r17,FatFs+1
 1346               	.LVL98:
 458:pff.c         **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1347               		.loc 1 458 0
 1348 062a 49A0      		ldd r4,Y+33
 1349 062c 5AA0      		ldd r5,Y+34
 1350 062e BFEF      		ldi r27,-1
 1351 0630 4B1A      		sub r4,r27
 1352 0632 5B0A      		sbc r5,r27
 1353               	.LVL99:
 459:pff.c         **** 		return FR_NO_FILE;
 1354               		.loc 1 459 0
 1355 0634 01F4      		brne .+2
 1356 0636 00C0      		rjmp .L71
 1357 0638 8DA5      		ldd r24,Y+45
 1358 063a 9EA5      		ldd r25,Y+46
 1359 063c AFA5      		ldd r26,Y+47
 1360 063e B8A9      		ldd r27,Y+48
 1361 0640 0097      		sbiw r24,0
 1362 0642 A105      		cpc r26,__zero_reg__
 1363 0644 B105      		cpc r27,__zero_reg__
 1364 0646 01F4      		brne .+2
 1365 0648 00C0      		rjmp .L71
 462:pff.c         **** 		dj->sect++;			/* Next sector */
 1366               		.loc 1 462 0
 1367 064a 9201      		movw r18,r4
 1368 064c 2F70      		andi r18,15
 1369 064e 3327      		clr r19
 1370 0650 232B      		or r18,r19
 1371 0652 01F0      		breq .+2
 1372 0654 00C0      		rjmp .L73
 463:pff.c         **** 
 1373               		.loc 1 463 0
 1374 0656 0196      		adiw r24,1
 1375 0658 A11D      		adc r26,__zero_reg__
 1376 065a B11D      		adc r27,__zero_reg__
 1377 065c 8DA7      		std Y+45,r24
 1378 065e 9EA7      		std Y+46,r25
 1379 0660 AFA7      		std Y+47,r26
 1380 0662 B8AB      		std Y+48,r27
 465:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 1381               		.loc 1 465 0
 1382 0664 69A5      		ldd r22,Y+41
 1383 0666 7AA5      		ldd r23,Y+42
 1384 0668 8BA5      		ldd r24,Y+43
 1385 066a 9CA5      		ldd r25,Y+44
 1386 066c 6115      		cp r22,__zero_reg__
 1387 066e 7105      		cpc r23,__zero_reg__
 1388 0670 8105      		cpc r24,__zero_reg__
 1389 0672 9105      		cpc r25,__zero_reg__
 1390 0674 01F4      		brne .L74
 466:pff.c         **** 				return FR_NO_FILE;
 1391               		.loc 1 466 0
 1392 0676 F801      		movw r30,r16
 1393 0678 8481      		ldd r24,Z+4
 1394 067a 9581      		ldd r25,Z+5
 1395 067c 4816      		cp r4,r24
 1396 067e 5906      		cpc r5,r25
 1397 0680 00F4      		brsh .L71
 1398 0682 00C0      		rjmp .L73
 1399               	.L74:
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1400               		.loc 1 470 0
 1401 0684 D801      		movw r26,r16
 1402 0686 1296      		adiw r26,2
 1403 0688 2C91      		ld r18,X
 1404 068a 30E0      		ldi r19,0
 1405 068c A901      		movw r20,r18
 1406 068e 4150      		subi r20,1
 1407 0690 5109      		sbc r21,__zero_reg__
 1408 0692 9201      		movw r18,r4
 1409 0694 E4E0      		ldi r30,4
 1410               		1:
 1411 0696 3695      		lsr r19
 1412 0698 2795      		ror r18
 1413 069a EA95      		dec r30
 1414 069c 01F4      		brne 1b
 1415 069e 2423      		and r18,r20
 1416 06a0 3523      		and r19,r21
 1417 06a2 232B      		or r18,r19
 1418 06a4 01F4      		brne .L73
 471:pff.c         **** 				if (clst <= 1) return FR_DISK_ERR;
 1419               		.loc 1 471 0
 1420 06a6 0E94 0000 		call get_fat
 1421               	.LVL100:
 472:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 1422               		.loc 1 472 0
 1423 06aa 6230      		cpi r22,2
 1424 06ac 7105      		cpc r23,__zero_reg__
 1425 06ae 8105      		cpc r24,__zero_reg__
 1426 06b0 9105      		cpc r25,__zero_reg__
 1427 06b2 00F4      		brsh .+2
 1428 06b4 00C0      		rjmp .L82
 473:pff.c         **** 					return FR_NO_FILE;			/* Report EOT */
 1429               		.loc 1 473 0
 1430 06b6 F801      		movw r30,r16
 1431 06b8 0681      		ldd r16,Z+6
 1432 06ba 1781      		ldd r17,Z+7
 1433 06bc 2085      		ldd r18,Z+8
 1434 06be 3185      		ldd r19,Z+9
 1435               	.LVL101:
 1436 06c0 6017      		cp r22,r16
 1437 06c2 7107      		cpc r23,r17
 1438 06c4 8207      		cpc r24,r18
 1439 06c6 9307      		cpc r25,r19
 1440 06c8 00F4      		brsh .L71
 475:pff.c         **** 				dj->sect = clust2sect(clst);
 1441               		.loc 1 475 0
 1442 06ca 69A7      		std Y+41,r22
 1443 06cc 7AA7      		std Y+42,r23
 1444 06ce 8BA7      		std Y+43,r24
 1445 06d0 9CA7      		std Y+44,r25
 476:pff.c         **** 			}
 1446               		.loc 1 476 0
 1447 06d2 0E94 0000 		call clust2sect
 1448               	.LVL102:
 1449 06d6 6DA7      		std Y+45,r22
 1450 06d8 7EA7      		std Y+46,r23
 1451 06da 8FA7      		std Y+47,r24
 1452 06dc 98AB      		std Y+48,r25
 1453               	.L73:
 481:pff.c         **** 
 1454               		.loc 1 481 0
 1455 06de 5AA2      		std Y+34,r5
 1456 06e0 49A2      		std Y+33,r4
 1457 06e2 00C0      		rjmp .L77
 1458               	.L71:
 460:pff.c         **** 
 1459               		.loc 1 460 0
 1460 06e4 83E0      		ldi r24,lo8(3)
 1461               	.LVL103:
 1462               	.L65:
 1463               	.LBE41:
 1464               	.LBE40:
 1465               	.LBE44:
 1466               	.LBE47:
 682:pff.c         **** 					res = FR_NO_PATH;
 1467               		.loc 1 682 0
 1468 06e6 8330      		cpi r24,lo8(3)
 1469 06e8 01F0      		breq .+2
 1470 06ea 00C0      		rjmp .L106
 1471               	.L67:
 1472 06ec EBA1      		ldd r30,Y+35
 1473 06ee FCA1      		ldd r31,Y+36
 1474 06f0 8385      		ldd r24,Z+11
 1475 06f2 8823      		tst r24
 1476 06f4 01F0      		breq .L84
 1477 06f6 00C0      		rjmp .L83
 1478               	.LVL104:
 1479               	.L56:
 1480               	.LBE50:
 1481               	.LBE52:
 837:pff.c         **** 	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 1482               		.loc 1 837 0
 1483 06f8 8981      		ldd r24,Y+1
 1484 06fa 8823      		tst r24
 1485 06fc 01F0      		breq .L83
 1486               		.loc 1 837 0 is_stmt 0 discriminator 1
 1487 06fe 8C85      		ldd r24,Y+12
 1488 0700 84FD      		sbrc r24,4
 1489 0702 00C0      		rjmp .L83
 838:pff.c         **** 		return FR_NO_FILE;
 839:pff.c         **** 
 840:pff.c         **** 	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
 1490               		.loc 1 840 0 is_stmt 1
 1491 0704 8D89      		ldd r24,Y+21
 1492 0706 9E89      		ldd r25,Y+22
 1493 0708 A0E0      		ldi r26,0
 1494 070a B0E0      		ldi r27,0
 1495 070c DC01      		movw r26,r24
 1496 070e 9927      		clr r25
 1497 0710 8827      		clr r24
 1498 0712 4B8D      		ldd r20,Y+27
 1499 0714 5C8D      		ldd r21,Y+28
 1500 0716 60E0      		ldi r22,0
 1501 0718 70E0      		ldi r23,0
 1502 071a 842B      		or r24,r20
 1503 071c 952B      		or r25,r21
 1504 071e A62B      		or r26,r22
 1505 0720 B72B      		or r27,r23
 1506 0722 F601      		movw r30,r12
 1507 0724 868F      		std Z+30,r24
 1508 0726 978F      		std Z+31,r25
 1509 0728 A0A3      		std Z+32,r26
 1510 072a B1A3      		std Z+33,r27
 841:pff.c         **** 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 1511               		.loc 1 841 0
 1512 072c 8D8D      		ldd r24,Y+29
 1513 072e 9E8D      		ldd r25,Y+30
 1514 0730 AF8D      		ldd r26,Y+31
 1515 0732 B8A1      		ldd r27,Y+32
 1516 0734 828F      		std Z+26,r24
 1517 0736 938F      		std Z+27,r25
 1518 0738 A48F      		std Z+28,r26
 1519 073a B58F      		std Z+29,r27
 842:pff.c         **** 	fs->fptr = 0;						/* File pointer */
 1520               		.loc 1 842 0
 1521 073c 168A      		std Z+22,__zero_reg__
 1522 073e 178A      		std Z+23,__zero_reg__
 1523 0740 108E      		std Z+24,__zero_reg__
 1524 0742 118E      		std Z+25,__zero_reg__
 843:pff.c         **** 	fs->flag = FA_OPENED;
 1525               		.loc 1 843 0
 1526 0744 21E0      		ldi r18,lo8(1)
 1527 0746 2183      		std Z+1,r18
 844:pff.c         **** 
 845:pff.c         **** 	*remain = LD_DWORD(dir+DIR_FileSize);
 1528               		.loc 1 845 0
 1529 0748 F501      		movw r30,r10
 1530 074a 8083      		st Z,r24
 1531 074c 9183      		std Z+1,r25
 1532 074e A283      		std Z+2,r26
 1533 0750 B383      		std Z+3,r27
 846:pff.c         **** 
 847:pff.c         **** 	return FR_OK;
 1534               		.loc 1 847 0
 1535 0752 80E0      		ldi r24,0
 1536 0754 00C0      		rjmp .L106
 1537               	.LVL105:
 1538               	.L78:
 831:pff.c         **** 
 1539               		.loc 1 831 0
 1540 0756 86E0      		ldi r24,lo8(6)
 1541               	.LVL106:
 1542 0758 00C0      		rjmp .L106
 1543               	.LVL107:
 1544               	.L82:
 1545               	.LBB53:
 1546               	.LBB51:
 1547               	.LBB48:
 1548               	.LBB45:
 1549               	.LBB43:
 1550               	.LBB42:
 472:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 1551               		.loc 1 472 0
 1552 075a 81E0      		ldi r24,lo8(1)
 1553 075c 00C0      		rjmp .L65
 1554               	.LVL108:
 1555               	.L81:
 1556               	.LBE42:
 1557               	.LBE43:
 509:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 1558               		.loc 1 509 0
 1559 075e 81E0      		ldi r24,lo8(1)
 1560               	.LVL109:
 1561 0760 00C0      		rjmp .L106
 1562               	.LVL110:
 1563               	.L83:
 1564               	.LBE45:
 1565               	.LBE48:
 682:pff.c         **** 					res = FR_NO_PATH;
 1566               		.loc 1 682 0
 1567 0762 83E0      		ldi r24,lo8(3)
 1568 0764 00C0      		rjmp .L106
 1569               	.LVL111:
 1570               	.L84:
 688:pff.c         **** 			}
 1571               		.loc 1 688 0
 1572 0766 84E0      		ldi r24,lo8(4)
 1573               	.LVL112:
 1574 0768 00C0      		rjmp .L106
 1575               	.LVL113:
 1576               	.L61:
 1577               	.LBB49:
 1578               	.LBB32:
 585:pff.c         **** 			i = 8; ni = 11;
 1579               		.loc 1 585 0
 1580 076a 2830      		cpi r18,lo8(8)
 1581 076c 01F0      		breq .+2
 1582 076e 00C0      		rjmp .L60
 586:pff.c         **** 			continue;
 1583               		.loc 1 586 0
 1584 0770 98E0      		ldi r25,lo8(8)
 1585               	.LVL114:
 1586 0772 2BE0      		ldi r18,lo8(11)
 1587               	.LVL115:
 1588 0774 00C0      		rjmp .L63
 1589               	.LVL116:
 1590               	.L106:
 1591               	/* epilogue start */
 1592               	.LBE32:
 1593               	.LBE49:
 1594               	.LBE51:
 1595               	.LBE53:
 848:pff.c         **** }
 1596               		.loc 1 848 0
 1597 0776 EC96      		adiw r28,60
 1598 0778 0FB6      		in __tmp_reg__,__SREG__
 1599 077a F894      		cli
 1600 077c DEBF      		out __SP_H__,r29
 1601 077e 0FBE      		out __SREG__,__tmp_reg__
 1602 0780 CDBF      		out __SP_L__,r28
 1603 0782 DF91      		pop r29
 1604 0784 CF91      		pop r28
 1605 0786 1F91      		pop r17
 1606 0788 0F91      		pop r16
 1607 078a FF90      		pop r15
 1608 078c EF90      		pop r14
 1609 078e DF90      		pop r13
 1610 0790 CF90      		pop r12
 1611               	.LVL117:
 1612 0792 BF90      		pop r11
 1613 0794 AF90      		pop r10
 1614 0796 9F90      		pop r9
 1615 0798 8F90      		pop r8
 1616 079a 7F90      		pop r7
 1617 079c 5F90      		pop r5
 1618 079e 4F90      		pop r4
 1619 07a0 0895      		ret
 1620               		.cfi_endproc
 1621               	.LFE11:
 1623               	.global	pf_read
 1625               	pf_read:
 1626               	.LFB12:
 849:pff.c         **** 
 850:pff.c         **** 
 851:pff.c         **** 
 852:pff.c         **** 
 853:pff.c         **** /*-----------------------------------------------------------------------*/
 854:pff.c         **** /* Read File                                                             */
 855:pff.c         **** /*-----------------------------------------------------------------------*/
 856:pff.c         **** #if _USE_READ
 857:pff.c         **** 
 858:pff.c         **** FRESULT pf_read (
 859:pff.c         **** 	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
 860:pff.c         **** 	WORD btr,		/* Number of bytes to read */
 861:pff.c         **** 	WORD* br,		/* Pointer to number of bytes read */
 862:pff.c         **** 	DWORD* remain
 863:pff.c         **** )
 864:pff.c         **** {
 1627               		.loc 1 864 0
 1628               		.cfi_startproc
 1629               	.LVL118:
 1630 07a2 4F92      		push r4
 1631               	.LCFI61:
 1632               		.cfi_def_cfa_offset 4
 1633               		.cfi_offset 4, -3
 1634 07a4 5F92      		push r5
 1635               	.LCFI62:
 1636               		.cfi_def_cfa_offset 5
 1637               		.cfi_offset 5, -4
 1638 07a6 6F92      		push r6
 1639               	.LCFI63:
 1640               		.cfi_def_cfa_offset 6
 1641               		.cfi_offset 6, -5
 1642 07a8 7F92      		push r7
 1643               	.LCFI64:
 1644               		.cfi_def_cfa_offset 7
 1645               		.cfi_offset 7, -6
 1646 07aa 8F92      		push r8
 1647               	.LCFI65:
 1648               		.cfi_def_cfa_offset 8
 1649               		.cfi_offset 8, -7
 1650 07ac 9F92      		push r9
 1651               	.LCFI66:
 1652               		.cfi_def_cfa_offset 9
 1653               		.cfi_offset 9, -8
 1654 07ae AF92      		push r10
 1655               	.LCFI67:
 1656               		.cfi_def_cfa_offset 10
 1657               		.cfi_offset 10, -9
 1658 07b0 BF92      		push r11
 1659               	.LCFI68:
 1660               		.cfi_def_cfa_offset 11
 1661               		.cfi_offset 11, -10
 1662 07b2 CF92      		push r12
 1663               	.LCFI69:
 1664               		.cfi_def_cfa_offset 12
 1665               		.cfi_offset 12, -11
 1666 07b4 DF92      		push r13
 1667               	.LCFI70:
 1668               		.cfi_def_cfa_offset 13
 1669               		.cfi_offset 13, -12
 1670 07b6 EF92      		push r14
 1671               	.LCFI71:
 1672               		.cfi_def_cfa_offset 14
 1673               		.cfi_offset 14, -13
 1674 07b8 FF92      		push r15
 1675               	.LCFI72:
 1676               		.cfi_def_cfa_offset 15
 1677               		.cfi_offset 15, -14
 1678 07ba 0F93      		push r16
 1679               	.LCFI73:
 1680               		.cfi_def_cfa_offset 16
 1681               		.cfi_offset 16, -15
 1682 07bc 1F93      		push r17
 1683               	.LCFI74:
 1684               		.cfi_def_cfa_offset 17
 1685               		.cfi_offset 17, -16
 1686 07be CF93      		push r28
 1687               	.LCFI75:
 1688               		.cfi_def_cfa_offset 18
 1689               		.cfi_offset 28, -17
 1690 07c0 DF93      		push r29
 1691               	.LCFI76:
 1692               		.cfi_def_cfa_offset 19
 1693               		.cfi_offset 29, -18
 1694               	/* prologue: function */
 1695               	/* frame size = 0 */
 1696               	/* stack size = 16 */
 1697               	.L__stack_usage = 16
 1698 07c2 4C01      		movw r8,r24
 1699 07c4 6B01      		movw r12,r22
 1700 07c6 5A01      		movw r10,r20
 1701               	.LVL119:
 865:pff.c         **** 	DRESULT dr;
 866:pff.c         **** 	CLUST clst;
 867:pff.c         **** 	DWORD sect; //remain;
 868:pff.c         **** 	WORD rcnt;
 869:pff.c         **** 	BYTE cs, *rbuff = buff;
 870:pff.c         **** 	FATFS *fs = FatFs;
 1702               		.loc 1 870 0
 1703 07c8 C091 0000 		lds r28,FatFs
 1704 07cc D091 0000 		lds r29,FatFs+1
 1705               	.LVL120:
 871:pff.c         **** 
 872:pff.c         **** 
 873:pff.c         **** 	*br = 0;
 1706               		.loc 1 873 0
 1707 07d0 FA01      		movw r30,r20
 1708 07d2 1182      		std Z+1,__zero_reg__
 1709 07d4 1082      		st Z,__zero_reg__
 874:pff.c         **** 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 1710               		.loc 1 874 0
 1711 07d6 2097      		sbiw r28,0
 1712 07d8 01F4      		brne .+2
 1713 07da 00C0      		rjmp .L122
 875:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 1714               		.loc 1 875 0
 1715 07dc 8981      		ldd r24,Y+1
 1716               	.LVL121:
 1717 07de 80FF      		sbrs r24,0
 1718 07e0 00C0      		rjmp .L123
 876:pff.c         **** 		return FR_NOT_OPENED;
 877:pff.c         **** 
 878:pff.c         **** 	*remain = fs->fsize - fs->fptr;
 1719               		.loc 1 878 0
 1720 07e2 8A8D      		ldd r24,Y+26
 1721 07e4 9B8D      		ldd r25,Y+27
 1722 07e6 AC8D      		ldd r26,Y+28
 1723 07e8 BD8D      		ldd r27,Y+29
 1724 07ea 4E89      		ldd r20,Y+22
 1725 07ec 5F89      		ldd r21,Y+23
 1726 07ee 688D      		ldd r22,Y+24
 1727 07f0 798D      		ldd r23,Y+25
 1728               	.LVL122:
 1729 07f2 841B      		sub r24,r20
 1730 07f4 950B      		sbc r25,r21
 1731 07f6 A60B      		sbc r26,r22
 1732 07f8 B70B      		sbc r27,r23
 1733 07fa F901      		movw r30,r18
 1734 07fc 8083      		st Z,r24
 1735 07fe 9183      		std Z+1,r25
 1736 0800 A283      		std Z+2,r26
 1737 0802 B383      		std Z+3,r27
 879:pff.c         **** 	if (btr > *remain) btr = (WORD)*remain;			/* Truncate btr by remaining bytes */
 1738               		.loc 1 879 0
 1739 0804 A601      		movw r20,r12
 1740 0806 60E0      		ldi r22,0
 1741 0808 70E0      		ldi r23,0
 1742               	.LVL123:
 1743 080a 8417      		cp r24,r20
 1744 080c 9507      		cpc r25,r21
 1745 080e A607      		cpc r26,r22
 1746 0810 B707      		cpc r27,r23
 1747 0812 00F4      		brsh .L112
 1748               		.loc 1 879 0 is_stmt 0 discriminator 1
 1749 0814 6C01      		movw r12,r24
 1750               	.LVL124:
 1751               	.L112:
 880:pff.c         **** 
 881:pff.c         **** 	while (btr)	{									/* Repeat until all data transferred */
 882:pff.c         **** 		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 883:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 884:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 885:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 886:pff.c         **** 					fs->org_clust : get_fat(fs->curr_clust);
 887:pff.c         **** 				if (clst <= 1) goto fr_abort;
 888:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 889:pff.c         **** 			}
 890:pff.c         **** 			sect = clust2sect(fs->curr_clust);		/* Get current sector */
 891:pff.c         **** 			if (!sect) goto fr_abort;
 892:pff.c         **** 			fs->dsect = sect + cs;
 893:pff.c         **** 		}
 894:pff.c         **** 		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
 895:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 896:pff.c         **** 		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
 1752               		.loc 1 896 0 is_stmt 1
 1753 0816 3401      		movw r6,r8
 894:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 1754               		.loc 1 894 0
 1755 0818 412C      		mov r4,__zero_reg__
 1756 081a 32E0      		ldi r19,lo8(2)
 1757 081c 532E      		mov r5,r19
 1758               	.LVL125:
 1759               	.L113:
 881:pff.c         **** 		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 1760               		.loc 1 881 0
 1761 081e C114      		cp r12,__zero_reg__
 1762 0820 D104      		cpc r13,__zero_reg__
 1763 0822 01F4      		brne .+2
 1764 0824 00C0      		rjmp .L128
 882:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 1765               		.loc 1 882 0
 1766 0826 8E89      		ldd r24,Y+22
 1767 0828 9F89      		ldd r25,Y+23
 1768 082a A88D      		ldd r26,Y+24
 1769 082c B98D      		ldd r27,Y+25
 1770 082e AC01      		movw r20,r24
 1771 0830 BD01      		movw r22,r26
 1772 0832 5170      		andi r21,1
 1773 0834 6627      		clr r22
 1774 0836 7727      		clr r23
 1775 0838 452B      		or r20,r21
 1776 083a 462B      		or r20,r22
 1777 083c 472B      		or r20,r23
 1778 083e 01F4      		brne .L114
 883:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 1779               		.loc 1 883 0
 1780 0840 FA80      		ldd r15,Y+2
 1781 0842 FA94      		dec r15
 1782 0844 AC01      		movw r20,r24
 1783 0846 BD01      		movw r22,r26
 1784 0848 29E0      		ldi r18,9
 1785               		1:
 1786 084a 7695      		lsr r23
 1787 084c 6795      		ror r22
 1788 084e 5795      		ror r21
 1789 0850 4795      		ror r20
 1790 0852 2A95      		dec r18
 1791 0854 01F4      		brne 1b
 1792 0856 F422      		and r15,r20
 1793               	.LVL126:
 884:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 1794               		.loc 1 884 0
 1795 0858 01F4      		brne .L115
 886:pff.c         **** 				if (clst <= 1) goto fr_abort;
 1796               		.loc 1 886 0
 1797 085a 892B      		or r24,r25
 1798 085c 8A2B      		or r24,r26
 1799 085e 8B2B      		or r24,r27
 1800 0860 01F4      		brne .L116
 886:pff.c         **** 				if (clst <= 1) goto fr_abort;
 1801               		.loc 1 886 0 is_stmt 0 discriminator 1
 1802 0862 6E8D      		ldd r22,Y+30
 1803 0864 7F8D      		ldd r23,Y+31
 1804 0866 88A1      		ldd r24,Y+32
 1805 0868 99A1      		ldd r25,Y+33
 1806 086a 00C0      		rjmp .L117
 1807               	.L116:
 886:pff.c         **** 				if (clst <= 1) goto fr_abort;
 1808               		.loc 1 886 0 discriminator 2
 1809 086c 6AA1      		ldd r22,Y+34
 1810 086e 7BA1      		ldd r23,Y+35
 1811 0870 8CA1      		ldd r24,Y+36
 1812 0872 9DA1      		ldd r25,Y+37
 1813 0874 0E94 0000 		call get_fat
 1814               	.LVL127:
 1815               	.L117:
 887:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 1816               		.loc 1 887 0 is_stmt 1
 1817 0878 6230      		cpi r22,2
 1818 087a 7105      		cpc r23,__zero_reg__
 1819 087c 8105      		cpc r24,__zero_reg__
 1820 087e 9105      		cpc r25,__zero_reg__
 1821 0880 00F4      		brsh .+2
 1822 0882 00C0      		rjmp .L118
 888:pff.c         **** 			}
 1823               		.loc 1 888 0
 1824 0884 6AA3      		std Y+34,r22
 1825 0886 7BA3      		std Y+35,r23
 1826 0888 8CA3      		std Y+36,r24
 1827 088a 9DA3      		std Y+37,r25
 1828               	.LVL128:
 1829               	.L115:
 890:pff.c         **** 			if (!sect) goto fr_abort;
 1830               		.loc 1 890 0
 1831 088c 6AA1      		ldd r22,Y+34
 1832 088e 7BA1      		ldd r23,Y+35
 1833 0890 8CA1      		ldd r24,Y+36
 1834 0892 9DA1      		ldd r25,Y+37
 1835 0894 0E94 0000 		call clust2sect
 1836               	.LVL129:
 891:pff.c         **** 			fs->dsect = sect + cs;
 1837               		.loc 1 891 0
 1838 0898 6115      		cp r22,__zero_reg__
 1839 089a 7105      		cpc r23,__zero_reg__
 1840 089c 8105      		cpc r24,__zero_reg__
 1841 089e 9105      		cpc r25,__zero_reg__
 1842 08a0 01F4      		brne .+2
 1843 08a2 00C0      		rjmp .L118
 892:pff.c         **** 		}
 1844               		.loc 1 892 0
 1845 08a4 DC01      		movw r26,r24
 1846 08a6 CB01      		movw r24,r22
 1847 08a8 8F0D      		add r24,r15
 1848 08aa 911D      		adc r25,__zero_reg__
 1849 08ac A11D      		adc r26,__zero_reg__
 1850 08ae B11D      		adc r27,__zero_reg__
 1851 08b0 8EA3      		std Y+38,r24
 1852 08b2 9FA3      		std Y+39,r25
 1853 08b4 A8A7      		std Y+40,r26
 1854 08b6 B9A7      		std Y+41,r27
 1855               	.LVL130:
 1856               	.L114:
 894:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 1857               		.loc 1 894 0
 1858 08b8 2E89      		ldd r18,Y+22
 1859 08ba 3F89      		ldd r19,Y+23
 1860 08bc 3170      		andi r19,1
 1861 08be C201      		movw r24,r4
 1862 08c0 821B      		sub r24,r18
 1863 08c2 930B      		sbc r25,r19
 1864               	.LVL131:
 1865 08c4 7601      		movw r14,r12
 1866 08c6 8C15      		cp r24,r12
 1867 08c8 9D05      		cpc r25,r13
 1868 08ca 00F4      		brsh .L119
 1869 08cc 7C01      		movw r14,r24
 1870               	.L119:
 1871               	.LVL132:
 1872               		.loc 1 896 0
 1873 08ce 4EA1      		ldd r20,Y+38
 1874 08d0 5FA1      		ldd r21,Y+39
 1875 08d2 68A5      		ldd r22,Y+40
 1876 08d4 79A5      		ldd r23,Y+41
 1877 08d6 8114      		cp r8,__zero_reg__
 1878 08d8 9104      		cpc r9,__zero_reg__
 1879 08da 01F0      		breq .L124
 1880 08dc C301      		movw r24,r6
 1881 08de 00C0      		rjmp .L120
 1882               	.L124:
 1883 08e0 80E0      		ldi r24,0
 1884 08e2 90E0      		ldi r25,0
 1885               	.L120:
 1886               		.loc 1 896 0 is_stmt 0 discriminator 4
 1887 08e4 8701      		movw r16,r14
 1888 08e6 0E94 0000 		call disk_readp
 1889               	.LVL133:
 897:pff.c         **** 		if (dr) goto fr_abort;
 1890               		.loc 1 897 0 is_stmt 1 discriminator 4
 1891 08ea 8111      		cpse r24,__zero_reg__
 1892 08ec 00C0      		rjmp .L118
 898:pff.c         **** 		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 1893               		.loc 1 898 0
 1894 08ee 8E89      		ldd r24,Y+22
 1895 08f0 9F89      		ldd r25,Y+23
 1896 08f2 A88D      		ldd r26,Y+24
 1897 08f4 B98D      		ldd r27,Y+25
 1898               	.LVL134:
 1899 08f6 8E0D      		add r24,r14
 1900 08f8 9F1D      		adc r25,r15
 1901 08fa A11D      		adc r26,__zero_reg__
 1902 08fc B11D      		adc r27,__zero_reg__
 1903 08fe 8E8B      		std Y+22,r24
 1904 0900 9F8B      		std Y+23,r25
 1905 0902 A88F      		std Y+24,r26
 1906 0904 B98F      		std Y+25,r27
 1907 0906 6E0C      		add r6,r14
 1908 0908 7F1C      		adc r7,r15
 1909               	.LVL135:
 899:pff.c         **** 		btr -= rcnt; *br += rcnt;
 1910               		.loc 1 899 0
 1911 090a CE18      		sub r12,r14
 1912 090c DF08      		sbc r13,r15
 1913               	.LVL136:
 1914 090e F501      		movw r30,r10
 1915 0910 8081      		ld r24,Z
 1916 0912 9181      		ldd r25,Z+1
 1917 0914 E80E      		add r14,r24
 1918 0916 F91E      		adc r15,r25
 1919               	.LVL137:
 1920 0918 F182      		std Z+1,r15
 1921 091a E082      		st Z,r14
 1922 091c 00C0      		rjmp .L113
 1923               	.LVL138:
 1924               	.L128:
 900:pff.c         **** 	}
 901:pff.c         **** 
 902:pff.c         **** 	return FR_OK;
 1925               		.loc 1 902 0
 1926 091e 80E0      		ldi r24,0
 1927 0920 00C0      		rjmp .L111
 1928               	.L118:
 1929               	.LDL1:
 903:pff.c         **** 
 904:pff.c         **** fr_abort:
 905:pff.c         **** 	fs->flag = 0;
 1930               		.loc 1 905 0
 1931 0922 1982      		std Y+1,__zero_reg__
 906:pff.c         **** 	return FR_DISK_ERR;
 1932               		.loc 1 906 0
 1933 0924 81E0      		ldi r24,lo8(1)
 1934 0926 00C0      		rjmp .L111
 1935               	.LVL139:
 1936               	.L122:
 874:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 1937               		.loc 1 874 0
 1938 0928 86E0      		ldi r24,lo8(6)
 1939 092a 00C0      		rjmp .L111
 1940               	.L123:
 876:pff.c         **** 
 1941               		.loc 1 876 0
 1942 092c 85E0      		ldi r24,lo8(5)
 1943               	.LVL140:
 1944               	.L111:
 1945               	/* epilogue start */
 907:pff.c         **** }
 1946               		.loc 1 907 0
 1947 092e DF91      		pop r29
 1948 0930 CF91      		pop r28
 1949               	.LVL141:
 1950 0932 1F91      		pop r17
 1951 0934 0F91      		pop r16
 1952 0936 FF90      		pop r15
 1953 0938 EF90      		pop r14
 1954 093a DF90      		pop r13
 1955 093c CF90      		pop r12
 1956               	.LVL142:
 1957 093e BF90      		pop r11
 1958 0940 AF90      		pop r10
 1959               	.LVL143:
 1960 0942 9F90      		pop r9
 1961 0944 8F90      		pop r8
 1962               	.LVL144:
 1963 0946 7F90      		pop r7
 1964 0948 6F90      		pop r6
 1965 094a 5F90      		pop r5
 1966 094c 4F90      		pop r4
 1967 094e 0895      		ret
 1968               		.cfi_endproc
 1969               	.LFE12:
 1971               	.global	pf_lseek
 1973               	pf_lseek:
 1974               	.LFB13:
 908:pff.c         **** #endif
 909:pff.c         **** 
 910:pff.c         **** 
 911:pff.c         **** 
 912:pff.c         **** /*-----------------------------------------------------------------------*/
 913:pff.c         **** /* Write File                                                            */
 914:pff.c         **** /*-----------------------------------------------------------------------*/
 915:pff.c         **** #if _USE_WRITE
 916:pff.c         **** 
 917:pff.c         **** FRESULT pf_write (
 918:pff.c         **** 	const void* buff,	/* Pointer to the data to be written */
 919:pff.c         **** 	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
 920:pff.c         **** 	WORD* bw			/* Pointer to number of bytes written */
 921:pff.c         **** )
 922:pff.c         **** {
 923:pff.c         **** 	CLUST clst;
 924:pff.c         **** 	DWORD sect, remain;
 925:pff.c         **** 	const BYTE *p = buff;
 926:pff.c         **** 	BYTE cs;
 927:pff.c         **** 	WORD wcnt;
 928:pff.c         **** 	FATFS *fs = FatFs;
 929:pff.c         **** 
 930:pff.c         **** 
 931:pff.c         **** 	*bw = 0;
 932:pff.c         **** 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 933:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 934:pff.c         **** 		return FR_NOT_OPENED;
 935:pff.c         **** 
 936:pff.c         **** 	if (!btw) {		/* Finalize request */
 937:pff.c         **** 		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
 938:pff.c         **** 		fs->flag &= ~FA__WIP;
 939:pff.c         **** 		return FR_OK;
 940:pff.c         **** 	} else {		/* Write data request */
 941:pff.c         **** 		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
 942:pff.c         **** 			fs->fptr &= 0xFFFFFE00;
 943:pff.c         **** 	}
 944:pff.c         **** 	remain = fs->fsize - fs->fptr;
 945:pff.c         **** 	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
 946:pff.c         **** 
 947:pff.c         **** 	while (btw)	{									/* Repeat until all data transferred */
 948:pff.c         **** 		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
 949:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 950:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 951:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 952:pff.c         **** 					fs->org_clust : get_fat(fs->curr_clust);
 953:pff.c         **** 				if (clst <= 1) goto fw_abort;
 954:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 955:pff.c         **** 			}
 956:pff.c         **** 			sect = clust2sect(fs->curr_clust);		/* Get current sector */
 957:pff.c         **** 			if (!sect) goto fw_abort;
 958:pff.c         **** 			fs->dsect = sect + cs;
 959:pff.c         **** 			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
 960:pff.c         **** 			fs->flag |= FA__WIP;
 961:pff.c         **** 		}
 962:pff.c         **** 		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
 963:pff.c         **** 		if (wcnt > btw) wcnt = btw;
 964:pff.c         **** 		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
 965:pff.c         **** 		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
 966:pff.c         **** 		btw -= wcnt; *bw += wcnt;
 967:pff.c         **** 		if (((WORD)fs->fptr % 512) == 0) {
 968:pff.c         **** 			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
 969:pff.c         **** 			fs->flag &= ~FA__WIP;
 970:pff.c         **** 		}
 971:pff.c         **** 	}
 972:pff.c         **** 
 973:pff.c         **** 	return FR_OK;
 974:pff.c         **** 
 975:pff.c         **** fw_abort:
 976:pff.c         **** 	fs->flag = 0;
 977:pff.c         **** 	return FR_DISK_ERR;
 978:pff.c         **** }
 979:pff.c         **** #endif
 980:pff.c         **** 
 981:pff.c         **** 
 982:pff.c         **** 
 983:pff.c         **** /*-----------------------------------------------------------------------*/
 984:pff.c         **** /* Seek File R/W Pointer                                                 */
 985:pff.c         **** /*-----------------------------------------------------------------------*/
 986:pff.c         **** //#if _USE_LSEEK
 987:pff.c         **** 
 988:pff.c         **** FRESULT pf_lseek (
 989:pff.c         **** 	DWORD ofs		/* File pointer from top of file */
 990:pff.c         **** )
 991:pff.c         **** {
 1975               		.loc 1 991 0
 1976               		.cfi_startproc
 1977               	.LVL145:
 1978 0950 4F92      		push r4
 1979               	.LCFI77:
 1980               		.cfi_def_cfa_offset 4
 1981               		.cfi_offset 4, -3
 1982 0952 5F92      		push r5
 1983               	.LCFI78:
 1984               		.cfi_def_cfa_offset 5
 1985               		.cfi_offset 5, -4
 1986 0954 6F92      		push r6
 1987               	.LCFI79:
 1988               		.cfi_def_cfa_offset 6
 1989               		.cfi_offset 6, -5
 1990 0956 7F92      		push r7
 1991               	.LCFI80:
 1992               		.cfi_def_cfa_offset 7
 1993               		.cfi_offset 7, -6
 1994 0958 8F92      		push r8
 1995               	.LCFI81:
 1996               		.cfi_def_cfa_offset 8
 1997               		.cfi_offset 8, -7
 1998 095a 9F92      		push r9
 1999               	.LCFI82:
 2000               		.cfi_def_cfa_offset 9
 2001               		.cfi_offset 9, -8
 2002 095c AF92      		push r10
 2003               	.LCFI83:
 2004               		.cfi_def_cfa_offset 10
 2005               		.cfi_offset 10, -9
 2006 095e BF92      		push r11
 2007               	.LCFI84:
 2008               		.cfi_def_cfa_offset 11
 2009               		.cfi_offset 11, -10
 2010 0960 CF92      		push r12
 2011               	.LCFI85:
 2012               		.cfi_def_cfa_offset 12
 2013               		.cfi_offset 12, -11
 2014 0962 DF92      		push r13
 2015               	.LCFI86:
 2016               		.cfi_def_cfa_offset 13
 2017               		.cfi_offset 13, -12
 2018 0964 EF92      		push r14
 2019               	.LCFI87:
 2020               		.cfi_def_cfa_offset 14
 2021               		.cfi_offset 14, -13
 2022 0966 FF92      		push r15
 2023               	.LCFI88:
 2024               		.cfi_def_cfa_offset 15
 2025               		.cfi_offset 15, -14
 2026 0968 0F93      		push r16
 2027               	.LCFI89:
 2028               		.cfi_def_cfa_offset 16
 2029               		.cfi_offset 16, -15
 2030 096a 1F93      		push r17
 2031               	.LCFI90:
 2032               		.cfi_def_cfa_offset 17
 2033               		.cfi_offset 17, -16
 2034 096c CF93      		push r28
 2035               	.LCFI91:
 2036               		.cfi_def_cfa_offset 18
 2037               		.cfi_offset 28, -17
 2038 096e DF93      		push r29
 2039               	.LCFI92:
 2040               		.cfi_def_cfa_offset 19
 2041               		.cfi_offset 29, -18
 2042 0970 00D0      		rcall .
 2043 0972 1F92      		push __zero_reg__
 2044               	.LCFI93:
 2045               		.cfi_def_cfa_offset 23
 2046 0974 CDB7      		in r28,__SP_L__
 2047 0976 DEB7      		in r29,__SP_H__
 2048               	.LCFI94:
 2049               		.cfi_def_cfa_register 28
 2050               	/* prologue: function */
 2051               	/* frame size = 4 */
 2052               	/* stack size = 20 */
 2053               	.L__stack_usage = 20
 2054 0978 362F      		mov r19,r22
 2055 097a 272F      		mov r18,r23
 992:pff.c         **** 	CLUST clst;
 993:pff.c         **** 	DWORD bcs, sect, ifptr;
 994:pff.c         **** 	FATFS *fs = FatFs;
 2056               		.loc 1 994 0
 2057 097c 0091 0000 		lds r16,FatFs
 2058 0980 1091 0000 		lds r17,FatFs+1
 2059               	.LVL146:
 995:pff.c         **** 
 996:pff.c         **** 
 997:pff.c         **** 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 2060               		.loc 1 997 0
 2061 0984 0115      		cp r16,__zero_reg__
 2062 0986 1105      		cpc r17,__zero_reg__
 2063 0988 01F4      		brne .+2
 2064 098a 00C0      		rjmp .L137
 998:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 2065               		.loc 1 998 0
 2066 098c D801      		movw r26,r16
 2067 098e 1196      		adiw r26,1
 2068 0990 4C91      		ld r20,X
 2069 0992 1197      		sbiw r26,1
 2070 0994 40FF      		sbrs r20,0
 2071 0996 00C0      		rjmp .L138
 999:pff.c         **** 			return FR_NOT_OPENED;
1000:pff.c         **** 
1001:pff.c         **** 	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
 2072               		.loc 1 1001 0
 2073 0998 5A96      		adiw r26,26
 2074 099a 4D91      		ld r20,X+
 2075 099c 5D91      		ld r21,X+
 2076 099e 6D91      		ld r22,X+
 2077 09a0 7C91      		ld r23,X
 2078 09a2 5D97      		sbiw r26,26+3
 2079 09a4 C32E      		mov r12,r19
 2080 09a6 D22E      		mov r13,r18
 2081 09a8 7C01      		movw r14,r24
 2082 09aa 4C15      		cp r20,r12
 2083 09ac 5D05      		cpc r21,r13
 2084 09ae 6E05      		cpc r22,r14
 2085 09b0 7F05      		cpc r23,r15
 2086 09b2 00F4      		brsh .L131
 2087 09b4 6A01      		movw r12,r20
 2088 09b6 7B01      		movw r14,r22
 2089               	.L131:
 2090               	.LVL147:
1002:pff.c         **** 	ifptr = fs->fptr;
 2091               		.loc 1 1002 0
 2092 09b8 F801      		movw r30,r16
 2093 09ba 4688      		ldd r4,Z+22
 2094 09bc 5788      		ldd r5,Z+23
 2095 09be 608C      		ldd r6,Z+24
 2096 09c0 718C      		ldd r7,Z+25
 2097               	.LVL148:
1003:pff.c         **** 	fs->fptr = 0;
 2098               		.loc 1 1003 0
 2099 09c2 168A      		std Z+22,__zero_reg__
 2100 09c4 178A      		std Z+23,__zero_reg__
 2101 09c6 108E      		std Z+24,__zero_reg__
 2102 09c8 118E      		std Z+25,__zero_reg__
1004:pff.c         **** 	if (ofs > 0) {
 2103               		.loc 1 1004 0
 2104 09ca C114      		cp r12,__zero_reg__
 2105 09cc D104      		cpc r13,__zero_reg__
 2106 09ce E104      		cpc r14,__zero_reg__
 2107 09d0 F104      		cpc r15,__zero_reg__
 2108 09d2 01F4      		brne .+2
 2109 09d4 00C0      		rjmp .L139
1005:pff.c         **** 		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
 2110               		.loc 1 1005 0
 2111 09d6 8280      		ldd r8,Z+2
 2112 09d8 912C      		mov r9,__zero_reg__
 2113 09da A12C      		mov r10,__zero_reg__
 2114 09dc B12C      		mov r11,__zero_reg__
 2115 09de 39E0      		ldi r19,9
 2116               		1:
 2117 09e0 880C      		lsl r8
 2118 09e2 991C      		rol r9
 2119 09e4 AA1C      		rol r10
 2120 09e6 BB1C      		rol r11
 2121 09e8 3A95      		dec r19
 2122 09ea 01F4      		brne 1b
 2123               	.LVL149:
1006:pff.c         **** 		if (ifptr > 0 &&
 2124               		.loc 1 1006 0
 2125 09ec 4114      		cp r4,__zero_reg__
 2126 09ee 5104      		cpc r5,__zero_reg__
 2127 09f0 6104      		cpc r6,__zero_reg__
 2128 09f2 7104      		cpc r7,__zero_reg__
 2129 09f4 01F4      		brne .+2
 2130 09f6 00C0      		rjmp .L132
1007:pff.c         **** 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 2131               		.loc 1 1007 0 discriminator 1
 2132 09f8 B1E0      		ldi r27,1
 2133 09fa 4B1A      		sub r4,r27
 2134 09fc 5108      		sbc r5,__zero_reg__
 2135 09fe 6108      		sbc r6,__zero_reg__
 2136 0a00 7108      		sbc r7,__zero_reg__
 2137               	.LVL150:
 2138 0a02 C701      		movw r24,r14
 2139 0a04 B601      		movw r22,r12
 2140 0a06 6150      		subi r22,1
 2141 0a08 7109      		sbc r23,__zero_reg__
 2142 0a0a 8109      		sbc r24,__zero_reg__
 2143 0a0c 9109      		sbc r25,__zero_reg__
 2144 0a0e A501      		movw r20,r10
 2145 0a10 9401      		movw r18,r8
 2146 0a12 0E94 0000 		call __udivmodsi4
 2147 0a16 2983      		std Y+1,r18
 2148 0a18 3A83      		std Y+2,r19
 2149 0a1a 4B83      		std Y+3,r20
 2150 0a1c 5C83      		std Y+4,r21
 2151 0a1e C301      		movw r24,r6
 2152 0a20 B201      		movw r22,r4
 2153 0a22 A501      		movw r20,r10
 2154 0a24 9401      		movw r18,r8
 2155 0a26 0E94 0000 		call __udivmodsi4
1006:pff.c         **** 		if (ifptr > 0 &&
 2156               		.loc 1 1006 0 discriminator 1
 2157 0a2a 8981      		ldd r24,Y+1
 2158 0a2c 9A81      		ldd r25,Y+2
 2159 0a2e AB81      		ldd r26,Y+3
 2160 0a30 BC81      		ldd r27,Y+4
 2161 0a32 8217      		cp r24,r18
 2162 0a34 9307      		cpc r25,r19
 2163 0a36 A407      		cpc r26,r20
 2164 0a38 B507      		cpc r27,r21
 2165 0a3a 00F0      		brlo .L132
1008:pff.c         **** 			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 2166               		.loc 1 1008 0
 2167 0a3c 8827      		clr r24
 2168 0a3e 9927      		clr r25
 2169 0a40 DC01      		movw r26,r24
 2170 0a42 8819      		sub r24,r8
 2171 0a44 9909      		sbc r25,r9
 2172 0a46 AA09      		sbc r26,r10
 2173 0a48 BB09      		sbc r27,r11
 2174 0a4a 4822      		and r4,r24
 2175 0a4c 5922      		and r5,r25
 2176 0a4e 6A22      		and r6,r26
 2177 0a50 7B22      		and r7,r27
 2178               	.LVL151:
 2179 0a52 D801      		movw r26,r16
 2180 0a54 5696      		adiw r26,22
 2181 0a56 4D92      		st X+,r4
 2182 0a58 5D92      		st X+,r5
 2183 0a5a 6D92      		st X+,r6
 2184 0a5c 7C92      		st X,r7
 2185 0a5e 5997      		sbiw r26,22+3
1009:pff.c         **** 			ofs -= fs->fptr;
 2186               		.loc 1 1009 0
 2187 0a60 C418      		sub r12,r4
 2188 0a62 D508      		sbc r13,r5
 2189 0a64 E608      		sbc r14,r6
 2190 0a66 F708      		sbc r15,r7
 2191               	.LVL152:
1010:pff.c         **** 			clst = fs->curr_clust;
 2192               		.loc 1 1010 0
 2193 0a68 9296      		adiw r26,34
 2194 0a6a 6D91      		ld r22,X+
 2195 0a6c 7D91      		ld r23,X+
 2196 0a6e 8D91      		ld r24,X+
 2197 0a70 9C91      		ld r25,X
 2198 0a72 9597      		sbiw r26,34+3
 2199               	.LVL153:
 2200 0a74 00C0      		rjmp .L134
 2201               	.LVL154:
 2202               	.L132:
1011:pff.c         **** 		} else {							/* When seek to back cluster, */
1012:pff.c         **** 			clst = fs->org_clust;			/* start from the first cluster */
 2203               		.loc 1 1012 0
 2204 0a76 F801      		movw r30,r16
 2205 0a78 668D      		ldd r22,Z+30
 2206 0a7a 778D      		ldd r23,Z+31
 2207 0a7c 80A1      		ldd r24,Z+32
 2208 0a7e 91A1      		ldd r25,Z+33
 2209               	.LVL155:
1013:pff.c         **** 			fs->curr_clust = clst;
 2210               		.loc 1 1013 0
 2211 0a80 62A3      		std Z+34,r22
 2212 0a82 73A3      		std Z+35,r23
 2213 0a84 84A3      		std Z+36,r24
 2214 0a86 95A3      		std Z+37,r25
 2215 0a88 00C0      		rjmp .L134
 2216               	.L136:
1014:pff.c         **** 		}
1015:pff.c         **** 		while (ofs > bcs) {				/* Cluster following loop */
1016:pff.c         **** 			clst = get_fat(clst);		/* Follow cluster chain */
 2217               		.loc 1 1016 0
 2218 0a8a 0E94 0000 		call get_fat
 2219               	.LVL156:
1017:pff.c         **** 			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
 2220               		.loc 1 1017 0
 2221 0a8e 6230      		cpi r22,2
 2222 0a90 7105      		cpc r23,__zero_reg__
 2223 0a92 8105      		cpc r24,__zero_reg__
 2224 0a94 9105      		cpc r25,__zero_reg__
 2225 0a96 00F4      		brsh .+2
 2226 0a98 00C0      		rjmp .L135
 2227               		.loc 1 1017 0 is_stmt 0 discriminator 1
 2228 0a9a F801      		movw r30,r16
 2229 0a9c 4680      		ldd r4,Z+6
 2230 0a9e 5780      		ldd r5,Z+7
 2231 0aa0 6084      		ldd r6,Z+8
 2232 0aa2 7184      		ldd r7,Z+9
 2233 0aa4 6415      		cp r22,r4
 2234 0aa6 7505      		cpc r23,r5
 2235 0aa8 8605      		cpc r24,r6
 2236 0aaa 9705      		cpc r25,r7
 2237 0aac 00F0      		brlo .+2
 2238 0aae 00C0      		rjmp .L135
1018:pff.c         **** 			fs->curr_clust = clst;
 2239               		.loc 1 1018 0 is_stmt 1
 2240 0ab0 62A3      		std Z+34,r22
 2241 0ab2 73A3      		std Z+35,r23
 2242 0ab4 84A3      		std Z+36,r24
 2243 0ab6 95A3      		std Z+37,r25
1019:pff.c         **** 			fs->fptr += bcs;
 2244               		.loc 1 1019 0
 2245 0ab8 4688      		ldd r4,Z+22
 2246 0aba 5788      		ldd r5,Z+23
 2247 0abc 608C      		ldd r6,Z+24
 2248 0abe 718C      		ldd r7,Z+25
 2249 0ac0 480C      		add r4,r8
 2250 0ac2 591C      		adc r5,r9
 2251 0ac4 6A1C      		adc r6,r10
 2252 0ac6 7B1C      		adc r7,r11
 2253 0ac8 468A      		std Z+22,r4
 2254 0aca 578A      		std Z+23,r5
 2255 0acc 608E      		std Z+24,r6
 2256 0ace 718E      		std Z+25,r7
1020:pff.c         **** 			ofs -= bcs;
 2257               		.loc 1 1020 0
 2258 0ad0 C818      		sub r12,r8
 2259 0ad2 D908      		sbc r13,r9
 2260 0ad4 EA08      		sbc r14,r10
 2261 0ad6 FB08      		sbc r15,r11
 2262               	.LVL157:
 2263               	.L134:
1015:pff.c         **** 			clst = get_fat(clst);		/* Follow cluster chain */
 2264               		.loc 1 1015 0
 2265 0ad8 8C14      		cp r8,r12
 2266 0ada 9D04      		cpc r9,r13
 2267 0adc AE04      		cpc r10,r14
 2268 0ade BF04      		cpc r11,r15
 2269 0ae0 00F0      		brlo .L136
1021:pff.c         **** 		}
1022:pff.c         **** 		fs->fptr += ofs;
 2270               		.loc 1 1022 0
 2271 0ae2 D801      		movw r26,r16
 2272 0ae4 5696      		adiw r26,22
 2273 0ae6 8D90      		ld r8,X+
 2274 0ae8 9D90      		ld r9,X+
 2275 0aea AD90      		ld r10,X+
 2276 0aec BC90      		ld r11,X
 2277 0aee 5997      		sbiw r26,22+3
 2278               	.LVL158:
 2279 0af0 C80C      		add r12,r8
 2280 0af2 D91C      		adc r13,r9
 2281 0af4 EA1C      		adc r14,r10
 2282 0af6 FB1C      		adc r15,r11
 2283               	.LVL159:
 2284 0af8 F801      		movw r30,r16
 2285 0afa C68A      		std Z+22,r12
 2286 0afc D78A      		std Z+23,r13
 2287 0afe E08E      		std Z+24,r14
 2288 0b00 F18E      		std Z+25,r15
1023:pff.c         **** 		sect = clust2sect(clst);		/* Current sector */
 2289               		.loc 1 1023 0
 2290 0b02 0E94 0000 		call clust2sect
 2291               	.LVL160:
1024:pff.c         **** 		if (!sect) goto fe_abort;
 2292               		.loc 1 1024 0
 2293 0b06 6115      		cp r22,__zero_reg__
 2294 0b08 7105      		cpc r23,__zero_reg__
 2295 0b0a 8105      		cpc r24,__zero_reg__
 2296 0b0c 9105      		cpc r25,__zero_reg__
 2297 0b0e 01F0      		breq .L135
1025:pff.c         **** 		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
 2298               		.loc 1 1025 0
 2299 0b10 29E0      		ldi r18,9
 2300               		1:
 2301 0b12 F694      		lsr r15
 2302 0b14 E794      		ror r14
 2303 0b16 D794      		ror r13
 2304 0b18 C794      		ror r12
 2305 0b1a 2A95      		dec r18
 2306 0b1c 01F4      		brne 1b
 2307 0b1e D801      		movw r26,r16
 2308 0b20 1296      		adiw r26,2
 2309 0b22 2C91      		ld r18,X
 2310 0b24 30E0      		ldi r19,0
 2311 0b26 2150      		subi r18,1
 2312 0b28 3109      		sbc r19,__zero_reg__
 2313 0b2a 4901      		movw r8,r18
 2314 0b2c 330F      		lsl r19
 2315 0b2e AA08      		sbc r10,r10
 2316 0b30 BB08      		sbc r11,r11
 2317 0b32 C820      		and r12,r8
 2318 0b34 D920      		and r13,r9
 2319 0b36 EA20      		and r14,r10
 2320 0b38 FB20      		and r15,r11
 2321 0b3a C60E      		add r12,r22
 2322 0b3c D71E      		adc r13,r23
 2323 0b3e E81E      		adc r14,r24
 2324 0b40 F91E      		adc r15,r25
 2325 0b42 F801      		movw r30,r16
 2326 0b44 C6A2      		std Z+38,r12
 2327 0b46 D7A2      		std Z+39,r13
 2328 0b48 E0A6      		std Z+40,r14
 2329 0b4a F1A6      		std Z+41,r15
 2330 0b4c 00C0      		rjmp .L139
 2331               	.LVL161:
 2332               	.L135:
 2333               	.LDL2:
1026:pff.c         **** 	}
1027:pff.c         **** 
1028:pff.c         **** 	return FR_OK;
1029:pff.c         **** 
1030:pff.c         **** fe_abort:
1031:pff.c         **** 	fs->flag = 0;
 2334               		.loc 1 1031 0
 2335 0b4e D801      		movw r26,r16
 2336 0b50 1196      		adiw r26,1
 2337 0b52 1C92      		st X,__zero_reg__
1032:pff.c         **** 	return FR_DISK_ERR;
 2338               		.loc 1 1032 0
 2339 0b54 81E0      		ldi r24,lo8(1)
 2340 0b56 00C0      		rjmp .L130
 2341               	.LVL162:
 2342               	.L137:
 997:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 2343               		.loc 1 997 0
 2344 0b58 86E0      		ldi r24,lo8(6)
 2345 0b5a 00C0      		rjmp .L130
 2346               	.L138:
 999:pff.c         **** 
 2347               		.loc 1 999 0
 2348 0b5c 85E0      		ldi r24,lo8(5)
 2349 0b5e 00C0      		rjmp .L130
 2350               	.LVL163:
 2351               	.L139:
1028:pff.c         **** 
 2352               		.loc 1 1028 0
 2353 0b60 80E0      		ldi r24,0
 2354               	.L130:
 2355               	/* epilogue start */
1033:pff.c         **** }
 2356               		.loc 1 1033 0
 2357 0b62 0F90      		pop __tmp_reg__
 2358 0b64 0F90      		pop __tmp_reg__
 2359 0b66 0F90      		pop __tmp_reg__
 2360 0b68 0F90      		pop __tmp_reg__
 2361 0b6a DF91      		pop r29
 2362 0b6c CF91      		pop r28
 2363 0b6e 1F91      		pop r17
 2364 0b70 0F91      		pop r16
 2365               	.LVL164:
 2366 0b72 FF90      		pop r15
 2367 0b74 EF90      		pop r14
 2368 0b76 DF90      		pop r13
 2369 0b78 CF90      		pop r12
 2370 0b7a BF90      		pop r11
 2371 0b7c AF90      		pop r10
 2372 0b7e 9F90      		pop r9
 2373 0b80 8F90      		pop r8
 2374 0b82 7F90      		pop r7
 2375 0b84 6F90      		pop r6
 2376 0b86 5F90      		pop r5
 2377 0b88 4F90      		pop r4
 2378 0b8a 0895      		ret
 2379               		.cfi_endproc
 2380               	.LFE13:
 2382               		.local	FatFs
 2383               		.comm	FatFs,2,1
 2384               	.Letext0:
 2385               		.file 2 "integer.h"
 2386               		.file 3 "pff.h"
 2387               		.file 4 "diskio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pff.c
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:2      *ABS*:0000003e __SP_H__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:3      *ABS*:0000003d __SP_L__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:4      *ABS*:0000003f __SREG__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:12     .text:00000000 clust2sect
                             .bss:00000000 FatFs
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:83     .text:00000056 dir_rewind
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:208    .text:000000e8 get_fat
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:393    .text:000001e8 check_fs
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:533    .text:00000276 pf_mount
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:951    .text:00000488 pf_open
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:1625   .text:000007a2 pf_read
C:\Users\Luke\AppData\Local\Temp\ccGhObbc.s:1973   .text:00000950 pf_lseek

UNDEFINED SYMBOLS
__muluhisi3
disk_readp
disk_initialize
__udivmodsi4
__do_clear_bss
