
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0003ee1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1c  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800204  00800204  00000eb4  2**0
                  ALLOC
  3 .stab         00000438  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b6  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  000013b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000015df  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003f8  00000000  00000000  00002ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ea9  00000000  00000000  00002ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e8  00000000  00000000  00003d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004dd  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014fb  00000000  00000000  0000442d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00005928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	77 c0       	rjmp	.+238    	; 0x3e0f0 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	9b c0       	rjmp	.+310    	; 0x3e13c <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	99 c0       	rjmp	.+306    	; 0x3e13c <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	97 c0       	rjmp	.+302    	; 0x3e13c <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	95 c0       	rjmp	.+298    	; 0x3e13c <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	93 c0       	rjmp	.+294    	; 0x3e13c <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	91 c0       	rjmp	.+290    	; 0x3e13c <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	8f c0       	rjmp	.+286    	; 0x3e13c <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	8d c0       	rjmp	.+282    	; 0x3e13c <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	8b c0       	rjmp	.+278    	; 0x3e13c <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	89 c0       	rjmp	.+274    	; 0x3e13c <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	87 c0       	rjmp	.+270    	; 0x3e13c <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	85 c0       	rjmp	.+266    	; 0x3e13c <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	83 c0       	rjmp	.+262    	; 0x3e13c <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	81 c0       	rjmp	.+258    	; 0x3e13c <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	7f c0       	rjmp	.+254    	; 0x3e13c <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	7d c0       	rjmp	.+250    	; 0x3e13c <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	7b c0       	rjmp	.+246    	; 0x3e13c <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	79 c0       	rjmp	.+242    	; 0x3e13c <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	77 c0       	rjmp	.+238    	; 0x3e13c <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	75 c0       	rjmp	.+234    	; 0x3e13c <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	73 c0       	rjmp	.+230    	; 0x3e13c <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	71 c0       	rjmp	.+226    	; 0x3e13c <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	6f c0       	rjmp	.+222    	; 0x3e13c <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	6d c0       	rjmp	.+218    	; 0x3e13c <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	6b c0       	rjmp	.+214    	; 0x3e13c <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	69 c0       	rjmp	.+210    	; 0x3e13c <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	67 c0       	rjmp	.+206    	; 0x3e13c <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	65 c0       	rjmp	.+202    	; 0x3e13c <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	63 c0       	rjmp	.+198    	; 0x3e13c <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	61 c0       	rjmp	.+194    	; 0x3e13c <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	5f c0       	rjmp	.+190    	; 0x3e13c <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	5d c0       	rjmp	.+186    	; 0x3e13c <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	5b c0       	rjmp	.+182    	; 0x3e13c <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	59 c0       	rjmp	.+178    	; 0x3e13c <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	57 c0       	rjmp	.+174    	; 0x3e13c <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	55 c0       	rjmp	.+170    	; 0x3e13c <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	53 c0       	rjmp	.+166    	; 0x3e13c <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	51 c0       	rjmp	.+162    	; 0x3e13c <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	4f c0       	rjmp	.+158    	; 0x3e13c <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	4d c0       	rjmp	.+154    	; 0x3e13c <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	4b c0       	rjmp	.+150    	; 0x3e13c <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	49 c0       	rjmp	.+146    	; 0x3e13c <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	47 c0       	rjmp	.+142    	; 0x3e13c <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	45 c0       	rjmp	.+138    	; 0x3e13c <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	43 c0       	rjmp	.+134    	; 0x3e13c <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	41 c0       	rjmp	.+130    	; 0x3e13c <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	3f c0       	rjmp	.+126    	; 0x3e13c <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	3d c0       	rjmp	.+122    	; 0x3e13c <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	3b c0       	rjmp	.+118    	; 0x3e13c <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	39 c0       	rjmp	.+114    	; 0x3e13c <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	37 c0       	rjmp	.+110    	; 0x3e13c <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	35 c0       	rjmp	.+106    	; 0x3e13c <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	33 c0       	rjmp	.+102    	; 0x3e13c <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	31 c0       	rjmp	.+98     	; 0x3e13c <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	2f c0       	rjmp	.+94     	; 0x3e13c <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	2d c0       	rjmp	.+90     	; 0x3e13c <__bad_interrupt>
	...

0003e0e4 <__trampolines_end>:
   3e0e4:	41 54       	subi	r20, 0x41	; 65
   3e0e6:	6d 65       	ori	r22, 0x5D	; 93
   3e0e8:	67 61       	ori	r22, 0x17	; 23
   3e0ea:	32 35       	cpi	r19, 0x52	; 82
   3e0ec:	36 30       	cpi	r19, 0x06	; 6
	...

0003e0f0 <__ctors_end>:
   3e0f0:	11 24       	eor	r1, r1
   3e0f2:	1f be       	out	0x3f, r1	; 63
   3e0f4:	cf ef       	ldi	r28, 0xFF	; 255
   3e0f6:	d1 e2       	ldi	r29, 0x21	; 33
   3e0f8:	de bf       	out	0x3e, r29	; 62
   3e0fa:	cd bf       	out	0x3d, r28	; 61
   3e0fc:	01 e0       	ldi	r16, 0x01	; 1
   3e0fe:	0c bf       	out	0x3c, r16	; 60

0003e100 <__do_copy_data>:
   3e100:	12 e0       	ldi	r17, 0x02	; 2
   3e102:	a0 e0       	ldi	r26, 0x00	; 0
   3e104:	b2 e0       	ldi	r27, 0x02	; 2
   3e106:	ec e1       	ldi	r30, 0x1C	; 28
   3e108:	fe ee       	ldi	r31, 0xEE	; 238
   3e10a:	03 e0       	ldi	r16, 0x03	; 3
   3e10c:	0b bf       	out	0x3b, r16	; 59
   3e10e:	02 c0       	rjmp	.+4      	; 0x3e114 <__do_copy_data+0x14>
   3e110:	07 90       	elpm	r0, Z+
   3e112:	0d 92       	st	X+, r0
   3e114:	a4 30       	cpi	r26, 0x04	; 4
   3e116:	b1 07       	cpc	r27, r17
   3e118:	d9 f7       	brne	.-10     	; 0x3e110 <__do_copy_data+0x10>

0003e11a <__do_clear_bss>:
   3e11a:	23 e0       	ldi	r18, 0x03	; 3
   3e11c:	a4 e0       	ldi	r26, 0x04	; 4
   3e11e:	b2 e0       	ldi	r27, 0x02	; 2
   3e120:	01 c0       	rjmp	.+2      	; 0x3e124 <.do_clear_bss_start>

0003e122 <.do_clear_bss_loop>:
   3e122:	1d 92       	st	X+, r1

0003e124 <.do_clear_bss_start>:
   3e124:	a2 31       	cpi	r26, 0x12	; 18
   3e126:	b2 07       	cpc	r27, r18
   3e128:	e1 f7       	brne	.-8      	; 0x3e122 <.do_clear_bss_loop>
   3e12a:	f2 d1       	rcall	.+996    	; 0x3e510 <main>
   3e12c:	75 c6       	rjmp	.+3306   	; 0x3ee18 <_exit>

0003e12e <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e12e:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e130:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e132:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e134:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );
   3e136:	11 24       	eor	r1, r1
	// GCC depends on register r1 set to 0
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );
   3e138:	1f be       	out	0x3f, r1	; 63
	// set SREG to 0
	asm volatile ( "jmp main");
   3e13a:	ea c1       	rjmp	.+980    	; 0x3e510 <main>

0003e13c <__bad_interrupt>:
   3e13c:	61 cf       	rjmp	.-318    	; 0x3e000 <__vectors>

0003e13e <sendchar>:
//*****************************************************************************
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c) {
	UART_DATA_REG = c; // prepare transmission
   3e13e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)))
   3e142:	80 91 c0 00 	lds	r24, 0x00C0
   3e146:	86 ff       	sbrs	r24, 6
   3e148:	fc cf       	rjmp	.-8      	; 0x3e142 <sendchar+0x4>
		; // wait until byte sent
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE); // delete TXCflag
   3e14a:	80 91 c0 00 	lds	r24, 0x00C0
   3e14e:	80 64       	ori	r24, 0x40	; 64
   3e150:	80 93 c0 00 	sts	0x00C0, r24
   3e154:	08 95       	ret

0003e156 <transfer>:
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

#define LSBFIRST 0
#define MSBFIRST 1
uint8_t transfer(uint8_t _data) {
	SPDR = _data;
   3e156:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
   3e158:	0d b4       	in	r0, 0x2d	; 45
   3e15a:	07 fe       	sbrs	r0, 7
   3e15c:	fd cf       	rjmp	.-6      	; 0x3e158 <transfer+0x2>
		;
	return SPDR;
   3e15e:	8e b5       	in	r24, 0x2e	; 46
}
   3e160:	08 95       	ret

0003e162 <setDataMode>:
void setDataMode(uint8_t mode) {
	SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
   3e162:	9c b5       	in	r25, 0x2c	; 44
   3e164:	93 7f       	andi	r25, 0xF3	; 243
   3e166:	98 2b       	or	r25, r24
   3e168:	9c bd       	out	0x2c, r25	; 44
   3e16a:	08 95       	ret

0003e16c <setBitOrder>:
}

void setBitOrder(uint8_t bitOrder) {
	if (bitOrder == LSBFIRST) {
   3e16c:	81 11       	cpse	r24, r1
   3e16e:	03 c0       	rjmp	.+6      	; 0x3e176 <setBitOrder+0xa>
		SPCR |= _BV(DORD);
   3e170:	8c b5       	in	r24, 0x2c	; 44
   3e172:	80 62       	ori	r24, 0x20	; 32
   3e174:	02 c0       	rjmp	.+4      	; 0x3e17a <setBitOrder+0xe>
	} else {
		SPCR &= ~(_BV(DORD));
   3e176:	8c b5       	in	r24, 0x2c	; 44
   3e178:	8f 7d       	andi	r24, 0xDF	; 223
   3e17a:	8c bd       	out	0x2c, r24	; 44
   3e17c:	08 95       	ret

0003e17e <setClockDivider>:
	}
}

void setClockDivider(uint8_t rate) {
	SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
   3e17e:	2c b5       	in	r18, 0x2c	; 44
   3e180:	98 2f       	mov	r25, r24
   3e182:	93 70       	andi	r25, 0x03	; 3
   3e184:	2c 7f       	andi	r18, 0xFC	; 252
   3e186:	92 2b       	or	r25, r18
   3e188:	9c bd       	out	0x2c, r25	; 44
	SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
   3e18a:	9d b5       	in	r25, 0x2d	; 45
   3e18c:	82 fb       	bst	r24, 2
   3e18e:	88 27       	eor	r24, r24
   3e190:	80 f9       	bld	r24, 0
   3e192:	9e 7f       	andi	r25, 0xFE	; 254
   3e194:	89 2b       	or	r24, r25
   3e196:	8d bd       	out	0x2d, r24	; 45
   3e198:	08 95       	ret

0003e19a <readStatus>:
}

/// return the STATUS register
#define SPIFLASH_STATUSREAD       0x05
uint8_t readStatus() {
	SS_LOW();
   3e19a:	2c 98       	cbi	0x05, 4	; 5
	SS_MASTER_HIGH();
   3e19c:	28 9a       	sbi	0x05, 0	; 5
	transfer(SPIFLASH_STATUSREAD);
   3e19e:	85 e0       	ldi	r24, 0x05	; 5
   3e1a0:	da df       	rcall	.-76     	; 0x3e156 <transfer>
	uint8_t status = transfer(0);
   3e1a2:	80 e0       	ldi	r24, 0x00	; 0
   3e1a4:	d8 df       	rcall	.-80     	; 0x3e156 <transfer>
	SS_HIGH();
   3e1a6:	2c 9a       	sbi	0x05, 4	; 5
	SS_MASTER_LOW();
   3e1a8:	28 98       	cbi	0x05, 0	; 5
	return status;
}
   3e1aa:	08 95       	ret

0003e1ac <busy>:
uint8_t busy() {
	return readStatus() & 1;
   3e1ac:	f6 df       	rcall	.-20     	; 0x3e19a <readStatus>
}
   3e1ae:	81 70       	andi	r24, 0x01	; 1
   3e1b0:	08 95       	ret

0003e1b2 <command>:

void command(uint8_t cmd) {
   3e1b2:	cf 93       	push	r28
   3e1b4:	c8 2f       	mov	r28, r24

	while (busy())
   3e1b6:	fa df       	rcall	.-12     	; 0x3e1ac <busy>
   3e1b8:	81 11       	cpse	r24, r1
   3e1ba:	fd cf       	rjmp	.-6      	; 0x3e1b6 <command+0x4>
		; //wait for any write/erase to complete
	SS_LOW();
   3e1bc:	2c 98       	cbi	0x05, 4	; 5
	transfer(cmd);
   3e1be:	8c 2f       	mov	r24, r28
}
   3e1c0:	cf 91       	pop	r28
void command(uint8_t cmd) {

	while (busy())
		; //wait for any write/erase to complete
	SS_LOW();
	transfer(cmd);
   3e1c2:	c9 cf       	rjmp	.-110    	; 0x3e156 <transfer>

0003e1c4 <spiReadReg>:
}

#define SPIFLASH_ARRAYREADLOWFREQ 0x03
uint8_t spiReadReg(uint32_t address) {
   3e1c4:	1f 93       	push	r17
   3e1c6:	cf 93       	push	r28
   3e1c8:	df 93       	push	r29
   3e1ca:	1f 92       	push	r1
   3e1cc:	1f 92       	push	r1
   3e1ce:	cd b7       	in	r28, 0x3d	; 61
   3e1d0:	de b7       	in	r29, 0x3e	; 62
   3e1d2:	18 2f       	mov	r17, r24
	SS_LOW();
   3e1d4:	2c 98       	cbi	0x05, 4	; 5
	command(SPIFLASH_ARRAYREADLOWFREQ);
   3e1d6:	83 e0       	ldi	r24, 0x03	; 3
   3e1d8:	6a 83       	std	Y+2, r22	; 0x02
   3e1da:	79 83       	std	Y+1, r23	; 0x01
   3e1dc:	ea df       	rcall	.-44     	; 0x3e1b2 <command>
	transfer(address >> 16);
   3e1de:	81 2f       	mov	r24, r17
   3e1e0:	ba df       	rcall	.-140    	; 0x3e156 <transfer>
	transfer(address >> 8);
   3e1e2:	79 81       	ldd	r23, Y+1	; 0x01
   3e1e4:	87 2f       	mov	r24, r23
   3e1e6:	b7 df       	rcall	.-146    	; 0x3e156 <transfer>
	transfer(address);
   3e1e8:	6a 81       	ldd	r22, Y+2	; 0x02
   3e1ea:	86 2f       	mov	r24, r22
   3e1ec:	b4 df       	rcall	.-152    	; 0x3e156 <transfer>
	uint8_t result = transfer(0);
   3e1ee:	80 e0       	ldi	r24, 0x00	; 0
   3e1f0:	b2 df       	rcall	.-156    	; 0x3e156 <transfer>
	SS_HIGH();
   3e1f2:	2c 9a       	sbi	0x05, 4	; 5
	return result;
}
   3e1f4:	0f 90       	pop	r0
   3e1f6:	0f 90       	pop	r0
   3e1f8:	df 91       	pop	r29
   3e1fa:	cf 91       	pop	r28
   3e1fc:	1f 91       	pop	r17
   3e1fe:	08 95       	ret

0003e200 <delay_ms>:
}

//*****************************************************************************
void delay_ms(unsigned int timedelay) {
	unsigned int i;
	for (i = 0; i < timedelay; i++) {
   3e200:	20 e0       	ldi	r18, 0x00	; 0
   3e202:	30 e0       	ldi	r19, 0x00	; 0
   3e204:	28 17       	cp	r18, r24
   3e206:	39 07       	cpc	r19, r25
   3e208:	49 f0       	breq	.+18     	; 0x3e21c <delay_ms+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e20a:	ef ec       	ldi	r30, 0xCF	; 207
   3e20c:	f7 e0       	ldi	r31, 0x07	; 7
   3e20e:	31 97       	sbiw	r30, 0x01	; 1
   3e210:	f1 f7       	brne	.-4      	; 0x3e20e <delay_ms+0xe>
   3e212:	00 c0       	rjmp	.+0      	; 0x3e214 <delay_ms+0x14>
   3e214:	00 00       	nop
   3e216:	2f 5f       	subi	r18, 0xFF	; 255
   3e218:	3f 4f       	sbci	r19, 0xFF	; 255
   3e21a:	f4 cf       	rjmp	.-24     	; 0x3e204 <delay_ms+0x4>
		_delay_ms(0.5);
	}
}
   3e21c:	08 95       	ret

0003e21e <dec_hex>:
	return UART_DATA_REG;
}


void dec_hex(long int num)   // Function Definition
{
   3e21e:	cf 92       	push	r12
   3e220:	df 92       	push	r13
   3e222:	ef 92       	push	r14
   3e224:	ff 92       	push	r15
   3e226:	0f 93       	push	r16
   3e228:	1f 93       	push	r17
   3e22a:	cf 93       	push	r28
   3e22c:	df 93       	push	r29
   3e22e:	cd b7       	in	r28, 0x3d	; 61
   3e230:	de b7       	in	r29, 0x3e	; 62
   3e232:	c8 5c       	subi	r28, 0xC8	; 200
   3e234:	d1 09       	sbc	r29, r1
   3e236:	0f b6       	in	r0, 0x3f	; 63
   3e238:	f8 94       	cli
   3e23a:	de bf       	out	0x3e, r29	; 62
   3e23c:	0f be       	out	0x3f, r0	; 63
   3e23e:	cd bf       	out	0x3d, r28	; 61
   3e240:	6b 01       	movw	r12, r22
   3e242:	7c 01       	movw	r14, r24
long int rem[50],i=0,length=0;
if(num == 0){
   3e244:	61 15       	cp	r22, r1
   3e246:	71 05       	cpc	r23, r1
   3e248:	81 05       	cpc	r24, r1
   3e24a:	91 05       	cpc	r25, r1
   3e24c:	21 f4       	brne	.+8      	; 0x3e256 <dec_hex+0x38>
	sendchar('0');
   3e24e:	80 e3       	ldi	r24, 0x30	; 48
   3e250:	76 df       	rcall	.-276    	; 0x3e13e <sendchar>
	sendchar('0');
   3e252:	80 e3       	ldi	r24, 0x30	; 48
   3e254:	74 df       	rcall	.-280    	; 0x3e13e <sendchar>
   3e256:	fe 01       	movw	r30, r28
   3e258:	31 96       	adiw	r30, 0x01	; 1
	return UART_DATA_REG;
}


void dec_hex(long int num)   // Function Definition
{
   3e25a:	80 e0       	ldi	r24, 0x00	; 0
   3e25c:	90 e0       	ldi	r25, 0x00	; 0
   3e25e:	dc 01       	movw	r26, r24
   3e260:	8f 01       	movw	r16, r30
long int rem[50],i=0,length=0;
if(num == 0){
	sendchar('0');
	sendchar('0');
}
while(num>0)
   3e262:	1c 14       	cp	r1, r12
   3e264:	1d 04       	cpc	r1, r13
   3e266:	1e 04       	cpc	r1, r14
   3e268:	1f 04       	cpc	r1, r15
   3e26a:	ac f4       	brge	.+42     	; 0x3e296 <dec_hex+0x78>
   {
      rem[i]=num%16;
   3e26c:	b7 01       	movw	r22, r14
   3e26e:	a6 01       	movw	r20, r12
   3e270:	4f 70       	andi	r20, 0x0F	; 15
   3e272:	55 27       	eor	r21, r21
   3e274:	66 27       	eor	r22, r22
   3e276:	77 27       	eor	r23, r23
   3e278:	41 93       	st	Z+, r20
   3e27a:	51 93       	st	Z+, r21
   3e27c:	61 93       	st	Z+, r22
   3e27e:	71 93       	st	Z+, r23
      num=num/16;
   3e280:	24 e0       	ldi	r18, 0x04	; 4
   3e282:	f5 94       	asr	r15
   3e284:	e7 94       	ror	r14
   3e286:	d7 94       	ror	r13
   3e288:	c7 94       	ror	r12
   3e28a:	2a 95       	dec	r18
   3e28c:	d1 f7       	brne	.-12     	; 0x3e282 <dec_hex+0x64>
      i++;
   3e28e:	01 96       	adiw	r24, 0x01	; 1
   3e290:	a1 1d       	adc	r26, r1
   3e292:	b1 1d       	adc	r27, r1
   3e294:	e6 cf       	rjmp	.-52     	; 0x3e262 <dec_hex+0x44>
      length++;
   }

for(i=length-1;i>=0;i--)
   3e296:	6c 01       	movw	r12, r24
   3e298:	7d 01       	movw	r14, r26
   3e29a:	21 e0       	ldi	r18, 0x01	; 1
   3e29c:	c2 1a       	sub	r12, r18
   3e29e:	d1 08       	sbc	r13, r1
   3e2a0:	e1 08       	sbc	r14, r1
   3e2a2:	f1 08       	sbc	r15, r1
   3e2a4:	2f ef       	ldi	r18, 0xFF	; 255
   3e2a6:	c2 16       	cp	r12, r18
   3e2a8:	d2 06       	cpc	r13, r18
   3e2aa:	e2 06       	cpc	r14, r18
   3e2ac:	f2 06       	cpc	r15, r18
   3e2ae:	09 f4       	brne	.+2      	; 0x3e2b2 <dec_hex+0x94>
   3e2b0:	6c c0       	rjmp	.+216    	; 0x3e38a <dec_hex+0x16c>
   3e2b2:	f6 01       	movw	r30, r12
   3e2b4:	ee 0f       	add	r30, r30
   3e2b6:	ff 1f       	adc	r31, r31
   3e2b8:	ee 0f       	add	r30, r30
   3e2ba:	ff 1f       	adc	r31, r31
   3e2bc:	e0 0f       	add	r30, r16
   3e2be:	f1 1f       	adc	r31, r17
  {
    switch(rem[i])
   3e2c0:	80 81       	ld	r24, Z
   3e2c2:	91 81       	ldd	r25, Z+1	; 0x01
   3e2c4:	a2 81       	ldd	r26, Z+2	; 0x02
   3e2c6:	b3 81       	ldd	r27, Z+3	; 0x03
   3e2c8:	87 30       	cpi	r24, 0x07	; 7
   3e2ca:	91 05       	cpc	r25, r1
   3e2cc:	a1 05       	cpc	r26, r1
   3e2ce:	b1 05       	cpc	r27, r1
   3e2d0:	09 f4       	brne	.+2      	; 0x3e2d4 <dec_hex+0xb6>
   3e2d2:	45 c0       	rjmp	.+138    	; 0x3e35e <dec_hex+0x140>
   3e2d4:	dc f4       	brge	.+54     	; 0x3e30c <dec_hex+0xee>
   3e2d6:	83 30       	cpi	r24, 0x03	; 3
   3e2d8:	91 05       	cpc	r25, r1
   3e2da:	a1 05       	cpc	r26, r1
   3e2dc:	b1 05       	cpc	r27, r1
   3e2de:	c9 f1       	breq	.+114    	; 0x3e352 <dec_hex+0x134>
   3e2e0:	6c f4       	brge	.+26     	; 0x3e2fc <dec_hex+0xde>
   3e2e2:	81 30       	cpi	r24, 0x01	; 1
   3e2e4:	91 05       	cpc	r25, r1
   3e2e6:	a1 05       	cpc	r26, r1
   3e2e8:	b1 05       	cpc	r27, r1
   3e2ea:	79 f1       	breq	.+94     	; 0x3e34a <dec_hex+0x12c>
   3e2ec:	84 f5       	brge	.+96     	; 0x3e34e <dec_hex+0x130>
   3e2ee:	89 2b       	or	r24, r25
   3e2f0:	8a 2b       	or	r24, r26
   3e2f2:	8b 2b       	or	r24, r27
   3e2f4:	09 f0       	breq	.+2      	; 0x3e2f8 <dec_hex+0xda>
   3e2f6:	41 c0       	rjmp	.+130    	; 0x3e37a <dec_hex+0x15c>
    {
    case 0:
        sendchar('0');
   3e2f8:	80 e3       	ldi	r24, 0x30	; 48
   3e2fa:	40 c0       	rjmp	.+128    	; 0x3e37c <dec_hex+0x15e>
      length++;
   }

for(i=length-1;i>=0;i--)
  {
    switch(rem[i])
   3e2fc:	85 30       	cpi	r24, 0x05	; 5
   3e2fe:	91 05       	cpc	r25, r1
   3e300:	a1 05       	cpc	r26, r1
   3e302:	b1 05       	cpc	r27, r1
   3e304:	41 f1       	breq	.+80     	; 0x3e356 <dec_hex+0x138>
   3e306:	4c f5       	brge	.+82     	; 0x3e35a <dec_hex+0x13c>
        break;
    case 3:
        sendchar('3');
        break;
    case 4:
        sendchar('4');
   3e308:	84 e3       	ldi	r24, 0x34	; 52
   3e30a:	38 c0       	rjmp	.+112    	; 0x3e37c <dec_hex+0x15e>
      length++;
   }

for(i=length-1;i>=0;i--)
  {
    switch(rem[i])
   3e30c:	8b 30       	cpi	r24, 0x0B	; 11
   3e30e:	91 05       	cpc	r25, r1
   3e310:	a1 05       	cpc	r26, r1
   3e312:	b1 05       	cpc	r27, r1
   3e314:	51 f1       	breq	.+84     	; 0x3e36a <dec_hex+0x14c>
   3e316:	44 f4       	brge	.+16     	; 0x3e328 <dec_hex+0x10a>
   3e318:	89 30       	cpi	r24, 0x09	; 9
   3e31a:	91 05       	cpc	r25, r1
   3e31c:	a1 05       	cpc	r26, r1
   3e31e:	b1 05       	cpc	r27, r1
   3e320:	01 f1       	breq	.+64     	; 0x3e362 <dec_hex+0x144>
   3e322:	0c f5       	brge	.+66     	; 0x3e366 <dec_hex+0x148>
        break;
    case 7:
        sendchar('7');
        break;
    case 8:
        sendchar('8');
   3e324:	88 e3       	ldi	r24, 0x38	; 56
   3e326:	2a c0       	rjmp	.+84     	; 0x3e37c <dec_hex+0x15e>
      length++;
   }

for(i=length-1;i>=0;i--)
  {
    switch(rem[i])
   3e328:	8d 30       	cpi	r24, 0x0D	; 13
   3e32a:	91 05       	cpc	r25, r1
   3e32c:	a1 05       	cpc	r26, r1
   3e32e:	b1 05       	cpc	r27, r1
   3e330:	01 f1       	breq	.+64     	; 0x3e372 <dec_hex+0x154>
   3e332:	ec f0       	brlt	.+58     	; 0x3e36e <dec_hex+0x150>
   3e334:	8e 30       	cpi	r24, 0x0E	; 14
   3e336:	91 05       	cpc	r25, r1
   3e338:	a1 05       	cpc	r26, r1
   3e33a:	b1 05       	cpc	r27, r1
   3e33c:	e1 f0       	breq	.+56     	; 0x3e376 <dec_hex+0x158>
   3e33e:	0f 97       	sbiw	r24, 0x0f	; 15
   3e340:	a1 05       	cpc	r26, r1
   3e342:	b1 05       	cpc	r27, r1
   3e344:	d1 f4       	brne	.+52     	; 0x3e37a <dec_hex+0x15c>
          break;
      case 14:
    	  sendchar('E');
          break;
      case 15:
    	  sendchar('F');
   3e346:	86 e4       	ldi	r24, 0x46	; 70
   3e348:	19 c0       	rjmp	.+50     	; 0x3e37c <dec_hex+0x15e>
    {
    case 0:
        sendchar('0');
        break;
    case 1:
        sendchar('1');
   3e34a:	81 e3       	ldi	r24, 0x31	; 49
   3e34c:	17 c0       	rjmp	.+46     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 2:
        sendchar('2');
   3e34e:	82 e3       	ldi	r24, 0x32	; 50
   3e350:	15 c0       	rjmp	.+42     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 3:
        sendchar('3');
   3e352:	83 e3       	ldi	r24, 0x33	; 51
   3e354:	13 c0       	rjmp	.+38     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 4:
        sendchar('4');
        break;
    case 5:
        sendchar('5');
   3e356:	85 e3       	ldi	r24, 0x35	; 53
   3e358:	11 c0       	rjmp	.+34     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 6:
        sendchar('6');
   3e35a:	86 e3       	ldi	r24, 0x36	; 54
   3e35c:	0f c0       	rjmp	.+30     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 7:
        sendchar('7');
   3e35e:	87 e3       	ldi	r24, 0x37	; 55
   3e360:	0d c0       	rjmp	.+26     	; 0x3e37c <dec_hex+0x15e>
        break;
    case 8:
        sendchar('8');
        break;
    case 9:
        sendchar('9');
   3e362:	89 e3       	ldi	r24, 0x39	; 57
   3e364:	0b c0       	rjmp	.+22     	; 0x3e37c <dec_hex+0x15e>
        break;
      case 10:
          sendchar('A');
   3e366:	81 e4       	ldi	r24, 0x41	; 65
   3e368:	09 c0       	rjmp	.+18     	; 0x3e37c <dec_hex+0x15e>
          break;
      case 11:
    	  sendchar('B');
   3e36a:	82 e4       	ldi	r24, 0x42	; 66
   3e36c:	07 c0       	rjmp	.+14     	; 0x3e37c <dec_hex+0x15e>
          break;
      case 12:
    	  sendchar('C');
   3e36e:	83 e4       	ldi	r24, 0x43	; 67
   3e370:	05 c0       	rjmp	.+10     	; 0x3e37c <dec_hex+0x15e>
          break;
      case 13:
    	  sendchar('D');
   3e372:	84 e4       	ldi	r24, 0x44	; 68
   3e374:	03 c0       	rjmp	.+6      	; 0x3e37c <dec_hex+0x15e>
          break;
      case 14:
    	  sendchar('E');
   3e376:	85 e4       	ldi	r24, 0x45	; 69
   3e378:	01 c0       	rjmp	.+2      	; 0x3e37c <dec_hex+0x15e>
          break;
      case 15:
    	  sendchar('F');
          break;
      default :
         sendchar('X');
   3e37a:	88 e5       	ldi	r24, 0x58	; 88
   3e37c:	e0 de       	rcall	.-576    	; 0x3e13e <sendchar>
      num=num/16;
      i++;
      length++;
   }

for(i=length-1;i>=0;i--)
   3e37e:	81 e0       	ldi	r24, 0x01	; 1
   3e380:	c8 1a       	sub	r12, r24
   3e382:	d1 08       	sbc	r13, r1
   3e384:	e1 08       	sbc	r14, r1
   3e386:	f1 08       	sbc	r15, r1
   3e388:	8d cf       	rjmp	.-230    	; 0x3e2a4 <dec_hex+0x86>
      default :
         sendchar('X');
         break;
    }
  }
}
   3e38a:	c8 53       	subi	r28, 0x38	; 56
   3e38c:	df 4f       	sbci	r29, 0xFF	; 255
   3e38e:	0f b6       	in	r0, 0x3f	; 63
   3e390:	f8 94       	cli
   3e392:	de bf       	out	0x3e, r29	; 62
   3e394:	0f be       	out	0x3f, r0	; 63
   3e396:	cd bf       	out	0x3d, r28	; 61
   3e398:	df 91       	pop	r29
   3e39a:	cf 91       	pop	r28
   3e39c:	1f 91       	pop	r17
   3e39e:	0f 91       	pop	r16
   3e3a0:	ff 90       	pop	r15
   3e3a2:	ef 90       	pop	r14
   3e3a4:	df 90       	pop	r13
   3e3a6:	cf 90       	pop	r12
   3e3a8:	08 95       	ret

0003e3aa <PrintFromPROGMEM>:
const char gTextMsg_CPU_Name[] PROGMEM = "UNKNOWN";
#endif

//************************************************************************
void PrintFromPROGMEM(const void *dataPtr, unsigned char offset)
{
   3e3aa:	cf 93       	push	r28
   3e3ac:	df 93       	push	r29
	char theChar;

	dataPtr += offset;
   3e3ae:	ec 01       	movw	r28, r24
   3e3b0:	c6 0f       	add	r28, r22
   3e3b2:	d1 1d       	adc	r29, r1

	do {
#if (FLASHEND > 0x10000)
		theChar = pgm_read_byte_far((uint16_t)dataPtr++);
   3e3b4:	ae 01       	movw	r20, r28
   3e3b6:	60 e0       	ldi	r22, 0x00	; 0
   3e3b8:	70 e0       	ldi	r23, 0x00	; 0
   3e3ba:	6b bf       	out	0x3b, r22	; 59
   3e3bc:	fa 01       	movw	r30, r20
   3e3be:	87 91       	elpm	r24, Z+
#else
		theChar = pgm_read_byte_near((uint16_t)dataPtr++);
#endif
		if (theChar != 0)
   3e3c0:	88 23       	and	r24, r24
   3e3c2:	19 f0       	breq	.+6      	; 0x3e3ca <PrintFromPROGMEM+0x20>

	dataPtr += offset;

	do {
#if (FLASHEND > 0x10000)
		theChar = pgm_read_byte_far((uint16_t)dataPtr++);
   3e3c4:	21 96       	adiw	r28, 0x01	; 1
#else
		theChar = pgm_read_byte_near((uint16_t)dataPtr++);
#endif
		if (theChar != 0)
		{
			sendchar(theChar);
   3e3c6:	bb de       	rcall	.-650    	; 0x3e13e <sendchar>
   3e3c8:	f5 cf       	rjmp	.-22     	; 0x3e3b4 <PrintFromPROGMEM+0xa>
		}
	}while (theChar != 0);
}
   3e3ca:	df 91       	pop	r29
   3e3cc:	cf 91       	pop	r28
   3e3ce:	08 95       	ret

0003e3d0 <PrintNewLine>:

//************************************************************************
void PrintNewLine(void)
{
	sendchar(0x0d);
   3e3d0:	8d e0       	ldi	r24, 0x0D	; 13
   3e3d2:	b5 de       	rcall	.-662    	; 0x3e13e <sendchar>
	sendchar(0x0a);
   3e3d4:	8a e0       	ldi	r24, 0x0A	; 10
   3e3d6:	b3 ce       	rjmp	.-666    	; 0x3e13e <sendchar>

0003e3d8 <PrintFromPROGMEMln>:
}

//************************************************************************
void PrintFromPROGMEMln(const void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e3d8:	e8 df       	rcall	.-48     	; 0x3e3aa <PrintFromPROGMEM>

	PrintNewLine();
   3e3da:	fa cf       	rjmp	.-12     	; 0x3e3d0 <PrintNewLine>

0003e3dc <PrintString>:
}

//************************************************************************
void PrintString(char *textString)
{
   3e3dc:	cf 93       	push	r28
   3e3de:	df 93       	push	r29
   3e3e0:	ec 01       	movw	r28, r24

	theChar = 1;
	ii = 0;
	while (theChar != 0)
	{
		theChar = textString[ii];
   3e3e2:	89 91       	ld	r24, Y+
		if (theChar != 0)
   3e3e4:	88 23       	and	r24, r24
   3e3e6:	11 f0       	breq	.+4      	; 0x3e3ec <PrintString+0x10>
		{
			sendchar(theChar);
   3e3e8:	aa de       	rcall	.-684    	; 0x3e13e <sendchar>
   3e3ea:	fb cf       	rjmp	.-10     	; 0x3e3e2 <PrintString+0x6>
		}
		ii++;
	}
}
   3e3ec:	df 91       	pop	r29
   3e3ee:	cf 91       	pop	r28
   3e3f0:	08 95       	ret

0003e3f2 <PrintHexByte>:

//************************************************************************
void PrintHexByte(unsigned char theByte)
{
   3e3f2:	cf 93       	push	r28
   3e3f4:	c8 2f       	mov	r28, r24
	char theChar;

	theChar = 0x30 + ((theByte >> 4) & 0x0f);
   3e3f6:	82 95       	swap	r24
   3e3f8:	8f 70       	andi	r24, 0x0F	; 15
   3e3fa:	90 e3       	ldi	r25, 0x30	; 48
   3e3fc:	98 0f       	add	r25, r24
	if (theChar > 0x39)
   3e3fe:	9a 33       	cpi	r25, 0x3A	; 58
   3e400:	10 f0       	brcs	.+4      	; 0x3e406 <PrintHexByte+0x14>
	{
		theChar += 7;
   3e402:	97 e3       	ldi	r25, 0x37	; 55
   3e404:	98 0f       	add	r25, r24
	}
	sendchar(theChar );
   3e406:	89 2f       	mov	r24, r25
   3e408:	9a de       	rcall	.-716    	; 0x3e13e <sendchar>

	theChar = 0x30 + (theByte & 0x0f);
   3e40a:	cf 70       	andi	r28, 0x0F	; 15
   3e40c:	80 e3       	ldi	r24, 0x30	; 48
   3e40e:	8c 0f       	add	r24, r28
	if (theChar > 0x39)
   3e410:	8a 33       	cpi	r24, 0x3A	; 58
   3e412:	10 f0       	brcs	.+4      	; 0x3e418 <PrintHexByte+0x26>
	{
		theChar += 7;
   3e414:	87 e3       	ldi	r24, 0x37	; 55
   3e416:	8c 0f       	add	r24, r28
	}
	sendchar(theChar );
}
   3e418:	cf 91       	pop	r28
	theChar = 0x30 + (theByte & 0x0f);
	if (theChar > 0x39)
	{
		theChar += 7;
	}
	sendchar(theChar );
   3e41a:	91 ce       	rjmp	.-734    	; 0x3e13e <sendchar>

0003e41c <PrintDecInt>:
}

//************************************************************************
void PrintDecInt(int theNumber, int digitCnt)
{
   3e41c:	0f 93       	push	r16
   3e41e:	1f 93       	push	r17
   3e420:	cf 93       	push	r28
   3e422:	df 93       	push	r29
   3e424:	ec 01       	movw	r28, r24
   3e426:	8b 01       	movw	r16, r22
	int theChar;
	int myNumber;

	myNumber = theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e428:	85 36       	cpi	r24, 0x65	; 101
   3e42a:	91 05       	cpc	r25, r1
   3e42c:	1c f4       	brge	.+6      	; 0x3e434 <PrintDecInt+0x18>
   3e42e:	63 30       	cpi	r22, 0x03	; 3
   3e430:	71 05       	cpc	r23, r1
   3e432:	3c f0       	brlt	.+14     	; 0x3e442 <PrintDecInt+0x26>
	{
		theChar = 0x30 + myNumber / 100;
   3e434:	ce 01       	movw	r24, r28
   3e436:	64 e6       	ldi	r22, 0x64	; 100
   3e438:	70 e0       	ldi	r23, 0x00	; 0
   3e43a:	6c d4       	rcall	.+2264   	; 0x3ed14 <__divmodhi4>
		sendchar(theChar );
   3e43c:	80 e3       	ldi	r24, 0x30	; 48
   3e43e:	86 0f       	add	r24, r22
   3e440:	7e de       	rcall	.-772    	; 0x3e13e <sendchar>
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e442:	cb 30       	cpi	r28, 0x0B	; 11
   3e444:	d1 05       	cpc	r29, r1
   3e446:	1c f4       	brge	.+6      	; 0x3e44e <PrintDecInt+0x32>
   3e448:	02 30       	cpi	r16, 0x02	; 2
   3e44a:	11 05       	cpc	r17, r1
   3e44c:	54 f0       	brlt	.+20     	; 0x3e462 <PrintDecInt+0x46>
	{
		theChar = 0x30 + ((myNumber % 100) / 10 );
   3e44e:	ce 01       	movw	r24, r28
   3e450:	64 e6       	ldi	r22, 0x64	; 100
   3e452:	70 e0       	ldi	r23, 0x00	; 0
   3e454:	5f d4       	rcall	.+2238   	; 0x3ed14 <__divmodhi4>
   3e456:	6a e0       	ldi	r22, 0x0A	; 10
   3e458:	70 e0       	ldi	r23, 0x00	; 0
   3e45a:	5c d4       	rcall	.+2232   	; 0x3ed14 <__divmodhi4>
		sendchar(theChar );
   3e45c:	80 e3       	ldi	r24, 0x30	; 48
   3e45e:	86 0f       	add	r24, r22
   3e460:	6e de       	rcall	.-804    	; 0x3e13e <sendchar>
	}
	theChar = 0x30 + (myNumber % 10);
   3e462:	ce 01       	movw	r24, r28
   3e464:	6a e0       	ldi	r22, 0x0A	; 10
   3e466:	70 e0       	ldi	r23, 0x00	; 0
   3e468:	55 d4       	rcall	.+2218   	; 0x3ed14 <__divmodhi4>
	sendchar(theChar );
   3e46a:	80 5d       	subi	r24, 0xD0	; 208
}
   3e46c:	df 91       	pop	r29
   3e46e:	cf 91       	pop	r28
   3e470:	1f 91       	pop	r17
   3e472:	0f 91       	pop	r16
	{
		theChar = 0x30 + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar = 0x30 + (myNumber % 10);
	sendchar(theChar );
   3e474:	64 ce       	rjmp	.-824    	; 0x3e13e <sendchar>

0003e476 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
   3e476:	20 9a       	sbi	0x04, 0	; 4
	sbi	DDR_DI		; DI: output
   3e478:	22 9a       	sbi	0x04, 2	; 4
	sbi	DDR_CK		; SCLK: output
   3e47a:	21 9a       	sbi	0x04, 1	; 4
	sbi	PORT_DO		; DO: pull-up
   3e47c:	2b 9a       	sbi	0x05, 3	; 5
	ret
   3e47e:	08 95       	ret

0003e480 <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(16000000 / 100000)	/* Loop counter */
   3e480:	80 ea       	ldi	r24, 0xA0	; 160
1:	sbiw	r30, 1		/* 10 clocks per loop */
   3e482:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
   3e484:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
   3e486:	31 97       	sbiw	r30, 0x01	; 1
	nop
   3e488:	00 00       	nop
	dec	r24
   3e48a:	8a 95       	dec	r24
	brne	1b
   3e48c:	d1 f7       	brne	.-12     	; 0x3e482 <dly_100us+0x2>
	ret
   3e48e:	08 95       	ret

0003e490 <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
   3e490:	02 d0       	rcall	.+4      	; 0x3e496 <deselect>
	cbi	PORT_CS
   3e492:	28 98       	cbi	0x05, 0	; 5
	rjmp	rcv_spi
   3e494:	01 c0       	rjmp	.+2      	; 0x3e498 <rcv_spi>

0003e496 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
   3e496:	28 9a       	sbi	0x05, 0	; 5

0003e498 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
   3e498:	8f ef       	ldi	r24, 0xFF	; 255

0003e49a <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
   3e49a:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
   3e49c:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
   3e49e:	2a 9a       	sbi	0x05, 2	; 5
	sbrs	r24, 7		; 
   3e4a0:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
   3e4a2:	2a 98       	cbi	0x05, 2	; 5
	lsl	r24		; Get DO from MMC
   3e4a4:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
   3e4a6:	1b 99       	sbic	0x03, 3	; 3
	inc	r24		; /
   3e4a8:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
   3e4aa:	29 9a       	sbi	0x05, 1	; 5
	cbi	PORT_CK		; /
   3e4ac:	29 98       	cbi	0x05, 1	; 5
	dec	r25		; Repeat 8 times
   3e4ae:	9a 95       	dec	r25
	brne	1b		; /
   3e4b0:	a9 f7       	brne	.-22     	; 0x3e49c <xmit_spi+0x2>
	ret
   3e4b2:	08 95       	ret

0003e4b4 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
   3e4b4:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3e4b6:	8b bf       	out	0x3b, r24	; 59
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
   3e4b8:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e4ba:	80 93 57 00 	sts	0x0057, r24
	spm
   3e4be:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3e4c0:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3e4c4:	80 fd       	sbrc	r24, 0
	rjmp	1b
   3e4c6:	fc cf       	rjmp	.-8      	; 0x3e4c0 <flash_erase+0xc>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3e4c8:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e4ca:	80 93 57 00 	sts	0x0057, r24
	spm
   3e4ce:	e8 95       	spm

9:	ret
   3e4d0:	08 95       	ret

0003e4d2 <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
   3e4d2:	0f 92       	push	r0
	push	r1
   3e4d4:	1f 92       	push	r1

#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3e4d6:	8b bf       	out	0x3b, r24	; 59
#endif

	; Fill page buffer
	movw	ZL, r22
   3e4d8:	fb 01       	movw	r30, r22
	movw	XL, r20
   3e4da:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
   3e4dc:	90 e8       	ldi	r25, 0x80	; 128
1:	ld	r0, X+
   3e4de:	0d 90       	ld	r0, X+
	ld	r1, X+
   3e4e0:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
   3e4e2:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e4e4:	80 93 57 00 	sts	0x0057, r24
	spm
   3e4e8:	e8 95       	spm
	adiw	ZL, 2
   3e4ea:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
   3e4ec:	9a 95       	dec	r25
	brne	1b
   3e4ee:	b9 f7       	brne	.-18     	; 0x3e4de <flash_write+0xc>

	; Initiate write operation
	movw	ZL, r22
   3e4f0:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
   3e4f2:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e4f4:	80 93 57 00 	sts	0x0057, r24
	spm
   3e4f8:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3e4fa:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3e4fe:	80 fd       	sbrc	r24, 0
	rjmp	2b
   3e500:	fc cf       	rjmp	.-8      	; 0x3e4fa <flash_write+0x28>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3e502:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e504:	80 93 57 00 	sts	0x0057, r24
	spm
   3e508:	e8 95       	spm

9:	pop	r1
   3e50a:	1f 90       	pop	r1
	pop	r0
   3e50c:	0f 90       	pop	r0
	ret
   3e50e:	08 95       	ret

0003e510 <main>:
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3e510:	cf 93       	push	r28
   3e512:	df 93       	push	r29
   3e514:	cd b7       	in	r28, 0x3d	; 61
   3e516:	de b7       	in	r29, 0x3e	; 62
   3e518:	c9 52       	subi	r28, 0x29	; 41
   3e51a:	d1 40       	sbci	r29, 0x01	; 1
   3e51c:	0f b6       	in	r0, 0x3f	; 63
   3e51e:	f8 94       	cli
   3e520:	de bf       	out	0x3e, r29	; 62
   3e522:	0f be       	out	0x3f, r0	; 63
   3e524:	cd bf       	out	0x3d, r28	; 61

	setDataMode(0x00);
   3e526:	80 e0       	ldi	r24, 0x00	; 0
   3e528:	1c de       	rcall	.-968    	; 0x3e162 <setDataMode>
	setBitOrder(1);
   3e52a:	81 e0       	ldi	r24, 0x01	; 1
   3e52c:	1f de       	rcall	.-962    	; 0x3e16c <setBitOrder>
	setClockDivider(0x04);
   3e52e:	84 e0       	ldi	r24, 0x04	; 4
   3e530:	26 de       	rcall	.-948    	; 0x3e17e <setClockDivider>

	SPI_PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS) | _BV(LED1) | _BV(LED2) | _BV(LED3);
   3e532:	8e ef       	ldi	r24, 0xFE	; 254
   3e534:	85 b9       	out	0x05, r24	; 5
	SPI_DDRB = _BV(SCK) | _BV(MOSI) |_BV(SS) | _BV(LED1) | _BV(LED2) | _BV(LED3);
   3e536:	86 ef       	ldi	r24, 0xF6	; 246
   3e538:	84 b9       	out	0x04, r24	; 4
	
	LED1_LOW();
   3e53a:	2d 98       	cbi	0x05, 5	; 5
	LED2_LOW();
   3e53c:	2e 98       	cbi	0x05, 6	; 5
	LED3_LOW();
   3e53e:	2f 98       	cbi	0x05, 7	; 5
	
	SS_HIGH();
   3e540:	2c 9a       	sbi	0x05, 4	; 5
	SS_MASTER_HIGH();
   3e542:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(MSTR);
   3e544:	8c b5       	in	r24, 0x2c	; 44
   3e546:	80 61       	ori	r24, 0x10	; 16
   3e548:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPE);
   3e54a:	8c b5       	in	r24, 0x2c	; 44
   3e54c:	80 64       	ori	r24, 0x40	; 64
   3e54e:	8c bd       	out	0x2c, r24	; 44
	unsigned int rcvdCharCntr = 0;
#endif

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e550:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e552:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e554:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e556:	0d bf       	out	0x3d, r16	; 61
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t mcuStatusReg;
	mcuStatusReg = MCUSR;
   3e558:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   3e55a:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3e55c:	a8 95       	wdr
	MCUSR = 0;
   3e55e:	14 be       	out	0x34, r1	; 52
	WDTCSR |= _BV(WDCE) | _BV(WDE);
   3e560:	80 91 60 00 	lds	r24, 0x0060
   3e564:	88 61       	ori	r24, 0x18	; 24
   3e566:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = 0;
   3e56a:	10 92 60 00 	sts	0x0060, r1
	__asm__ __volatile__ ("sei");
   3e56e:	78 94       	sei

	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF)) {
   3e570:	93 ff       	sbrs	r25, 3
   3e572:	05 c0       	rjmp	.+10     	; 0x3e57e <main+0x6e>
		app_start();
   3e574:	e0 91 04 02 	lds	r30, 0x0204
   3e578:	f0 91 05 02 	lds	r31, 0x0205
   3e57c:	19 95       	eicall
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG |= (1 << UART_DOUBLE_SPEED);
   3e57e:	80 91 c0 00 	lds	r24, 0x00C0
   3e582:	82 60       	ori	r24, 0x02	; 2
   3e584:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW = UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e588:	80 e1       	ldi	r24, 0x10	; 16
   3e58a:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG = (1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e58e:	88 e1       	ldi	r24, 0x18	; 24
   3e590:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");
   3e594:	00 00       	nop
		app_start();
	}
	//************************************************************************
#endif

	boot_timer = 0;
   3e596:	80 e0       	ldi	r24, 0x00	; 0
   3e598:	90 e0       	ldi	r25, 0x00	; 0
   3e59a:	dc 01       	movw	r26, r24
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3e59c:	40 e0       	ldi	r20, 0x00	; 0
   3e59e:	50 e0       	ldi	r21, 0x00	; 0
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE); // delete TXCflag
}

//************************************************************************
static int Serial_Available(void) {
	return (UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)); // wait for data
   3e5a0:	20 91 c0 00 	lds	r18, 0x00C0
//    sendchar(0x0d);
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state == 0) {
		while ((!(Serial_Available())) && (boot_state == 0)) // wait for data
   3e5a4:	27 ff       	sbrs	r18, 7
   3e5a6:	06 c0       	rjmp	.+12     	; 0x3e5b4 <main+0xa4>
#endif
		}
		/* PROG_PIN pulled low, indicate with LED that bootloader is active */
		//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
		// SDCARD BOOTLOADER
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
   3e5a8:	4f 5f       	subi	r20, 0xFF	; 255
   3e5aa:	5f 4f       	sbci	r21, 0xFF	; 255
//    sendchar('.');
//    sendchar(0x0d);
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state == 0) {
   3e5ac:	41 15       	cp	r20, r1
   3e5ae:	51 05       	cpc	r21, r1
   3e5b0:	a9 f3       	breq	.-22     	; 0x3e59c <main+0x8c>
   3e5b2:	17 c0       	rjmp	.+46     	; 0x3e5e2 <main+0xd2>
		while ((!(Serial_Available())) && (boot_state == 0)) // wait for data
   3e5b4:	41 15       	cp	r20, r1
   3e5b6:	51 05       	cpc	r21, r1
   3e5b8:	b9 f7       	brne	.-18     	; 0x3e5a8 <main+0x98>
   3e5ba:	25 e0       	ldi	r18, 0x05	; 5
   3e5bc:	2a 95       	dec	r18
   3e5be:	f1 f7       	brne	.-4      	; 0x3e5bc <main+0xac>
   3e5c0:	00 00       	nop
		{
			_delay_ms(0.001);
			boot_timer++;
   3e5c2:	01 96       	adiw	r24, 0x01	; 1
   3e5c4:	a1 1d       	adc	r26, r1
   3e5c6:	b1 1d       	adc	r27, r1
			if (boot_timer > boot_timeout) {
   3e5c8:	31 e0       	ldi	r19, 0x01	; 1
   3e5ca:	20 e0       	ldi	r18, 0x00	; 0
   3e5cc:	81 3a       	cpi	r24, 0xA1	; 161
   3e5ce:	46 e8       	ldi	r20, 0x86	; 134
   3e5d0:	94 07       	cpc	r25, r20
   3e5d2:	41 e0       	ldi	r20, 0x01	; 1
   3e5d4:	a4 07       	cpc	r26, r20
   3e5d6:	b1 05       	cpc	r27, r1
   3e5d8:	08 f4       	brcc	.+2      	; 0x3e5dc <main+0xcc>
   3e5da:	30 e0       	ldi	r19, 0x00	; 0
				boot_state = 1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e5dc:	43 2f       	mov	r20, r19
   3e5de:	52 2f       	mov	r21, r18
   3e5e0:	df cf       	rjmp	.-66     	; 0x3e5a0 <main+0x90>
		//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
		// SDCARD BOOTLOADER
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}

	if (boot_state == 1) {
   3e5e2:	41 30       	cpi	r20, 0x01	; 1
   3e5e4:	51 05       	cpc	r21, r1
   3e5e6:	09 f0       	breq	.+2      	; 0x3e5ea <main+0xda>
   3e5e8:	d9 c2       	rjmp	.+1458   	; 0x3eb9c <main+0x68c>
   3e5ea:	ce 5d       	subi	r28, 0xDE	; 222
   3e5ec:	de 4f       	sbci	r29, 0xFE	; 254
   3e5ee:	19 82       	std	Y+1, r1	; 0x01
   3e5f0:	18 82       	st	Y, r1
   3e5f2:	c2 52       	subi	r28, 0x22	; 34
   3e5f4:	d1 40       	sbci	r29, 0x01	; 1
   3e5f6:	c8 5d       	subi	r28, 0xD8	; 216
   3e5f8:	de 4f       	sbci	r29, 0xFE	; 254
   3e5fa:	19 82       	std	Y+1, r1	; 0x01
   3e5fc:	18 82       	st	Y, r1
   3e5fe:	c8 52       	subi	r28, 0x28	; 40
   3e600:	d1 40       	sbci	r29, 0x01	; 1
   3e602:	c0 5e       	subi	r28, 0xE0	; 224
   3e604:	de 4f       	sbci	r29, 0xFE	; 254
   3e606:	18 82       	st	Y, r1
   3e608:	c0 52       	subi	r28, 0x20	; 32
   3e60a:	d1 40       	sbci	r29, 0x01	; 1
   3e60c:	31 2c       	mov	r3, r1
   3e60e:	c2 5e       	subi	r28, 0xE2	; 226
   3e610:	de 4f       	sbci	r29, 0xFE	; 254
   3e612:	19 82       	std	Y+1, r1	; 0x01
   3e614:	18 82       	st	Y, r1
   3e616:	ce 51       	subi	r28, 0x1E	; 30
   3e618:	d1 40       	sbci	r29, 0x01	; 1
   3e61a:	c1 2c       	mov	r12, r1
   3e61c:	d1 2c       	mov	r13, r1
   3e61e:	76 01       	movw	r14, r12
   3e620:	41 2c       	mov	r4, r1
   3e622:	51 2c       	mov	r5, r1
   3e624:	32 01       	movw	r6, r4
		app_start();
	}
	//************************************************************************
#endif

	boot_timer = 0;
   3e626:	20 e0       	ldi	r18, 0x00	; 0
   3e628:	30 e0       	ldi	r19, 0x00	; 0
   3e62a:	80 e0       	ldi	r24, 0x00	; 0
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState = ST_START;
			while (msgParseState != ST_PROCESS) {
				if (boot_state == 1) {
   3e62c:	41 30       	cpi	r20, 0x01	; 1
   3e62e:	51 05       	cpc	r21, r1
   3e630:	f9 f0       	breq	.+62     	; 0x3e670 <main+0x160>
#if (FLASHEND > 0x10000)
			data = pgm_read_word_far(0); //*	get the first word of the user program
#else
			data = pgm_read_word_near(0); //*	get the first word of the user program
#endif
			if (data != 0xffff) //*	make sure its valid before jumping to it.
   3e632:	40 e0       	ldi	r20, 0x00	; 0
   3e634:	50 e0       	ldi	r21, 0x00	; 0
   3e636:	ba 01       	movw	r22, r20
#define	MAX_TIME_COUNT	(F_CPU >> 1)
//*****************************************************************************
static unsigned char recchar_timeout(void) {
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE))) {
   3e638:	90 91 c0 00 	lds	r25, 0x00C0
   3e63c:	97 fd       	sbrc	r25, 7
   3e63e:	18 c0       	rjmp	.+48     	; 0x3e670 <main+0x160>
		// wait for data
		count++;
   3e640:	4f 5f       	subi	r20, 0xFF	; 255
   3e642:	5f 4f       	sbci	r21, 0xFF	; 255
   3e644:	6f 4f       	sbci	r22, 0xFF	; 255
   3e646:	7f 4f       	sbci	r23, 0xFF	; 255
		if (count > MAX_TIME_COUNT) {
   3e648:	41 30       	cpi	r20, 0x01	; 1
   3e64a:	92 e1       	ldi	r25, 0x12	; 18
   3e64c:	59 07       	cpc	r21, r25
   3e64e:	9a e7       	ldi	r25, 0x7A	; 122
   3e650:	69 07       	cpc	r22, r25
   3e652:	71 05       	cpc	r23, r1
   3e654:	88 f3       	brcs	.-30     	; 0x3e638 <main+0x128>
			unsigned int data;
#if (FLASHEND > 0x10000)
			data = pgm_read_word_far(0); //*	get the first word of the user program
   3e656:	81 2c       	mov	r8, r1
   3e658:	91 2c       	mov	r9, r1
   3e65a:	54 01       	movw	r10, r8
   3e65c:	ab be       	out	0x3b, r10	; 59
   3e65e:	f4 01       	movw	r30, r8
   3e660:	a7 91       	elpm	r26, Z+
   3e662:	b6 91       	elpm	r27, Z
#else
			data = pgm_read_word_near(0); //*	get the first word of the user program
#endif
			if (data != 0xffff) //*	make sure its valid before jumping to it.
   3e664:	11 96       	adiw	r26, 0x01	; 1
   3e666:	29 f3       	breq	.-54     	; 0x3e632 <main+0x122>
					{
				asm volatile(
   3e668:	ee 27       	eor	r30, r30
   3e66a:	ff 27       	eor	r31, r31
   3e66c:	09 94       	ijmp
   3e66e:	e1 cf       	rjmp	.-62     	; 0x3e632 <main+0x122>
				);
			}
			count = 0;
		}
	}
	return UART_DATA_REG;
   3e670:	90 91 c6 00 	lds	r25, 0x00C6
					c = recchar_timeout();

				}

#ifdef ENABLE_MONITOR
				rcvdCharCntr++;
   3e674:	ce 5d       	subi	r28, 0xDE	; 222
   3e676:	de 4f       	sbci	r29, 0xFE	; 254
   3e678:	48 81       	ld	r20, Y
   3e67a:	59 81       	ldd	r21, Y+1	; 0x01
   3e67c:	c2 52       	subi	r28, 0x22	; 34
   3e67e:	d1 40       	sbci	r29, 0x01	; 1
   3e680:	4f 5f       	subi	r20, 0xFF	; 255
   3e682:	5f 4f       	sbci	r21, 0xFF	; 255
   3e684:	ce 5d       	subi	r28, 0xDE	; 222
   3e686:	de 4f       	sbci	r29, 0xFE	; 254
   3e688:	59 83       	std	Y+1, r21	; 0x01
   3e68a:	48 83       	st	Y, r20
   3e68c:	c2 52       	subi	r28, 0x22	; 34
   3e68e:	d1 40       	sbci	r29, 0x01	; 1

				if ((c == '!') && (rcvdCharCntr < 10))
   3e690:	91 32       	cpi	r25, 0x21	; 33
   3e692:	a9 f4       	brne	.+42     	; 0x3e6be <main+0x1ae>
   3e694:	4a 30       	cpi	r20, 0x0A	; 10
   3e696:	51 05       	cpc	r21, r1
   3e698:	90 f4       	brcc	.+36     	; 0x3e6be <main+0x1ae>
				{
					exPointCntr++;
   3e69a:	c8 5d       	subi	r28, 0xD8	; 216
   3e69c:	de 4f       	sbci	r29, 0xFE	; 254
   3e69e:	48 81       	ld	r20, Y
   3e6a0:	59 81       	ldd	r21, Y+1	; 0x01
   3e6a2:	c8 52       	subi	r28, 0x28	; 40
   3e6a4:	d1 40       	sbci	r29, 0x01	; 1
   3e6a6:	4f 5f       	subi	r20, 0xFF	; 255
   3e6a8:	5f 4f       	sbci	r21, 0xFF	; 255
   3e6aa:	c8 5d       	subi	r28, 0xD8	; 216
   3e6ac:	de 4f       	sbci	r29, 0xFE	; 254
   3e6ae:	59 83       	std	Y+1, r21	; 0x01
   3e6b0:	48 83       	st	Y, r20
   3e6b2:	c8 52       	subi	r28, 0x28	; 40
   3e6b4:	d1 40       	sbci	r29, 0x01	; 1
					if (exPointCntr == 3)
   3e6b6:	43 30       	cpi	r20, 0x03	; 3
   3e6b8:	51 05       	cpc	r21, r1
   3e6ba:	39 f4       	brne	.+14     	; 0x3e6ca <main+0x1ba>
   3e6bc:	61 c0       	rjmp	.+194    	; 0x3e780 <main+0x270>
						break;
					}
				}
				else
				{
					exPointCntr = 0;
   3e6be:	c8 5d       	subi	r28, 0xD8	; 216
   3e6c0:	de 4f       	sbci	r29, 0xFE	; 254
   3e6c2:	19 82       	std	Y+1, r1	; 0x01
   3e6c4:	18 82       	st	Y, r1
   3e6c6:	c8 52       	subi	r28, 0x28	; 40
   3e6c8:	d1 40       	sbci	r29, 0x01	; 1
				}
#endif

				switch (msgParseState) {
   3e6ca:	83 30       	cpi	r24, 0x03	; 3
   3e6cc:	09 f1       	breq	.+66     	; 0x3e710 <main+0x200>
   3e6ce:	20 f4       	brcc	.+8      	; 0x3e6d8 <main+0x1c8>
   3e6d0:	81 30       	cpi	r24, 0x01	; 1
   3e6d2:	79 f0       	breq	.+30     	; 0x3e6f2 <main+0x1e2>
   3e6d4:	40 f0       	brcs	.+16     	; 0x3e6e6 <main+0x1d6>
   3e6d6:	15 c0       	rjmp	.+42     	; 0x3e702 <main+0x1f2>
   3e6d8:	85 30       	cpi	r24, 0x05	; 5
   3e6da:	51 f1       	breq	.+84     	; 0x3e730 <main+0x220>
   3e6dc:	e8 f0       	brcs	.+58     	; 0x3e718 <main+0x208>
   3e6de:	86 30       	cpi	r24, 0x06	; 6
   3e6e0:	09 f4       	brne	.+2      	; 0x3e6e4 <main+0x1d4>
   3e6e2:	47 c0       	rjmp	.+142    	; 0x3e772 <main+0x262>
   3e6e4:	49 c0       	rjmp	.+146    	; 0x3e778 <main+0x268>
				case ST_START:
					if (c == MESSAGE_START) {
   3e6e6:	9b 31       	cpi	r25, 0x1B	; 27
   3e6e8:	09 f4       	brne	.+2      	; 0x3e6ec <main+0x1dc>
   3e6ea:	06 c3       	rjmp	.+1548   	; 0x3ecf8 <main+0x7e8>
   3e6ec:	40 e0       	ldi	r20, 0x00	; 0
   3e6ee:	50 e0       	ldi	r21, 0x00	; 0
   3e6f0:	9d cf       	rjmp	.-198    	; 0x3e62c <main+0x11c>

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum = c;
					msgParseState = ST_MSG_SIZE_1;
					checksum ^= c;
   3e6f2:	39 26       	eor	r3, r25
					else
					{
						msgParseState = ST_START;
					}
#endif
					break;
   3e6f4:	c0 5e       	subi	r28, 0xE0	; 224
   3e6f6:	de 4f       	sbci	r29, 0xFE	; 254
   3e6f8:	98 83       	st	Y, r25
   3e6fa:	c0 52       	subi	r28, 0x20	; 32
   3e6fc:	d1 40       	sbci	r29, 0x01	; 1
					break;

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum = c;
					msgParseState = ST_MSG_SIZE_1;
   3e6fe:	82 e0       	ldi	r24, 0x02	; 2
					else
					{
						msgParseState = ST_START;
					}
#endif
					break;
   3e700:	f5 cf       	rjmp	.-22     	; 0x3e6ec <main+0x1dc>

				case ST_MSG_SIZE_1:
					msgLength = c << 8;
   3e702:	29 2f       	mov	r18, r25
   3e704:	30 e0       	ldi	r19, 0x00	; 0
   3e706:	32 2f       	mov	r19, r18
   3e708:	22 27       	eor	r18, r18
					msgParseState = ST_MSG_SIZE_2;
					checksum ^= c;
   3e70a:	39 26       	eor	r3, r25
#endif
					break;

				case ST_MSG_SIZE_1:
					msgLength = c << 8;
					msgParseState = ST_MSG_SIZE_2;
   3e70c:	83 e0       	ldi	r24, 0x03	; 3
					checksum ^= c;
					break;
   3e70e:	ee cf       	rjmp	.-36     	; 0x3e6ec <main+0x1dc>

				case ST_MSG_SIZE_2:
					msgLength |= c;
   3e710:	29 2b       	or	r18, r25
					msgParseState = ST_GET_TOKEN;
					checksum ^= c;
   3e712:	39 26       	eor	r3, r25
					checksum ^= c;
					break;

				case ST_MSG_SIZE_2:
					msgLength |= c;
					msgParseState = ST_GET_TOKEN;
   3e714:	84 e0       	ldi	r24, 0x04	; 4
					checksum ^= c;
					break;
   3e716:	ea cf       	rjmp	.-44     	; 0x3e6ec <main+0x1dc>

				case ST_GET_TOKEN:
					if (c == TOKEN) {
   3e718:	9e 30       	cpi	r25, 0x0E	; 14
   3e71a:	09 f0       	breq	.+2      	; 0x3e71e <main+0x20e>
   3e71c:	f1 c2       	rjmp	.+1506   	; 0x3ed00 <main+0x7f0>
						msgParseState = ST_GET_DATA;
						checksum ^= c;
   3e71e:	39 26       	eor	r3, r25
						ii = 0;
   3e720:	c2 5e       	subi	r28, 0xE2	; 226
   3e722:	de 4f       	sbci	r29, 0xFE	; 254
   3e724:	19 82       	std	Y+1, r1	; 0x01
   3e726:	18 82       	st	Y, r1
   3e728:	ce 51       	subi	r28, 0x1E	; 30
   3e72a:	d1 40       	sbci	r29, 0x01	; 1
					checksum ^= c;
					break;

				case ST_GET_TOKEN:
					if (c == TOKEN) {
						msgParseState = ST_GET_DATA;
   3e72c:	85 e0       	ldi	r24, 0x05	; 5
   3e72e:	de cf       	rjmp	.-68     	; 0x3e6ec <main+0x1dc>
						msgParseState = ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++] = c;
   3e730:	c2 5e       	subi	r28, 0xE2	; 226
   3e732:	de 4f       	sbci	r29, 0xFE	; 254
   3e734:	48 81       	ld	r20, Y
   3e736:	59 81       	ldd	r21, Y+1	; 0x01
   3e738:	ce 51       	subi	r28, 0x1E	; 30
   3e73a:	d1 40       	sbci	r29, 0x01	; 1
   3e73c:	4f 5f       	subi	r20, 0xFF	; 255
   3e73e:	5f 4f       	sbci	r21, 0xFF	; 255
   3e740:	e1 e0       	ldi	r30, 0x01	; 1
   3e742:	f0 e0       	ldi	r31, 0x00	; 0
   3e744:	ec 0f       	add	r30, r28
   3e746:	fd 1f       	adc	r31, r29
   3e748:	c2 5e       	subi	r28, 0xE2	; 226
   3e74a:	de 4f       	sbci	r29, 0xFE	; 254
   3e74c:	88 80       	ld	r8, Y
   3e74e:	99 80       	ldd	r9, Y+1	; 0x01
   3e750:	ce 51       	subi	r28, 0x1E	; 30
   3e752:	d1 40       	sbci	r29, 0x01	; 1
   3e754:	e8 0d       	add	r30, r8
   3e756:	f9 1d       	adc	r31, r9
   3e758:	90 83       	st	Z, r25
					checksum ^= c;
   3e75a:	39 26       	eor	r3, r25
					if (ii == msgLength) {
   3e75c:	42 17       	cp	r20, r18
   3e75e:	53 07       	cpc	r21, r19
   3e760:	09 f4       	brne	.+2      	; 0x3e764 <main+0x254>
   3e762:	d0 c2       	rjmp	.+1440   	; 0x3ed04 <main+0x7f4>
   3e764:	c2 5e       	subi	r28, 0xE2	; 226
   3e766:	de 4f       	sbci	r29, 0xFE	; 254
   3e768:	59 83       	std	Y+1, r21	; 0x01
   3e76a:	48 83       	st	Y, r20
   3e76c:	ce 51       	subi	r28, 0x1E	; 30
   3e76e:	d1 40       	sbci	r29, 0x01	; 1
   3e770:	bd cf       	rjmp	.-134    	; 0x3e6ec <main+0x1dc>
						msgParseState = ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if (c == checksum) {
   3e772:	93 11       	cpse	r25, r3
   3e774:	c5 c2       	rjmp	.+1418   	; 0x3ed00 <main+0x7f0>
   3e776:	11 c0       	rjmp	.+34     	; 0x3e79a <main+0x28a>
		while (!isLeave) {
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState = ST_START;
			while (msgParseState != ST_PROCESS) {
   3e778:	87 30       	cpi	r24, 0x07	; 7
   3e77a:	09 f0       	breq	.+2      	; 0x3e77e <main+0x26e>
   3e77c:	b7 cf       	rjmp	.-146    	; 0x3e6ec <main+0x1dc>
   3e77e:	0d c0       	rjmp	.+26     	; 0x3e79a <main+0x28a>
				if ((c == '!') && (rcvdCharCntr < 10))
				{
					exPointCntr++;
					if (exPointCntr == 3)
					{
						exPointCntr = 0; //	reset back to zero so we dont get in an endless loop
   3e780:	c8 5d       	subi	r28, 0xD8	; 216
   3e782:	de 4f       	sbci	r29, 0xFE	; 254
   3e784:	19 82       	std	Y+1, r1	; 0x01
   3e786:	18 82       	st	Y, r1
   3e788:	c8 52       	subi	r28, 0x28	; 40
   3e78a:	d1 40       	sbci	r29, 0x01	; 1
						isLeave = 1;
   3e78c:	21 e0       	ldi	r18, 0x01	; 1
   3e78e:	cf 5d       	subi	r28, 0xDF	; 223
   3e790:	de 4f       	sbci	r29, 0xFE	; 254
   3e792:	28 83       	st	Y, r18
   3e794:	c1 52       	subi	r28, 0x21	; 33
   3e796:	d1 40       	sbci	r29, 0x01	; 1
   3e798:	05 c0       	rjmp	.+10     	; 0x3e7a4 <main+0x294>
   3e79a:	cf 5d       	subi	r28, 0xDF	; 223
   3e79c:	de 4f       	sbci	r29, 0xFE	; 254
   3e79e:	18 82       	st	Y, r1
   3e7a0:	c1 52       	subi	r28, 0x21	; 33
   3e7a2:	d1 40       	sbci	r29, 0x01	; 1

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0]) {
   3e7a4:	29 81       	ldd	r18, Y+1	; 0x01
   3e7a6:	23 31       	cpi	r18, 0x13	; 19
   3e7a8:	09 f4       	brne	.+2      	; 0x3e7ac <main+0x29c>
   3e7aa:	dc c0       	rjmp	.+440    	; 0x3e964 <main+0x454>
   3e7ac:	60 f5       	brcc	.+88     	; 0x3e806 <main+0x2f6>
   3e7ae:	26 30       	cpi	r18, 0x06	; 6
   3e7b0:	09 f4       	brne	.+2      	; 0x3e7b4 <main+0x2a4>
   3e7b2:	c5 c0       	rjmp	.+394    	; 0x3e93e <main+0x42e>
   3e7b4:	f8 f4       	brcc	.+62     	; 0x3e7f4 <main+0x2e4>
   3e7b6:	22 30       	cpi	r18, 0x02	; 2
   3e7b8:	09 f4       	brne	.+2      	; 0x3e7bc <main+0x2ac>
   3e7ba:	d2 c0       	rjmp	.+420    	; 0x3e960 <main+0x450>
   3e7bc:	23 30       	cpi	r18, 0x03	; 3
   3e7be:	09 f4       	brne	.+2      	; 0x3e7c2 <main+0x2b2>
   3e7c0:	64 c0       	rjmp	.+200    	; 0x3e88a <main+0x37a>
   3e7c2:	21 30       	cpi	r18, 0x01	; 1
   3e7c4:	09 f0       	breq	.+2      	; 0x3e7c8 <main+0x2b8>
   3e7c6:	a7 c1       	rjmp	.+846    	; 0x3eb16 <main+0x606>
			}
				break;
#endif
			case CMD_SIGN_ON:
				msgLength = 11;
				msgBuffer[1] = STATUS_CMD_OK;
   3e7c8:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = 8;
   3e7ca:	88 e0       	ldi	r24, 0x08	; 8
   3e7cc:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3] = 'A';
   3e7ce:	81 e4       	ldi	r24, 0x41	; 65
   3e7d0:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4] = 'V';
   3e7d2:	86 e5       	ldi	r24, 0x56	; 86
   3e7d4:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5] = 'R';
   3e7d6:	82 e5       	ldi	r24, 0x52	; 82
   3e7d8:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6] = 'I';
   3e7da:	89 e4       	ldi	r24, 0x49	; 73
   3e7dc:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7] = 'S';
   3e7de:	83 e5       	ldi	r24, 0x53	; 83
   3e7e0:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8] = 'P';
   3e7e2:	80 e5       	ldi	r24, 0x50	; 80
   3e7e4:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9] = '_';
   3e7e6:	8f e5       	ldi	r24, 0x5F	; 95
   3e7e8:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10] = '2';
   3e7ea:	82 e3       	ldi	r24, 0x32	; 50
   3e7ec:	8b 87       	std	Y+11, r24	; 0x0b
				}
			}
				break;
#endif
			case CMD_SIGN_ON:
				msgLength = 11;
   3e7ee:	0b e0       	ldi	r16, 0x0B	; 11
   3e7f0:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[6] = 'I';
				msgBuffer[7] = 'S';
				msgBuffer[8] = 'P';
				msgBuffer[9] = '_';
				msgBuffer[10] = '2';
				break;
   3e7f2:	95 c1       	rjmp	.+810    	; 0x3eb1e <main+0x60e>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0]) {
   3e7f4:	21 31       	cpi	r18, 0x11	; 17
   3e7f6:	09 f4       	brne	.+2      	; 0x3e7fa <main+0x2ea>
   3e7f8:	55 c0       	rjmp	.+170    	; 0x3e8a4 <main+0x394>
   3e7fa:	08 f0       	brcs	.+2      	; 0x3e7fe <main+0x2ee>
   3e7fc:	98 c0       	rjmp	.+304    	; 0x3e92e <main+0x41e>
   3e7fe:	20 31       	cpi	r18, 0x10	; 16
   3e800:	09 f4       	brne	.+2      	; 0x3e804 <main+0x2f4>
   3e802:	ae c0       	rjmp	.+348    	; 0x3e960 <main+0x450>
   3e804:	88 c1       	rjmp	.+784    	; 0x3eb16 <main+0x606>
   3e806:	28 31       	cpi	r18, 0x18	; 24
   3e808:	09 f4       	brne	.+2      	; 0x3e80c <main+0x2fc>
   3e80a:	6a c0       	rjmp	.+212    	; 0x3e8e0 <main+0x3d0>
   3e80c:	48 f4       	brcc	.+18     	; 0x3e820 <main+0x310>
   3e80e:	25 31       	cpi	r18, 0x15	; 21
   3e810:	09 f4       	brne	.+2      	; 0x3e814 <main+0x304>
   3e812:	a8 c0       	rjmp	.+336    	; 0x3e964 <main+0x454>
   3e814:	08 f4       	brcc	.+2      	; 0x3e818 <main+0x308>
   3e816:	2b c1       	rjmp	.+598    	; 0x3ea6e <main+0x55e>
   3e818:	26 31       	cpi	r18, 0x16	; 22
   3e81a:	09 f4       	brne	.+2      	; 0x3e81e <main+0x30e>
   3e81c:	28 c1       	rjmp	.+592    	; 0x3ea6e <main+0x55e>
   3e81e:	7b c1       	rjmp	.+758    	; 0x3eb16 <main+0x606>
   3e820:	2a 31       	cpi	r18, 0x1A	; 26
   3e822:	09 f4       	brne	.+2      	; 0x3e826 <main+0x316>
   3e824:	51 c0       	rjmp	.+162    	; 0x3e8c8 <main+0x3b8>
   3e826:	08 f4       	brcc	.+2      	; 0x3e82a <main+0x31a>
   3e828:	71 c0       	rjmp	.+226    	; 0x3e90c <main+0x3fc>
   3e82a:	2b 31       	cpi	r18, 0x1B	; 27
   3e82c:	09 f4       	brne	.+2      	; 0x3e830 <main+0x320>
   3e82e:	41 c0       	rjmp	.+130    	; 0x3e8b2 <main+0x3a2>
   3e830:	2d 31       	cpi	r18, 0x1D	; 29
   3e832:	09 f0       	breq	.+2      	; 0x3e836 <main+0x326>
   3e834:	70 c1       	rjmp	.+736    	; 0x3eb16 <main+0x606>
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI: {
				unsigned char answerByte;
				unsigned char flag = 0;

				if (msgBuffer[4] == 0x30) {
   3e836:	8d 81       	ldd	r24, Y+5	; 0x05
   3e838:	80 33       	cpi	r24, 0x30	; 48
   3e83a:	39 f4       	brne	.+14     	; 0x3e84a <main+0x33a>
					unsigned char signatureIndex = msgBuffer[6];
   3e83c:	9f 81       	ldd	r25, Y+7	; 0x07

					if (signatureIndex == 0) {
   3e83e:	99 23       	and	r25, r25
   3e840:	b1 f0       	breq	.+44     	; 0x3e86e <main+0x35e>
						answerByte = (SIGNATURE_BYTES >> 16) & 0x000000FF;
					} else if (signatureIndex == 1) {
   3e842:	91 30       	cpi	r25, 0x01	; 1
   3e844:	b1 f4       	brne	.+44     	; 0x3e872 <main+0x362>
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e846:	98 e9       	ldi	r25, 0x98	; 152
   3e848:	17 c0       	rjmp	.+46     	; 0x3e878 <main+0x368>
					} else {
						answerByte = SIGNATURE_BYTES & 0x000000FF;
					}
				} else if (msgBuffer[4] & 0x50) {
   3e84a:	98 2f       	mov	r25, r24
   3e84c:	90 75       	andi	r25, 0x50	; 80
   3e84e:	99 f0       	breq	.+38     	; 0x3e876 <main+0x366>
					//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
					//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
					//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
					if (msgBuffer[4] == 0x50) {
   3e850:	80 35       	cpi	r24, 0x50	; 80
   3e852:	21 f4       	brne	.+8      	; 0x3e85c <main+0x34c>
						answerByte = boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3e854:	99 e0       	ldi	r25, 0x09	; 9
   3e856:	e0 e0       	ldi	r30, 0x00	; 0
   3e858:	f0 e0       	ldi	r31, 0x00	; 0
   3e85a:	05 c0       	rjmp	.+10     	; 0x3e866 <main+0x356>
					} else if (msgBuffer[4] == 0x58) {
   3e85c:	88 35       	cpi	r24, 0x58	; 88
   3e85e:	59 f4       	brne	.+22     	; 0x3e876 <main+0x366>
						answerByte = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3e860:	e3 e0       	ldi	r30, 0x03	; 3
   3e862:	f0 e0       	ldi	r31, 0x00	; 0
   3e864:	99 e0       	ldi	r25, 0x09	; 9
   3e866:	90 93 57 00 	sts	0x0057, r25
   3e86a:	94 91       	lpm	r25, Z
   3e86c:	05 c0       	rjmp	.+10     	; 0x3e878 <main+0x368>

				if (msgBuffer[4] == 0x30) {
					unsigned char signatureIndex = msgBuffer[6];

					if (signatureIndex == 0) {
						answerByte = (SIGNATURE_BYTES >> 16) & 0x000000FF;
   3e86e:	9e e1       	ldi	r25, 0x1E	; 30
   3e870:	03 c0       	rjmp	.+6      	; 0x3e878 <main+0x368>
					} else if (signatureIndex == 1) {
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					} else {
						answerByte = SIGNATURE_BYTES & 0x000000FF;
   3e872:	91 e0       	ldi	r25, 0x01	; 1
   3e874:	01 c0       	rjmp	.+2      	; 0x3e878 <main+0x368>
						answerByte = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					} else {
						answerByte = 0;
					}
				} else {
					answerByte = 0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3e876:	90 e0       	ldi	r25, 0x00	; 0
				}
				if (!flag) {
					msgLength = 7;
					msgBuffer[1] = STATUS_CMD_OK;
   3e878:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] = 0;
   3e87a:	1b 82       	std	Y+3, r1	; 0x03
					msgBuffer[3] = msgBuffer[4];
   3e87c:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] = 0;
   3e87e:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[5] = answerByte;
   3e880:	9e 83       	std	Y+6, r25	; 0x06
					msgBuffer[6] = STATUS_CMD_OK;
   3e882:	1f 82       	std	Y+7, r1	; 0x07
					}
				} else {
					answerByte = 0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}
				if (!flag) {
					msgLength = 7;
   3e884:	07 e0       	ldi	r16, 0x07	; 7
   3e886:	10 e0       	ldi	r17, 0x00	; 0
   3e888:	4a c1       	rjmp	.+660    	; 0x3eb1e <main+0x60e>
   3e88a:	ea 81       	ldd	r30, Y+2	; 0x02
   3e88c:	e0 59       	subi	r30, 0x90	; 144
   3e88e:	e3 30       	cpi	r30, 0x03	; 3
   3e890:	28 f4       	brcc	.+10     	; 0x3e89c <main+0x38c>
   3e892:	f0 e0       	ldi	r31, 0x00	; 0
   3e894:	ef 5f       	subi	r30, 0xFF	; 255
   3e896:	fd 4f       	sbci	r31, 0xFD	; 253
   3e898:	80 81       	ld	r24, Z
   3e89a:	01 c0       	rjmp	.+2      	; 0x3e89e <main+0x38e>
				break;

			case CMD_GET_PARAMETER: {
				unsigned char value;

				switch (msgBuffer[1]) {
   3e89c:	80 e0       	ldi	r24, 0x00	; 0
				default:
					value = 0;
					break;
				}
				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
   3e89e:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = value;
   3e8a0:	8b 83       	std	Y+3, r24	; 0x03
   3e8a2:	42 c0       	rjmp	.+132    	; 0x3e928 <main+0x418>
			}
				break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave = 1;
   3e8a4:	21 e0       	ldi	r18, 0x01	; 1
   3e8a6:	cf 5d       	subi	r28, 0xDF	; 223
   3e8a8:	de 4f       	sbci	r29, 0xFE	; 254
   3e8aa:	28 83       	st	Y, r18
   3e8ac:	c1 52       	subi	r28, 0x21	; 33
   3e8ae:	d1 40       	sbci	r29, 0x01	; 1
   3e8b0:	57 c0       	rjmp	.+174    	; 0x3e960 <main+0x450>
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
				break;

			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex = msgBuffer[4];
   3e8b2:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if (signatureIndex == 0)
   3e8b4:	88 23       	and	r24, r24
   3e8b6:	21 f0       	breq	.+8      	; 0x3e8c0 <main+0x3b0>
					signature = (SIGNATURE_BYTES >> 16) & 0x000000FF;
				else if (signatureIndex == 1)
   3e8b8:	81 30       	cpi	r24, 0x01	; 1
   3e8ba:	21 f4       	brne	.+8      	; 0x3e8c4 <main+0x3b4>
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e8bc:	88 e9       	ldi	r24, 0x98	; 152
   3e8be:	23 c0       	rjmp	.+70     	; 0x3e906 <main+0x3f6>
			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex = msgBuffer[4];
				unsigned char signature;

				if (signatureIndex == 0)
					signature = (SIGNATURE_BYTES >> 16) & 0x000000FF;
   3e8c0:	8e e1       	ldi	r24, 0x1E	; 30
   3e8c2:	21 c0       	rjmp	.+66     	; 0x3e906 <main+0x3f6>
				else if (signatureIndex == 1)
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
   3e8c4:	81 e0       	ldi	r24, 0x01	; 1
   3e8c6:	1f c0       	rjmp	.+62     	; 0x3e906 <main+0x3f6>
			}
				break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
   3e8c8:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3e8ca:	e1 e0       	ldi	r30, 0x01	; 1
   3e8cc:	f0 e0       	ldi	r31, 0x00	; 0
   3e8ce:	89 e0       	ldi	r24, 0x09	; 9
   3e8d0:	80 93 57 00 	sts	0x0057, r24
   3e8d4:	e4 91       	lpm	r30, Z
   3e8d6:	eb 83       	std	Y+3, r30	; 0x03
				msgBuffer[3] = STATUS_CMD_OK;
   3e8d8:	1c 82       	std	Y+4, r1	; 0x04
				msgBuffer[3] = STATUS_CMD_OK;
			}
				break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
   3e8da:	04 e0       	ldi	r16, 0x04	; 4
   3e8dc:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3] = STATUS_CMD_OK;
				break;
   3e8de:	1f c1       	rjmp	.+574    	; 0x3eb1e <main+0x60e>

			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if (msgBuffer[2] == 0x50) {
   3e8e0:	8b 81       	ldd	r24, Y+3	; 0x03
   3e8e2:	80 35       	cpi	r24, 0x50	; 80
   3e8e4:	51 f4       	brne	.+20     	; 0x3e8fa <main+0x3ea>
					if (msgBuffer[3] == 0x08)
   3e8e6:	8c 81       	ldd	r24, Y+4	; 0x04
   3e8e8:	88 30       	cpi	r24, 0x08	; 8
   3e8ea:	19 f4       	brne	.+6      	; 0x3e8f2 <main+0x3e2>
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3e8ec:	e2 e0       	ldi	r30, 0x02	; 2
   3e8ee:	f0 e0       	ldi	r31, 0x00	; 0
   3e8f0:	06 c0       	rjmp	.+12     	; 0x3e8fe <main+0x3ee>
					else
						fuseBits = boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3e8f2:	89 e0       	ldi	r24, 0x09	; 9
   3e8f4:	e0 e0       	ldi	r30, 0x00	; 0
   3e8f6:	f0 e0       	ldi	r31, 0x00	; 0
   3e8f8:	03 c0       	rjmp	.+6      	; 0x3e900 <main+0x3f0>
				} else {
					fuseBits = boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3e8fa:	e3 e0       	ldi	r30, 0x03	; 3
   3e8fc:	f0 e0       	ldi	r31, 0x00	; 0
   3e8fe:	89 e0       	ldi	r24, 0x09	; 9
   3e900:	80 93 57 00 	sts	0x0057, r24
   3e904:	84 91       	lpm	r24, Z
				}
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
   3e906:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = fuseBits;
   3e908:	8b 83       	std	Y+3, r24	; 0x03
   3e90a:	e6 cf       	rjmp	.-52     	; 0x3e8d8 <main+0x3c8>

#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP: {
				unsigned char lockBits = msgBuffer[4];

				lockBits = (~lockBits) & 0x3C; // mask BLBxx bits
   3e90c:	8d 81       	ldd	r24, Y+5	; 0x05
				boot_lock_bits_set(lockBits);
   3e90e:	83 6c       	ori	r24, 0xC3	; 195
   3e910:	99 e0       	ldi	r25, 0x09	; 9
   3e912:	e1 e0       	ldi	r30, 0x01	; 1
   3e914:	f0 e0       	ldi	r31, 0x00	; 0
   3e916:	08 2e       	mov	r0, r24
   3e918:	90 93 57 00 	sts	0x0057, r25
   3e91c:	e8 95       	spm
				// and program it
				boot_spm_busy_wait();
   3e91e:	07 b6       	in	r0, 0x37	; 55
   3e920:	00 fc       	sbrc	r0, 0
   3e922:	fd cf       	rjmp	.-6      	; 0x3e91e <main+0x40e>

				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
   3e924:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = STATUS_CMD_OK;
   3e926:	1b 82       	std	Y+3, r1	; 0x03
				lockBits = (~lockBits) & 0x3C; // mask BLBxx bits
				boot_lock_bits_set(lockBits);
				// and program it
				boot_spm_busy_wait();

				msgLength = 3;
   3e928:	03 e0       	ldi	r16, 0x03	; 3
   3e92a:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = STATUS_CMD_OK;
			}
				break;
   3e92c:	f8 c0       	rjmp	.+496    	; 0x3eb1e <main+0x60e>
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1] = STATUS_CMD_FAILED; //*	isue 543, return FAILED instead of OK
   3e92e:	80 ec       	ldi	r24, 0xC0	; 192
   3e930:	8a 83       	std	Y+2, r24	; 0x02
			}
				break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
   3e932:	02 e0       	ldi	r16, 0x02	; 2
   3e934:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[2] = STATUS_CMD_OK;
			}
				break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
   3e936:	c1 2c       	mov	r12, r1
   3e938:	d1 2c       	mov	r13, r1
   3e93a:	76 01       	movw	r14, r12
				msgLength = 2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1] = STATUS_CMD_FAILED; //*	isue 543, return FAILED instead of OK
				break;
   3e93c:	f0 c0       	rjmp	.+480    	; 0x3eb1e <main+0x60e>

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address = ( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3e93e:	8a 81       	ldd	r24, Y+2	; 0x02
   3e940:	4b 80       	ldd	r4, Y+3	; 0x03
   3e942:	51 2c       	mov	r5, r1
   3e944:	61 2c       	mov	r6, r1
   3e946:	71 2c       	mov	r7, r1
   3e948:	32 01       	movw	r6, r4
   3e94a:	55 24       	eor	r5, r5
   3e94c:	44 24       	eor	r4, r4
   3e94e:	78 2a       	or	r7, r24
   3e950:	8d 81       	ldd	r24, Y+5	; 0x05
   3e952:	48 2a       	or	r4, r24
   3e954:	8c 81       	ldd	r24, Y+4	; 0x04
   3e956:	58 2a       	or	r5, r24
   3e958:	44 0c       	add	r4, r4
   3e95a:	55 1c       	adc	r5, r5
   3e95c:	66 1c       	adc	r6, r6
   3e95e:	77 1c       	adc	r7, r7
#else
				address = (((msgBuffer[3]) << 8) | (msgBuffer[4])) << 1; //convert word to byte address
#endif
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
   3e960:	1a 82       	std	Y+2, r1	; 0x02
   3e962:	db c0       	rjmp	.+438    	; 0x3eb1a <main+0x60a>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
   3e964:	2a 80       	ldd	r2, Y+2	; 0x02
   3e966:	31 2c       	mov	r3, r1
   3e968:	32 2c       	mov	r3, r2
   3e96a:	22 24       	eor	r2, r2
   3e96c:	8b 81       	ldd	r24, Y+3	; 0x03
   3e96e:	28 2a       	or	r2, r24
				unsigned char *p = msgBuffer + 10;
				unsigned int data;
				unsigned char highByte, lowByte;
				address_t tempaddress = address;

				if (msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3e970:	23 31       	cpi	r18, 0x13	; 19
   3e972:	09 f0       	breq	.+2      	; 0x3e976 <main+0x466>
   3e974:	47 c0       	rjmp	.+142    	; 0x3ea04 <main+0x4f4>
					// erase only main section (bootloader protection)
					if (eraseAddress < APP_END) {
   3e976:	c1 14       	cp	r12, r1
   3e978:	f0 ec       	ldi	r31, 0xC0	; 192
   3e97a:	df 06       	cpc	r13, r31
   3e97c:	f3 e0       	ldi	r31, 0x03	; 3
   3e97e:	ef 06       	cpc	r14, r31
   3e980:	f1 04       	cpc	r15, r1
   3e982:	70 f4       	brcc	.+28     	; 0x3e9a0 <main+0x490>
						boot_page_erase(eraseAddress);
   3e984:	83 e0       	ldi	r24, 0x03	; 3
   3e986:	f6 01       	movw	r30, r12
   3e988:	e0 92 5b 00 	sts	0x005B, r14
   3e98c:	80 93 57 00 	sts	0x0057, r24
   3e990:	e8 95       	spm
						// Perform page erase
						boot_spm_busy_wait(); // Wait until the memory is erased.
   3e992:	07 b6       	in	r0, 0x37	; 55
   3e994:	00 fc       	sbrc	r0, 0
   3e996:	fd cf       	rjmp	.-6      	; 0x3e992 <main+0x482>
						eraseAddress += SPM_PAGESIZE; // point to next page to be erase
   3e998:	2f ef       	ldi	r18, 0xFF	; 255
   3e99a:	d2 1a       	sub	r13, r18
   3e99c:	e2 0a       	sbc	r14, r18
   3e99e:	f2 0a       	sbc	r15, r18
   3e9a0:	2b 85       	ldd	r18, Y+11	; 0x0b
				if (signatureIndex == 0)
					signature = (SIGNATURE_BYTES >> 16) & 0x000000FF;
				else if (signatureIndex == 1)
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
   3e9a2:	b3 01       	movw	r22, r6
   3e9a4:	a2 01       	movw	r20, r4
   3e9a6:	ce 01       	movw	r24, r28
   3e9a8:	0b 96       	adiw	r24, 0x0b	; 11
					do {
						lowByte = *p++;
						highByte = *p++;

						data = (highByte << 8) | lowByte;
						boot_page_fill(address, data);
   3e9aa:	11 e0       	ldi	r17, 0x01	; 1
   3e9ac:	dc 01       	movw	r26, r24
   3e9ae:	12 96       	adiw	r26, 0x02	; 2
   3e9b0:	cd 01       	movw	r24, r26
   3e9b2:	fd 01       	movw	r30, r26
   3e9b4:	31 97       	sbiw	r30, 0x01	; 1
					/* Write FLASH */
					do {
						lowByte = *p++;
						highByte = *p++;

						data = (highByte << 8) | lowByte;
   3e9b6:	e0 81       	ld	r30, Z
   3e9b8:	30 e0       	ldi	r19, 0x00	; 0
   3e9ba:	3e 2b       	or	r19, r30
						boot_page_fill(address, data);
   3e9bc:	09 01       	movw	r0, r18
   3e9be:	fa 01       	movw	r30, r20
   3e9c0:	60 93 5b 00 	sts	0x005B, r22
   3e9c4:	10 93 57 00 	sts	0x0057, r17
   3e9c8:	e8 95       	spm
   3e9ca:	11 24       	eor	r1, r1

						address = address + 2; // Select next word in memory
   3e9cc:	4e 5f       	subi	r20, 0xFE	; 254
   3e9ce:	5f 4f       	sbci	r21, 0xFF	; 255
   3e9d0:	6f 4f       	sbci	r22, 0xFF	; 255
   3e9d2:	7f 4f       	sbci	r23, 0xFF	; 255
						size -= 2; // Reduce number of bytes to write by two
   3e9d4:	e2 e0       	ldi	r30, 0x02	; 2
   3e9d6:	2e 1a       	sub	r2, r30
   3e9d8:	31 08       	sbc	r3, r1
					} while (size); // Loop until all bytes written
   3e9da:	21 14       	cp	r2, r1
   3e9dc:	31 04       	cpc	r3, r1
   3e9de:	11 f0       	breq	.+4      	; 0x3e9e4 <main+0x4d4>
					}

					/* Write FLASH */
					do {
						lowByte = *p++;
						highByte = *p++;
   3e9e0:	2c 91       	ld	r18, X
   3e9e2:	e4 cf       	rjmp	.-56     	; 0x3e9ac <main+0x49c>

						address = address + 2; // Select next word in memory
						size -= 2; // Reduce number of bytes to write by two
					} while (size); // Loop until all bytes written

					boot_page_write(tempaddress);
   3e9e4:	85 e0       	ldi	r24, 0x05	; 5
   3e9e6:	88 2e       	mov	r8, r24
   3e9e8:	f2 01       	movw	r30, r4
   3e9ea:	60 92 5b 00 	sts	0x005B, r6
   3e9ee:	80 92 57 00 	sts	0x0057, r8
   3e9f2:	e8 95       	spm
					boot_spm_busy_wait();
   3e9f4:	07 b6       	in	r0, 0x37	; 55
   3e9f6:	00 fc       	sbrc	r0, 0
   3e9f8:	fd cf       	rjmp	.-6      	; 0x3e9f4 <main+0x4e4>
					boot_rww_enable(); // Re-enable the RWW section
   3e9fa:	81 e1       	ldi	r24, 0x11	; 17
   3e9fc:	80 93 57 00 	sts	0x0057, r24
   3ea00:	e8 95       	spm
   3ea02:	31 c0       	rjmp	.+98     	; 0x3ea66 <main+0x556>
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
   3ea04:	b3 01       	movw	r22, r6
   3ea06:	a2 01       	movw	r20, r4
   3ea08:	76 95       	lsr	r23
   3ea0a:	67 95       	ror	r22
   3ea0c:	57 95       	ror	r21
   3ea0e:	47 95       	ror	r20
   3ea10:	cc 5d       	subi	r28, 0xDC	; 220
   3ea12:	de 4f       	sbci	r29, 0xFE	; 254
   3ea14:	48 83       	st	Y, r20
   3ea16:	59 83       	std	Y+1, r21	; 0x01
   3ea18:	6a 83       	std	Y+2, r22	; 0x02
   3ea1a:	7b 83       	std	Y+3, r23	; 0x03
   3ea1c:	c4 52       	subi	r28, 0x24	; 36
   3ea1e:	d1 40       	sbci	r29, 0x01	; 1
   3ea20:	8e 01       	movw	r16, r28
   3ea22:	05 5f       	subi	r16, 0xF5	; 245
   3ea24:	1f 4f       	sbci	r17, 0xFF	; 255
					/* write EEPROM */
					while (size) {
   3ea26:	a1 2c       	mov	r10, r1
   3ea28:	b1 2c       	mov	r11, r1
   3ea2a:	a2 14       	cp	r10, r2
   3ea2c:	b3 04       	cpc	r11, r3
   3ea2e:	81 f0       	breq	.+32     	; 0x3ea50 <main+0x540>
						eeprom_write_byte((uint8_t*) ii, *p++);
   3ea30:	d8 01       	movw	r26, r16
   3ea32:	6d 91       	ld	r22, X+
   3ea34:	8d 01       	movw	r16, r26
   3ea36:	cc 5d       	subi	r28, 0xDC	; 220
   3ea38:	de 4f       	sbci	r29, 0xFE	; 254
   3ea3a:	88 81       	ld	r24, Y
   3ea3c:	99 81       	ldd	r25, Y+1	; 0x01
   3ea3e:	c4 52       	subi	r28, 0x24	; 36
   3ea40:	d1 40       	sbci	r29, 0x01	; 1
   3ea42:	8a 0d       	add	r24, r10
   3ea44:	9b 1d       	adc	r25, r11
   3ea46:	da d1       	rcall	.+948    	; 0x3edfc <__eewr_byte_m2560>
   3ea48:	bf ef       	ldi	r27, 0xFF	; 255
   3ea4a:	ab 1a       	sub	r10, r27
   3ea4c:	bb 0a       	sbc	r11, r27
   3ea4e:	ed cf       	rjmp	.-38     	; 0x3ea2a <main+0x51a>
   3ea50:	a5 01       	movw	r20, r10
   3ea52:	60 e0       	ldi	r22, 0x00	; 0
   3ea54:	70 e0       	ldi	r23, 0x00	; 0
   3ea56:	44 0f       	add	r20, r20
   3ea58:	55 1f       	adc	r21, r21
   3ea5a:	66 1f       	adc	r22, r22
   3ea5c:	77 1f       	adc	r23, r23
   3ea5e:	44 0d       	add	r20, r4
   3ea60:	55 1d       	adc	r21, r5
   3ea62:	66 1d       	adc	r22, r6
   3ea64:	77 1d       	adc	r23, r7
						ii++;
						size--;
					}
				}
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
   3ea66:	1a 82       	std	Y+2, r1	; 0x02
			}
				break;
   3ea68:	2a 01       	movw	r4, r20
   3ea6a:	3b 01       	movw	r6, r22
   3ea6c:	56 c0       	rjmp	.+172    	; 0x3eb1a <main+0x60a>

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP: {
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
   3ea6e:	8a 81       	ldd	r24, Y+2	; 0x02
   3ea70:	90 e0       	ldi	r25, 0x00	; 0
   3ea72:	98 2f       	mov	r25, r24
   3ea74:	88 27       	eor	r24, r24
   3ea76:	3b 81       	ldd	r19, Y+3	; 0x03
   3ea78:	83 2b       	or	r24, r19
				unsigned char *p = msgBuffer + 1;
				msgLength = size + 3;
   3ea7a:	8c 01       	movw	r16, r24
   3ea7c:	0d 5f       	subi	r16, 0xFD	; 253
   3ea7e:	1f 4f       	sbci	r17, 0xFF	; 255

				*p++ = STATUS_CMD_OK;
   3ea80:	1a 82       	std	Y+2, r1	; 0x02
				if (msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3ea82:	24 31       	cpi	r18, 0x14	; 20
   3ea84:	a1 f4       	brne	.+40     	; 0x3eaae <main+0x59e>
   3ea86:	de 01       	movw	r26, r28
   3ea88:	13 96       	adiw	r26, 0x03	; 3

					// Read FLASH
					do {
						//#if defined(RAMPZ)
#if (FLASHEND > 0x10000)
						data = pgm_read_word_far(address);
   3ea8a:	6b be       	out	0x3b, r6	; 59
   3ea8c:	f2 01       	movw	r30, r4
   3ea8e:	27 91       	elpm	r18, Z+
   3ea90:	36 91       	elpm	r19, Z
#else
						data = pgm_read_word_near(address);
#endif
						*p++ = (unsigned char) data; //LSB
   3ea92:	2c 93       	st	X, r18
   3ea94:	12 96       	adiw	r26, 0x02	; 2
   3ea96:	fd 01       	movw	r30, r26
   3ea98:	31 97       	sbiw	r30, 0x01	; 1
						*p++ = (unsigned char) (data >> 8); //MSB
   3ea9a:	30 83       	st	Z, r19
						address += 2; // Select next word in memory
   3ea9c:	e2 e0       	ldi	r30, 0x02	; 2
   3ea9e:	4e 0e       	add	r4, r30
   3eaa0:	51 1c       	adc	r5, r1
   3eaa2:	61 1c       	adc	r6, r1
   3eaa4:	71 1c       	adc	r7, r1
						size -= 2;
   3eaa6:	02 97       	sbiw	r24, 0x02	; 2
					} while (size);
   3eaa8:	00 97       	sbiw	r24, 0x00	; 0
   3eaaa:	79 f7       	brne	.-34     	; 0x3ea8a <main+0x57a>
   3eaac:	32 c0       	rjmp	.+100    	; 0x3eb12 <main+0x602>
   3eaae:	fe 01       	movw	r30, r28
   3eab0:	33 96       	adiw	r30, 0x03	; 3
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
				unsigned char *p = msgBuffer + 1;
				msgLength = size + 3;

				*p++ = STATUS_CMD_OK;
				if (msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3eab2:	9c 01       	movw	r18, r24
   3eab4:	b3 01       	movw	r22, r6
   3eab6:	a2 01       	movw	r20, r4
						size -= 2;
					} while (size);
				} else {
					/* Read EEPROM */
					do {
						EEARL = address; // Setup EEPROM address
   3eab8:	41 bd       	out	0x21, r20	; 33
						EEARH = ((address >> 8));
   3eaba:	85 2e       	mov	r8, r21
   3eabc:	96 2e       	mov	r9, r22
   3eabe:	a7 2e       	mov	r10, r23
   3eac0:	bb 24       	eor	r11, r11
   3eac2:	cc 5d       	subi	r28, 0xDC	; 220
   3eac4:	de 4f       	sbci	r29, 0xFE	; 254
   3eac6:	88 82       	st	Y, r8
   3eac8:	99 82       	std	Y+1, r9	; 0x01
   3eaca:	aa 82       	std	Y+2, r10	; 0x02
   3eacc:	bb 82       	std	Y+3, r11	; 0x03
   3eace:	c4 52       	subi	r28, 0x24	; 36
   3ead0:	d1 40       	sbci	r29, 0x01	; 1
   3ead2:	82 bc       	out	0x22, r8	; 34
						address++; // Select next EEPROM byte
   3ead4:	4f 5f       	subi	r20, 0xFF	; 255
   3ead6:	5f 4f       	sbci	r21, 0xFF	; 255
   3ead8:	6f 4f       	sbci	r22, 0xFF	; 255
   3eada:	7f 4f       	sbci	r23, 0xFF	; 255
						EECR |= (1 << EERE); // Read EEPROM
   3eadc:	f8 9a       	sbi	0x1f, 0	; 31
						*p++ = EEDR; // Send EEPROM data
   3eade:	a0 b5       	in	r26, 0x20	; 32
   3eae0:	a1 93       	st	Z+, r26
						size--;
   3eae2:	21 50       	subi	r18, 0x01	; 1
   3eae4:	31 09       	sbc	r19, r1
					} while (size);
   3eae6:	21 15       	cp	r18, r1
   3eae8:	31 05       	cpc	r19, r1
   3eaea:	31 f7       	brne	.-52     	; 0x3eab8 <main+0x5a8>
   3eaec:	ac 01       	movw	r20, r24
   3eaee:	41 50       	subi	r20, 0x01	; 1
   3eaf0:	51 09       	sbc	r21, r1
   3eaf2:	60 e0       	ldi	r22, 0x00	; 0
   3eaf4:	70 e0       	ldi	r23, 0x00	; 0
   3eaf6:	4f 5f       	subi	r20, 0xFF	; 255
   3eaf8:	5f 4f       	sbci	r21, 0xFF	; 255
   3eafa:	6f 4f       	sbci	r22, 0xFF	; 255
   3eafc:	7f 4f       	sbci	r23, 0xFF	; 255
   3eafe:	44 0e       	add	r4, r20
   3eb00:	55 1e       	adc	r5, r21
   3eb02:	66 1e       	adc	r6, r22
   3eb04:	77 1e       	adc	r7, r23
   3eb06:	a3 e0       	ldi	r26, 0x03	; 3
   3eb08:	b0 e0       	ldi	r27, 0x00	; 0
   3eb0a:	ac 0f       	add	r26, r28
   3eb0c:	bd 1f       	adc	r27, r29
   3eb0e:	a8 0f       	add	r26, r24
   3eb10:	b9 1f       	adc	r27, r25
				}
				*p++ = STATUS_CMD_OK;
   3eb12:	1c 92       	st	X, r1
			}
				break;
   3eb14:	04 c0       	rjmp	.+8      	; 0x3eb1e <main+0x60e>

			default:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_FAILED;
   3eb16:	80 ec       	ldi	r24, 0xC0	; 192
   3eb18:	8a 83       	std	Y+2, r24	; 0x02
				*p++ = STATUS_CMD_OK;
			}
				break;

			default:
				msgLength = 2;
   3eb1a:	02 e0       	ldi	r16, 0x02	; 2
   3eb1c:	10 e0       	ldi	r17, 0x00	; 0
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3eb1e:	8b e1       	ldi	r24, 0x1B	; 27
   3eb20:	0e db       	rcall	.-2532   	; 0x3e13e <sendchar>
			checksum = MESSAGE_START ^ 0;

			sendchar(seqNum);
   3eb22:	c0 5e       	subi	r28, 0xE0	; 224
   3eb24:	de 4f       	sbci	r29, 0xFE	; 254
   3eb26:	88 81       	ld	r24, Y
   3eb28:	c0 52       	subi	r28, 0x20	; 32
   3eb2a:	d1 40       	sbci	r29, 0x01	; 1
   3eb2c:	08 db       	rcall	.-2544   	; 0x3e13e <sendchar>
			checksum ^= seqNum;

			c = ((msgLength >> 8) & 0xFF);
			sendchar(c);
   3eb2e:	81 2f       	mov	r24, r17
   3eb30:	06 db       	rcall	.-2548   	; 0x3e13e <sendchar>
			checksum ^= c;

			c = msgLength & 0x00FF;
			sendchar(c);
   3eb32:	80 2f       	mov	r24, r16
   3eb34:	04 db       	rcall	.-2552   	; 0x3e13e <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
   3eb36:	8e e0       	ldi	r24, 0x0E	; 14
   3eb38:	02 db       	rcall	.-2556   	; 0x3e13e <sendchar>
			sendchar(seqNum);
			checksum ^= seqNum;

			c = ((msgLength >> 8) & 0xFF);
			sendchar(c);
			checksum ^= c;
   3eb3a:	65 e1       	ldi	r22, 0x15	; 21
   3eb3c:	36 2e       	mov	r3, r22
   3eb3e:	c0 5e       	subi	r28, 0xE0	; 224
   3eb40:	de 4f       	sbci	r29, 0xFE	; 254
   3eb42:	98 80       	ld	r9, Y
   3eb44:	c0 52       	subi	r28, 0x20	; 32
   3eb46:	d1 40       	sbci	r29, 0x01	; 1
   3eb48:	39 24       	eor	r3, r9

			c = msgLength & 0x00FF;
			sendchar(c);
			checksum ^= c;
   3eb4a:	30 26       	eor	r3, r16

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3eb4c:	31 26       	eor	r3, r17
   3eb4e:	ae 01       	movw	r20, r28
   3eb50:	4f 5f       	subi	r20, 0xFF	; 255
   3eb52:	5f 4f       	sbci	r21, 0xFF	; 255
   3eb54:	5a 01       	movw	r10, r20
   3eb56:	04 0f       	add	r16, r20
   3eb58:	15 1f       	adc	r17, r21

			p = msgBuffer;
			while (msgLength) {
   3eb5a:	a0 16       	cp	r10, r16
   3eb5c:	b1 06       	cpc	r11, r17
   3eb5e:	39 f0       	breq	.+14     	; 0x3eb6e <main+0x65e>
				c = *p++;
   3eb60:	d5 01       	movw	r26, r10
   3eb62:	2d 90       	ld	r2, X+
   3eb64:	5d 01       	movw	r10, r26
				sendchar(c);
   3eb66:	82 2d       	mov	r24, r2
   3eb68:	ea da       	rcall	.-2604   	; 0x3e13e <sendchar>
				checksum ^= c;
   3eb6a:	32 24       	eor	r3, r2
   3eb6c:	f6 cf       	rjmp	.-20     	; 0x3eb5a <main+0x64a>
				msgLength--;
			}
			sendchar(checksum);
   3eb6e:	83 2d       	mov	r24, r3
   3eb70:	e6 da       	rcall	.-2612   	; 0x3e13e <sendchar>
			seqNum++;
   3eb72:	c0 5e       	subi	r28, 0xE0	; 224
   3eb74:	de 4f       	sbci	r29, 0xFE	; 254
   3eb76:	28 81       	ld	r18, Y
   3eb78:	c0 52       	subi	r28, 0x20	; 32
   3eb7a:	d1 40       	sbci	r29, 0x01	; 1
   3eb7c:	2f 5f       	subi	r18, 0xFF	; 255
   3eb7e:	c0 5e       	subi	r28, 0xE0	; 224
   3eb80:	de 4f       	sbci	r29, 0xFE	; 254
   3eb82:	28 83       	st	Y, r18
   3eb84:	c0 52       	subi	r28, 0x20	; 32
   3eb86:	d1 40       	sbci	r29, 0x01	; 1
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}

	if (boot_state == 1) {
		//*	main loop
		while (!isLeave) {
   3eb88:	cf 5d       	subi	r28, 0xDF	; 223
   3eb8a:	de 4f       	sbci	r29, 0xFE	; 254
   3eb8c:	48 81       	ld	r20, Y
   3eb8e:	c1 52       	subi	r28, 0x21	; 33
   3eb90:	d1 40       	sbci	r29, 0x01	; 1
   3eb92:	41 11       	cpse	r20, r1
   3eb94:	a3 c0       	rjmp	.+326    	; 0x3ecdc <main+0x7cc>
   3eb96:	40 e0       	ldi	r20, 0x00	; 0
   3eb98:	50 e0       	ldi	r21, 0x00	; 0
   3eb9a:	45 cd       	rjmp	.-1398   	; 0x3e626 <main+0x116>
#endif

		}
	}

	if (boot_state == 2) {
   3eb9c:	42 30       	cpi	r20, 0x02	; 2
   3eb9e:	51 05       	cpc	r21, r1
   3eba0:	09 f0       	breq	.+2      	; 0x3eba4 <main+0x694>
   3eba2:	9c c0       	rjmp	.+312    	; 0x3ecdc <main+0x7cc>
		if (eeprom_read_byte(4095) == 0xF0) {
   3eba4:	8f ef       	ldi	r24, 0xFF	; 255
   3eba6:	9f e0       	ldi	r25, 0x0F	; 15
   3eba8:	21 d1       	rcall	.+578    	; 0x3edec <__eerd_byte_m2560>
   3ebaa:	80 3f       	cpi	r24, 0xF0	; 240
   3ebac:	09 f0       	breq	.+2      	; 0x3ebb0 <main+0x6a0>
   3ebae:	96 c0       	rjmp	.+300    	; 0x3ecdc <main+0x7cc>
			sendchar('u');
   3ebb0:	85 e7       	ldi	r24, 0x75	; 117
   3ebb2:	c5 da       	rcall	.-2678   	; 0x3e13e <sendchar>
			sendchar('p');
   3ebb4:	80 e7       	ldi	r24, 0x70	; 112
   3ebb6:	c3 da       	rcall	.-2682   	; 0x3e13e <sendchar>
			sendchar('g');
   3ebb8:	87 e6       	ldi	r24, 0x67	; 103
   3ebba:	c1 da       	rcall	.-2686   	; 0x3e13e <sendchar>
			sendchar('r');
   3ebbc:	82 e7       	ldi	r24, 0x72	; 114
   3ebbe:	bf da       	rcall	.-2690   	; 0x3e13e <sendchar>
			sendchar('a');
   3ebc0:	81 e6       	ldi	r24, 0x61	; 97
   3ebc2:	bd da       	rcall	.-2694   	; 0x3e13e <sendchar>
			sendchar('d');
   3ebc4:	84 e6       	ldi	r24, 0x64	; 100
   3ebc6:	bb da       	rcall	.-2698   	; 0x3e13e <sendchar>
			sendchar('i');
   3ebc8:	89 e6       	ldi	r24, 0x69	; 105
   3ebca:	b9 da       	rcall	.-2702   	; 0x3e13e <sendchar>
			sendchar('n');
   3ebcc:	8e e6       	ldi	r24, 0x6E	; 110
   3ebce:	b7 da       	rcall	.-2706   	; 0x3e13e <sendchar>
			sendchar('g');
   3ebd0:	87 e6       	ldi	r24, 0x67	; 103
   3ebd2:	b5 da       	rcall	.-2710   	; 0x3e13e <sendchar>
			sendchar(0x0d);
   3ebd4:	8d e0       	ldi	r24, 0x0D	; 13
   3ebd6:	b3 da       	rcall	.-2714   	; 0x3e13e <sendchar>
			sendchar(0x0a);
   3ebd8:	8a e0       	ldi	r24, 0x0A	; 10
   3ebda:	b1 da       	rcall	.-2718   	; 0x3e13e <sendchar>
			delay_ms(100);
   3ebdc:	84 e6       	ldi	r24, 0x64	; 100
   3ebde:	90 e0       	ldi	r25, 0x00	; 0
   3ebe0:	0f db       	rcall	.-2530   	; 0x3e200 <delay_ms>

			DWORD fa; /* Flash address */
			sendchar(0x0d);
   3ebe2:	8d e0       	ldi	r24, 0x0D	; 13
   3ebe4:	ac da       	rcall	.-2728   	; 0x3e13e <sendchar>
			sendchar(0x0a);
   3ebe6:	8a e0       	ldi	r24, 0x0A	; 10
   3ebe8:	aa da       	rcall	.-2732   	; 0x3e13e <sendchar>
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
   3ebea:	c1 2c       	mov	r12, r1
   3ebec:	d1 2c       	mov	r13, r1
   3ebee:	76 01       	movw	r14, r12
					// 	sendchar(0x0d);
					// 	sendchar(0x0a);
					// }
					// 
					// 
					if(((address +1)%1200) <= 300 && ((address +1)%1200) >= 0){
   3ebf0:	50 eb       	ldi	r21, 0xB0	; 176
   3ebf2:	45 2e       	mov	r4, r21
   3ebf4:	54 e0       	ldi	r21, 0x04	; 4
   3ebf6:	55 2e       	mov	r5, r21
   3ebf8:	61 2c       	mov	r6, r1
   3ebfa:	71 2c       	mov	r7, r1
   3ebfc:	46 01       	movw	r8, r12
   3ebfe:	57 01       	movw	r10, r14
   3ec00:	50 e1       	ldi	r21, 0x10	; 16
   3ec02:	85 0e       	add	r8, r21
   3ec04:	91 1c       	adc	r9, r1
   3ec06:	a1 1c       	adc	r10, r1
   3ec08:	b1 1c       	adc	r11, r1
			sendchar(0x0d);
			sendchar(0x0a);
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
		//		PROGLED_PORT ^= (1 << PROGLED_PIN); // turn LED ON
				delay_ms(50);
   3ec0a:	82 e3       	ldi	r24, 0x32	; 50
   3ec0c:	90 e0       	ldi	r25, 0x00	; 0
   3ec0e:	f8 da       	rcall	.-2576   	; 0x3e200 <delay_ms>
				flash_erase(fa); /* Erase a page */
   3ec10:	c7 01       	movw	r24, r14
   3ec12:	b6 01       	movw	r22, r12
   3ec14:	4f dc       	rcall	.-1890   	; 0x3e4b4 <flash_erase>
				memset(Buff, 0xFF, SPM_PAGESIZE); /* Clear buffer */
   3ec16:	40 e0       	ldi	r20, 0x00	; 0
   3ec18:	51 e0       	ldi	r21, 0x01	; 1
   3ec1a:	6f ef       	ldi	r22, 0xFF	; 255
   3ec1c:	70 e0       	ldi	r23, 0x00	; 0
   3ec1e:	8e e0       	ldi	r24, 0x0E	; 14
   3ec20:	92 e0       	ldi	r25, 0x02	; 2
   3ec22:	dd d0       	rcall	.+442    	; 0x3edde <memset>
   3ec24:	0e e0       	ldi	r16, 0x0E	; 14
   3ec26:	12 e0       	ldi	r17, 0x02	; 2
				for (int i = 0; i < SPM_PAGESIZE; i++) {
					Buff[i] = spiReadReg(address);
   3ec28:	c5 01       	movw	r24, r10
   3ec2a:	b4 01       	movw	r22, r8
   3ec2c:	cb da       	rcall	.-2666   	; 0x3e1c4 <spiReadReg>
   3ec2e:	d8 01       	movw	r26, r16
   3ec30:	8d 93       	st	X+, r24
   3ec32:	8d 01       	movw	r16, r26
					address++;
   3ec34:	bf ef       	ldi	r27, 0xFF	; 255
   3ec36:	8b 1a       	sub	r8, r27
   3ec38:	9b 0a       	sbc	r9, r27
   3ec3a:	ab 0a       	sbc	r10, r27
   3ec3c:	bb 0a       	sbc	r11, r27
   3ec3e:	c5 01       	movw	r24, r10
   3ec40:	b4 01       	movw	r22, r8
   3ec42:	6f 5f       	subi	r22, 0xFF	; 255
   3ec44:	7f 4f       	sbci	r23, 0xFF	; 255
   3ec46:	8f 4f       	sbci	r24, 0xFF	; 255
   3ec48:	9f 4f       	sbci	r25, 0xFF	; 255
					// 	sendchar(0x0d);
					// 	sendchar(0x0a);
					// }
					// 
					// 
					if(((address +1)%1200) <= 300 && ((address +1)%1200) >= 0){
   3ec4a:	a3 01       	movw	r20, r6
   3ec4c:	92 01       	movw	r18, r4
   3ec4e:	75 d0       	rcall	.+234    	; 0x3ed3a <__divmodsi4>
   3ec50:	6d 32       	cpi	r22, 0x2D	; 45
   3ec52:	e1 e0       	ldi	r30, 0x01	; 1
   3ec54:	7e 07       	cpc	r23, r30
   3ec56:	81 05       	cpc	r24, r1
   3ec58:	91 05       	cpc	r25, r1
   3ec5a:	18 f4       	brcc	.+6      	; 0x3ec62 <main+0x752>
						LED1_HIGH();
   3ec5c:	2d 9a       	sbi	0x05, 5	; 5
						LED2_LOW();
   3ec5e:	2e 98       	cbi	0x05, 6	; 5
   3ec60:	0d c0       	rjmp	.+26     	; 0x3ec7c <main+0x76c>
						LED3_LOW();
					}else if(((address +1)%1200) <= 700 && ((address +1)%1200) >= 400){
   3ec62:	9b 01       	movw	r18, r22
   3ec64:	ac 01       	movw	r20, r24
   3ec66:	20 59       	subi	r18, 0x90	; 144
   3ec68:	31 40       	sbci	r19, 0x01	; 1
   3ec6a:	41 09       	sbc	r20, r1
   3ec6c:	51 09       	sbc	r21, r1
   3ec6e:	2d 32       	cpi	r18, 0x2D	; 45
   3ec70:	31 40       	sbci	r19, 0x01	; 1
   3ec72:	41 05       	cpc	r20, r1
   3ec74:	51 05       	cpc	r21, r1
   3ec76:	20 f4       	brcc	.+8      	; 0x3ec80 <main+0x770>
						LED1_LOW();
   3ec78:	2d 98       	cbi	0x05, 5	; 5
						LED2_HIGH();
   3ec7a:	2e 9a       	sbi	0x05, 6	; 5
						LED3_LOW();
   3ec7c:	2f 98       	cbi	0x05, 7	; 5
   3ec7e:	0d c0       	rjmp	.+26     	; 0x3ec9a <main+0x78a>
					}else if( ((address +1) %1200) <= 1100  && ((address +1) %1200) >= 8){
   3ec80:	dc 01       	movw	r26, r24
   3ec82:	cb 01       	movw	r24, r22
   3ec84:	08 97       	sbiw	r24, 0x08	; 8
   3ec86:	a1 09       	sbc	r26, r1
   3ec88:	b1 09       	sbc	r27, r1
   3ec8a:	85 34       	cpi	r24, 0x45	; 69
   3ec8c:	94 40       	sbci	r25, 0x04	; 4
   3ec8e:	a1 05       	cpc	r26, r1
   3ec90:	b1 05       	cpc	r27, r1
   3ec92:	18 f4       	brcc	.+6      	; 0x3ec9a <main+0x78a>
						LED1_LOW();
   3ec94:	2d 98       	cbi	0x05, 5	; 5
						LED2_LOW();
   3ec96:	2e 98       	cbi	0x05, 6	; 5
						LED3_HIGH();
   3ec98:	2f 9a       	sbi	0x05, 7	; 5
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
		//		PROGLED_PORT ^= (1 << PROGLED_PIN); // turn LED ON
				delay_ms(50);
				flash_erase(fa); /* Erase a page */
				memset(Buff, 0xFF, SPM_PAGESIZE); /* Clear buffer */
				for (int i = 0; i < SPM_PAGESIZE; i++) {
   3ec9a:	43 e0       	ldi	r20, 0x03	; 3
   3ec9c:	0e 30       	cpi	r16, 0x0E	; 14
   3ec9e:	14 07       	cpc	r17, r20
   3eca0:	19 f6       	brne	.-122    	; 0x3ec28 <main+0x718>
						LED1_LOW();
						LED2_LOW();
						LED3_HIGH();
					}
				}
				flash_write(fa, Buff); /* Write it if the data is available */
   3eca2:	4e e0       	ldi	r20, 0x0E	; 14
   3eca4:	52 e0       	ldi	r21, 0x02	; 2
   3eca6:	c7 01       	movw	r24, r14
   3eca8:	b6 01       	movw	r22, r12
   3ecaa:	13 dc       	rcall	.-2010   	; 0x3e4d2 <flash_write>

			DWORD fa; /* Flash address */
			sendchar(0x0d);
			sendchar(0x0a);
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
   3ecac:	5f ef       	ldi	r21, 0xFF	; 255
   3ecae:	d5 1a       	sub	r13, r21
   3ecb0:	e5 0a       	sbc	r14, r21
   3ecb2:	f5 0a       	sbc	r15, r21
   3ecb4:	c1 14       	cp	r12, r1
   3ecb6:	60 ee       	ldi	r22, 0xE0	; 224
   3ecb8:	d6 06       	cpc	r13, r22
   3ecba:	63 e0       	ldi	r22, 0x03	; 3
   3ecbc:	e6 06       	cpc	r14, r22
   3ecbe:	f1 04       	cpc	r15, r1
   3ecc0:	09 f0       	breq	.+2      	; 0x3ecc4 <main+0x7b4>
   3ecc2:	9c cf       	rjmp	.-200    	; 0x3ebfc <main+0x6ec>
						LED3_HIGH();
					}
				}
				flash_write(fa, Buff); /* Write it if the data is available */
			}
			sendchar('d');
   3ecc4:	84 e6       	ldi	r24, 0x64	; 100
   3ecc6:	3b da       	rcall	.-2954   	; 0x3e13e <sendchar>
			sendchar(0x0d);
   3ecc8:	8d e0       	ldi	r24, 0x0D	; 13
   3ecca:	39 da       	rcall	.-2958   	; 0x3e13e <sendchar>
			sendchar(0x0a);
   3eccc:	8a e0       	ldi	r24, 0x0A	; 10
   3ecce:	37 da       	rcall	.-2962   	; 0x3e13e <sendchar>
			check = 0;
   3ecd0:	10 92 00 02 	sts	0x0200, r1
			eeprom_write_byte(4095, 0x00);
   3ecd4:	60 e0       	ldi	r22, 0x00	; 0
   3ecd6:	8f ef       	ldi	r24, 0xFF	; 255
   3ecd8:	9f e0       	ldi	r25, 0x0F	; 15
   3ecda:	90 d0       	rcall	.+288    	; 0x3edfc <__eewr_byte_m2560>
		}

		boot_state = 0;
	}

	asm volatile ("nop");
   3ecdc:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG &= 0xfd;
   3ecde:	80 91 c0 00 	lds	r24, 0x00C0
   3ece2:	8d 7f       	andi	r24, 0xFD	; 253
   3ece4:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable(); // enable application section
   3ece8:	81 e1       	ldi	r24, 0x11	; 17
   3ecea:	80 93 57 00 	sts	0x0057, r24
   3ecee:	e8 95       	spm

	asm volatile(
   3ecf0:	ee 27       	eor	r30, r30
   3ecf2:	ff 27       	eor	r31, r31
   3ecf4:	09 94       	ijmp
   3ecf6:	ff cf       	rjmp	.-2      	; 0x3ecf6 <main+0x7e6>

				switch (msgParseState) {
				case ST_START:
					if (c == MESSAGE_START) {
						msgParseState = ST_GET_SEQ_NUM;
						checksum = MESSAGE_START ^ 0;
   3ecf8:	4b e1       	ldi	r20, 0x1B	; 27
   3ecfa:	34 2e       	mov	r3, r20
#endif

				switch (msgParseState) {
				case ST_START:
					if (c == MESSAGE_START) {
						msgParseState = ST_GET_SEQ_NUM;
   3ecfc:	81 e0       	ldi	r24, 0x01	; 1
   3ecfe:	f6 cc       	rjmp	.-1556   	; 0x3e6ec <main+0x1dc>
					if (c == TOKEN) {
						msgParseState = ST_GET_DATA;
						checksum ^= c;
						ii = 0;
					} else {
						msgParseState = ST_START;
   3ed00:	80 e0       	ldi	r24, 0x00	; 0
   3ed02:	f4 cc       	rjmp	.-1560   	; 0x3e6ec <main+0x1dc>
   3ed04:	c2 5e       	subi	r28, 0xE2	; 226
   3ed06:	de 4f       	sbci	r29, 0xFE	; 254
   3ed08:	39 83       	std	Y+1, r19	; 0x01
   3ed0a:	28 83       	st	Y, r18
   3ed0c:	ce 51       	subi	r28, 0x1E	; 30
   3ed0e:	d1 40       	sbci	r29, 0x01	; 1

				case ST_GET_DATA:
					msgBuffer[ii++] = c;
					checksum ^= c;
					if (ii == msgLength) {
						msgParseState = ST_GET_CHECK;
   3ed10:	86 e0       	ldi	r24, 0x06	; 6
   3ed12:	ec cc       	rjmp	.-1576   	; 0x3e6ec <main+0x1dc>

0003ed14 <__divmodhi4>:
   3ed14:	97 fb       	bst	r25, 7
   3ed16:	07 2e       	mov	r0, r23
   3ed18:	16 f4       	brtc	.+4      	; 0x3ed1e <__divmodhi4+0xa>
   3ed1a:	00 94       	com	r0
   3ed1c:	06 d0       	rcall	.+12     	; 0x3ed2a <__divmodhi4_neg1>
   3ed1e:	77 fd       	sbrc	r23, 7
   3ed20:	08 d0       	rcall	.+16     	; 0x3ed32 <__divmodhi4_neg2>
   3ed22:	27 d0       	rcall	.+78     	; 0x3ed72 <__udivmodhi4>
   3ed24:	07 fc       	sbrc	r0, 7
   3ed26:	05 d0       	rcall	.+10     	; 0x3ed32 <__divmodhi4_neg2>
   3ed28:	3e f4       	brtc	.+14     	; 0x3ed38 <__divmodhi4_exit>

0003ed2a <__divmodhi4_neg1>:
   3ed2a:	90 95       	com	r25
   3ed2c:	81 95       	neg	r24
   3ed2e:	9f 4f       	sbci	r25, 0xFF	; 255
   3ed30:	08 95       	ret

0003ed32 <__divmodhi4_neg2>:
   3ed32:	70 95       	com	r23
   3ed34:	61 95       	neg	r22
   3ed36:	7f 4f       	sbci	r23, 0xFF	; 255

0003ed38 <__divmodhi4_exit>:
   3ed38:	08 95       	ret

0003ed3a <__divmodsi4>:
   3ed3a:	05 2e       	mov	r0, r21
   3ed3c:	97 fb       	bst	r25, 7
   3ed3e:	16 f4       	brtc	.+4      	; 0x3ed44 <__divmodsi4+0xa>
   3ed40:	00 94       	com	r0
   3ed42:	0f d0       	rcall	.+30     	; 0x3ed62 <__negsi2>
   3ed44:	57 fd       	sbrc	r21, 7
   3ed46:	05 d0       	rcall	.+10     	; 0x3ed52 <__divmodsi4_neg2>
   3ed48:	28 d0       	rcall	.+80     	; 0x3ed9a <__udivmodsi4>
   3ed4a:	07 fc       	sbrc	r0, 7
   3ed4c:	02 d0       	rcall	.+4      	; 0x3ed52 <__divmodsi4_neg2>
   3ed4e:	46 f4       	brtc	.+16     	; 0x3ed60 <__divmodsi4_exit>
   3ed50:	08 c0       	rjmp	.+16     	; 0x3ed62 <__negsi2>

0003ed52 <__divmodsi4_neg2>:
   3ed52:	50 95       	com	r21
   3ed54:	40 95       	com	r20
   3ed56:	30 95       	com	r19
   3ed58:	21 95       	neg	r18
   3ed5a:	3f 4f       	sbci	r19, 0xFF	; 255
   3ed5c:	4f 4f       	sbci	r20, 0xFF	; 255
   3ed5e:	5f 4f       	sbci	r21, 0xFF	; 255

0003ed60 <__divmodsi4_exit>:
   3ed60:	08 95       	ret

0003ed62 <__negsi2>:
   3ed62:	90 95       	com	r25
   3ed64:	80 95       	com	r24
   3ed66:	70 95       	com	r23
   3ed68:	61 95       	neg	r22
   3ed6a:	7f 4f       	sbci	r23, 0xFF	; 255
   3ed6c:	8f 4f       	sbci	r24, 0xFF	; 255
   3ed6e:	9f 4f       	sbci	r25, 0xFF	; 255
   3ed70:	08 95       	ret

0003ed72 <__udivmodhi4>:
   3ed72:	aa 1b       	sub	r26, r26
   3ed74:	bb 1b       	sub	r27, r27
   3ed76:	51 e1       	ldi	r21, 0x11	; 17
   3ed78:	07 c0       	rjmp	.+14     	; 0x3ed88 <__udivmodhi4_ep>

0003ed7a <__udivmodhi4_loop>:
   3ed7a:	aa 1f       	adc	r26, r26
   3ed7c:	bb 1f       	adc	r27, r27
   3ed7e:	a6 17       	cp	r26, r22
   3ed80:	b7 07       	cpc	r27, r23
   3ed82:	10 f0       	brcs	.+4      	; 0x3ed88 <__udivmodhi4_ep>
   3ed84:	a6 1b       	sub	r26, r22
   3ed86:	b7 0b       	sbc	r27, r23

0003ed88 <__udivmodhi4_ep>:
   3ed88:	88 1f       	adc	r24, r24
   3ed8a:	99 1f       	adc	r25, r25
   3ed8c:	5a 95       	dec	r21
   3ed8e:	a9 f7       	brne	.-22     	; 0x3ed7a <__udivmodhi4_loop>
   3ed90:	80 95       	com	r24
   3ed92:	90 95       	com	r25
   3ed94:	bc 01       	movw	r22, r24
   3ed96:	cd 01       	movw	r24, r26
   3ed98:	08 95       	ret

0003ed9a <__udivmodsi4>:
   3ed9a:	a1 e2       	ldi	r26, 0x21	; 33
   3ed9c:	1a 2e       	mov	r1, r26
   3ed9e:	aa 1b       	sub	r26, r26
   3eda0:	bb 1b       	sub	r27, r27
   3eda2:	fd 01       	movw	r30, r26
   3eda4:	0d c0       	rjmp	.+26     	; 0x3edc0 <__udivmodsi4_ep>

0003eda6 <__udivmodsi4_loop>:
   3eda6:	aa 1f       	adc	r26, r26
   3eda8:	bb 1f       	adc	r27, r27
   3edaa:	ee 1f       	adc	r30, r30
   3edac:	ff 1f       	adc	r31, r31
   3edae:	a2 17       	cp	r26, r18
   3edb0:	b3 07       	cpc	r27, r19
   3edb2:	e4 07       	cpc	r30, r20
   3edb4:	f5 07       	cpc	r31, r21
   3edb6:	20 f0       	brcs	.+8      	; 0x3edc0 <__udivmodsi4_ep>
   3edb8:	a2 1b       	sub	r26, r18
   3edba:	b3 0b       	sbc	r27, r19
   3edbc:	e4 0b       	sbc	r30, r20
   3edbe:	f5 0b       	sbc	r31, r21

0003edc0 <__udivmodsi4_ep>:
   3edc0:	66 1f       	adc	r22, r22
   3edc2:	77 1f       	adc	r23, r23
   3edc4:	88 1f       	adc	r24, r24
   3edc6:	99 1f       	adc	r25, r25
   3edc8:	1a 94       	dec	r1
   3edca:	69 f7       	brne	.-38     	; 0x3eda6 <__udivmodsi4_loop>
   3edcc:	60 95       	com	r22
   3edce:	70 95       	com	r23
   3edd0:	80 95       	com	r24
   3edd2:	90 95       	com	r25
   3edd4:	9b 01       	movw	r18, r22
   3edd6:	ac 01       	movw	r20, r24
   3edd8:	bd 01       	movw	r22, r26
   3edda:	cf 01       	movw	r24, r30
   3eddc:	08 95       	ret

0003edde <memset>:
   3edde:	dc 01       	movw	r26, r24
   3ede0:	01 c0       	rjmp	.+2      	; 0x3ede4 <memset+0x6>
   3ede2:	6d 93       	st	X+, r22
   3ede4:	41 50       	subi	r20, 0x01	; 1
   3ede6:	50 40       	sbci	r21, 0x00	; 0
   3ede8:	e0 f7       	brcc	.-8      	; 0x3ede2 <memset+0x4>
   3edea:	08 95       	ret

0003edec <__eerd_byte_m2560>:
   3edec:	f9 99       	sbic	0x1f, 1	; 31
   3edee:	fe cf       	rjmp	.-4      	; 0x3edec <__eerd_byte_m2560>
   3edf0:	92 bd       	out	0x22, r25	; 34
   3edf2:	81 bd       	out	0x21, r24	; 33
   3edf4:	f8 9a       	sbi	0x1f, 0	; 31
   3edf6:	99 27       	eor	r25, r25
   3edf8:	80 b5       	in	r24, 0x20	; 32
   3edfa:	08 95       	ret

0003edfc <__eewr_byte_m2560>:
   3edfc:	26 2f       	mov	r18, r22

0003edfe <__eewr_r18_m2560>:
   3edfe:	f9 99       	sbic	0x1f, 1	; 31
   3ee00:	fe cf       	rjmp	.-4      	; 0x3edfe <__eewr_r18_m2560>
   3ee02:	1f ba       	out	0x1f, r1	; 31
   3ee04:	92 bd       	out	0x22, r25	; 34
   3ee06:	81 bd       	out	0x21, r24	; 33
   3ee08:	20 bd       	out	0x20, r18	; 32
   3ee0a:	0f b6       	in	r0, 0x3f	; 63
   3ee0c:	f8 94       	cli
   3ee0e:	fa 9a       	sbi	0x1f, 2	; 31
   3ee10:	f9 9a       	sbi	0x1f, 1	; 31
   3ee12:	0f be       	out	0x3f, r0	; 63
   3ee14:	01 96       	adiw	r24, 0x01	; 1
   3ee16:	08 95       	ret

0003ee18 <_exit>:
   3ee18:	f8 94       	cli

0003ee1a <__stop_program>:
   3ee1a:	ff cf       	rjmp	.-2      	; 0x3ee1a <__stop_program>
