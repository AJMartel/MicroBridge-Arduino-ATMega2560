
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0003ef04  00000f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f04  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800204  00800204  00000f9c  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000023f  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000110  00000000  00000000  00001ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001016  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034f  00000000  00000000  00002ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00003345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00003c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010af  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	77 c0       	rjmp	.+238    	; 0x3e0f0 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	9c c0       	rjmp	.+312    	; 0x3e13e <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	9a c0       	rjmp	.+308    	; 0x3e13e <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	98 c0       	rjmp	.+304    	; 0x3e13e <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	96 c0       	rjmp	.+300    	; 0x3e13e <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	94 c0       	rjmp	.+296    	; 0x3e13e <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	92 c0       	rjmp	.+292    	; 0x3e13e <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	90 c0       	rjmp	.+288    	; 0x3e13e <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	8e c0       	rjmp	.+284    	; 0x3e13e <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	8c c0       	rjmp	.+280    	; 0x3e13e <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	8a c0       	rjmp	.+276    	; 0x3e13e <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	88 c0       	rjmp	.+272    	; 0x3e13e <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	86 c0       	rjmp	.+268    	; 0x3e13e <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	84 c0       	rjmp	.+264    	; 0x3e13e <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	82 c0       	rjmp	.+260    	; 0x3e13e <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	80 c0       	rjmp	.+256    	; 0x3e13e <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	7e c0       	rjmp	.+252    	; 0x3e13e <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	7c c0       	rjmp	.+248    	; 0x3e13e <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	7a c0       	rjmp	.+244    	; 0x3e13e <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	78 c0       	rjmp	.+240    	; 0x3e13e <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	76 c0       	rjmp	.+236    	; 0x3e13e <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	74 c0       	rjmp	.+232    	; 0x3e13e <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	72 c0       	rjmp	.+228    	; 0x3e13e <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	70 c0       	rjmp	.+224    	; 0x3e13e <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	6e c0       	rjmp	.+220    	; 0x3e13e <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	6c c0       	rjmp	.+216    	; 0x3e13e <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	6a c0       	rjmp	.+212    	; 0x3e13e <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	68 c0       	rjmp	.+208    	; 0x3e13e <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	66 c0       	rjmp	.+204    	; 0x3e13e <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	64 c0       	rjmp	.+200    	; 0x3e13e <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	62 c0       	rjmp	.+196    	; 0x3e13e <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	60 c0       	rjmp	.+192    	; 0x3e13e <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	5e c0       	rjmp	.+188    	; 0x3e13e <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	5c c0       	rjmp	.+184    	; 0x3e13e <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	5a c0       	rjmp	.+180    	; 0x3e13e <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	58 c0       	rjmp	.+176    	; 0x3e13e <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	56 c0       	rjmp	.+172    	; 0x3e13e <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	54 c0       	rjmp	.+168    	; 0x3e13e <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	52 c0       	rjmp	.+164    	; 0x3e13e <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	50 c0       	rjmp	.+160    	; 0x3e13e <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	4e c0       	rjmp	.+156    	; 0x3e13e <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	4c c0       	rjmp	.+152    	; 0x3e13e <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	4a c0       	rjmp	.+148    	; 0x3e13e <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	48 c0       	rjmp	.+144    	; 0x3e13e <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	46 c0       	rjmp	.+140    	; 0x3e13e <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	44 c0       	rjmp	.+136    	; 0x3e13e <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	42 c0       	rjmp	.+132    	; 0x3e13e <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	40 c0       	rjmp	.+128    	; 0x3e13e <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	3e c0       	rjmp	.+124    	; 0x3e13e <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	3c c0       	rjmp	.+120    	; 0x3e13e <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	3a c0       	rjmp	.+116    	; 0x3e13e <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	38 c0       	rjmp	.+112    	; 0x3e13e <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	36 c0       	rjmp	.+108    	; 0x3e13e <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	34 c0       	rjmp	.+104    	; 0x3e13e <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	32 c0       	rjmp	.+100    	; 0x3e13e <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	30 c0       	rjmp	.+96     	; 0x3e13e <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	2e c0       	rjmp	.+92     	; 0x3e13e <__bad_interrupt>
	...

0003e0e4 <gTextMsg_CPU_Name>:
   3e0e4:	41 54 6d 65 67 61 32 35 36 30 00 00                 ATmega2560..

0003e0f0 <__ctors_end>:
   3e0f0:	11 24       	eor	r1, r1
   3e0f2:	1f be       	out	0x3f, r1	; 63
   3e0f4:	cf ef       	ldi	r28, 0xFF	; 255
   3e0f6:	d1 e2       	ldi	r29, 0x21	; 33
   3e0f8:	de bf       	out	0x3e, r29	; 62
   3e0fa:	cd bf       	out	0x3d, r28	; 61
   3e0fc:	01 e0       	ldi	r16, 0x01	; 1
   3e0fe:	0c bf       	out	0x3c, r16	; 60

0003e100 <__do_copy_data>:
   3e100:	12 e0       	ldi	r17, 0x02	; 2
   3e102:	a0 e0       	ldi	r26, 0x00	; 0
   3e104:	b2 e0       	ldi	r27, 0x02	; 2
   3e106:	e4 e0       	ldi	r30, 0x04	; 4
   3e108:	ff ee       	ldi	r31, 0xEF	; 239
   3e10a:	03 e0       	ldi	r16, 0x03	; 3
   3e10c:	0b bf       	out	0x3b, r16	; 59
   3e10e:	02 c0       	rjmp	.+4      	; 0x3e114 <__do_copy_data+0x14>
   3e110:	07 90       	elpm	r0, Z+
   3e112:	0d 92       	st	X+, r0
   3e114:	a4 30       	cpi	r26, 0x04	; 4
   3e116:	b1 07       	cpc	r27, r17
   3e118:	d9 f7       	brne	.-10     	; 0x3e110 <__do_copy_data+0x10>
   3e11a:	1b be       	out	0x3b, r1	; 59

0003e11c <__do_clear_bss>:
   3e11c:	13 e0       	ldi	r17, 0x03	; 3
   3e11e:	a4 e0       	ldi	r26, 0x04	; 4
   3e120:	b2 e0       	ldi	r27, 0x02	; 2
   3e122:	01 c0       	rjmp	.+2      	; 0x3e126 <.do_clear_bss_start>

0003e124 <.do_clear_bss_loop>:
   3e124:	1d 92       	st	X+, r1

0003e126 <.do_clear_bss_start>:
   3e126:	a2 31       	cpi	r26, 0x12	; 18
   3e128:	b1 07       	cpc	r27, r17
   3e12a:	e1 f7       	brne	.-8      	; 0x3e124 <.do_clear_bss_loop>
   3e12c:	11 d2       	rcall	.+1058   	; 0x3e550 <main>
   3e12e:	e8 c6       	rjmp	.+3536   	; 0x3ef00 <_exit>

0003e130 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e130:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e132:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e134:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e136:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );
   3e138:	11 24       	eor	r1, r1
	// GCC depends on register r1 set to 0
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );
   3e13a:	1f be       	out	0x3f, r1	; 63
	// set SREG to 0
	asm volatile ( "jmp main");
   3e13c:	09 c2       	rjmp	.+1042   	; 0x3e550 <main>

0003e13e <__bad_interrupt>:
   3e13e:	60 cf       	rjmp	.-320    	; 0x3e000 <__vectors>

0003e140 <sendchar>:
//*****************************************************************************
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c) {
	UART_DATA_REG = c; // prepare transmission
   3e140:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)))
   3e144:	80 91 c0 00 	lds	r24, 0x00C0
   3e148:	86 ff       	sbrs	r24, 6
   3e14a:	fc cf       	rjmp	.-8      	; 0x3e144 <sendchar+0x4>
		; // wait until byte sent
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE); // delete TXCflag
   3e14c:	80 91 c0 00 	lds	r24, 0x00C0
   3e150:	80 64       	ori	r24, 0x40	; 64
   3e152:	80 93 c0 00 	sts	0x00C0, r24
}
   3e156:	08 95       	ret

0003e158 <transfer>:
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

#define LSBFIRST 0
#define MSBFIRST 1
uint8_t transfer(uint8_t _data) {
	SPDR = _data;
   3e158:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
   3e15a:	0d b4       	in	r0, 0x2d	; 45
   3e15c:	07 fe       	sbrs	r0, 7
   3e15e:	fd cf       	rjmp	.-6      	; 0x3e15a <transfer+0x2>
		;
	return SPDR;
   3e160:	8e b5       	in	r24, 0x2e	; 46
}
   3e162:	08 95       	ret

0003e164 <setDataMode>:
void setDataMode(uint8_t mode) {
	SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
   3e164:	9c b5       	in	r25, 0x2c	; 44
   3e166:	93 7f       	andi	r25, 0xF3	; 243
   3e168:	98 2b       	or	r25, r24
   3e16a:	9c bd       	out	0x2c, r25	; 44
}
   3e16c:	08 95       	ret

0003e16e <setBitOrder>:

void setBitOrder(uint8_t bitOrder) {
	if (bitOrder == LSBFIRST) {
   3e16e:	88 23       	and	r24, r24
   3e170:	19 f4       	brne	.+6      	; 0x3e178 <setBitOrder+0xa>
		SPCR |= _BV(DORD);
   3e172:	8c b5       	in	r24, 0x2c	; 44
   3e174:	80 62       	ori	r24, 0x20	; 32
   3e176:	02 c0       	rjmp	.+4      	; 0x3e17c <setBitOrder+0xe>
	} else {
		SPCR &= ~(_BV(DORD));
   3e178:	8c b5       	in	r24, 0x2c	; 44
   3e17a:	8f 7d       	andi	r24, 0xDF	; 223
   3e17c:	8c bd       	out	0x2c, r24	; 44
   3e17e:	08 95       	ret

0003e180 <setClockDivider>:
	}
}

void setClockDivider(uint8_t rate) {
	SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
   3e180:	2c b5       	in	r18, 0x2c	; 44
   3e182:	98 2f       	mov	r25, r24
   3e184:	93 70       	andi	r25, 0x03	; 3
   3e186:	2c 7f       	andi	r18, 0xFC	; 252
   3e188:	92 2b       	or	r25, r18
   3e18a:	9c bd       	out	0x2c, r25	; 44
	SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
   3e18c:	9d b5       	in	r25, 0x2d	; 45
   3e18e:	86 95       	lsr	r24
   3e190:	86 95       	lsr	r24
   3e192:	81 70       	andi	r24, 0x01	; 1
   3e194:	9e 7f       	andi	r25, 0xFE	; 254
   3e196:	89 2b       	or	r24, r25
   3e198:	8d bd       	out	0x2d, r24	; 45
}
   3e19a:	08 95       	ret

0003e19c <readStatus>:

/// return the STATUS register
#define SPIFLASH_STATUSREAD       0x05
uint8_t readStatus() {
	SS_LOW();
   3e19c:	2c 98       	cbi	0x05, 4	; 5
//	SS_MASTER_HIGH();
	transfer(SPIFLASH_STATUSREAD);
   3e19e:	85 e0       	ldi	r24, 0x05	; 5
   3e1a0:	db df       	rcall	.-74     	; 0x3e158 <transfer>
   3e1a2:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t status = transfer(0);
   3e1a4:	d9 df       	rcall	.-78     	; 0x3e158 <transfer>
   3e1a6:	2c 9a       	sbi	0x05, 4	; 5
   3e1a8:	08 95       	ret

0003e1aa <busy>:
	SS_HIGH();
   3e1aa:	f8 df       	rcall	.-16     	; 0x3e19c <readStatus>
//	SS_MASTER_LOW();
	return status;
}
   3e1ac:	81 70       	andi	r24, 0x01	; 1
uint8_t busy() {
	return readStatus() & 1;
   3e1ae:	08 95       	ret

0003e1b0 <command>:
   3e1b0:	cf 93       	push	r28
}
   3e1b2:	c8 2f       	mov	r28, r24
   3e1b4:	fa df       	rcall	.-12     	; 0x3e1aa <busy>

void command(uint8_t cmd) {
   3e1b6:	88 23       	and	r24, r24
   3e1b8:	e9 f7       	brne	.-6      	; 0x3e1b4 <command+0x4>

	while (busy())
   3e1ba:	2c 98       	cbi	0x05, 4	; 5
   3e1bc:	8c 2f       	mov	r24, r28
   3e1be:	cc df       	rcall	.-104    	; 0x3e158 <transfer>
   3e1c0:	cf 91       	pop	r28
		; //wait for any write/erase to complete
	SS_LOW();
   3e1c2:	08 95       	ret

0003e1c4 <spiReadReg>:
	transfer(cmd);
   3e1c4:	1f 93       	push	r17
   3e1c6:	cf 93       	push	r28
   3e1c8:	df 93       	push	r29
}
   3e1ca:	0f 92       	push	r0
   3e1cc:	0f 92       	push	r0

#define SPIFLASH_ARRAYREADLOWFREQ 0x03
uint8_t spiReadReg(uint32_t address) {
   3e1ce:	cd b7       	in	r28, 0x3d	; 61
   3e1d0:	de b7       	in	r29, 0x3e	; 62
   3e1d2:	18 2f       	mov	r17, r24
   3e1d4:	2c 98       	cbi	0x05, 4	; 5
   3e1d6:	83 e0       	ldi	r24, 0x03	; 3
   3e1d8:	6a 83       	std	Y+2, r22	; 0x02
   3e1da:	79 83       	std	Y+1, r23	; 0x01
   3e1dc:	e9 df       	rcall	.-46     	; 0x3e1b0 <command>
	SS_LOW();
   3e1de:	81 2f       	mov	r24, r17
	command(SPIFLASH_ARRAYREADLOWFREQ);
   3e1e0:	bb df       	rcall	.-138    	; 0x3e158 <transfer>
   3e1e2:	79 81       	ldd	r23, Y+1	; 0x01
   3e1e4:	87 2f       	mov	r24, r23
   3e1e6:	b8 df       	rcall	.-144    	; 0x3e158 <transfer>
   3e1e8:	6a 81       	ldd	r22, Y+2	; 0x02
	transfer(address >> 16);
   3e1ea:	86 2f       	mov	r24, r22
   3e1ec:	b5 df       	rcall	.-150    	; 0x3e158 <transfer>
   3e1ee:	80 e0       	ldi	r24, 0x00	; 0
	transfer(address >> 8);
   3e1f0:	b3 df       	rcall	.-154    	; 0x3e158 <transfer>
   3e1f2:	2c 9a       	sbi	0x05, 4	; 5
   3e1f4:	0f 90       	pop	r0
   3e1f6:	0f 90       	pop	r0
	transfer(address);
   3e1f8:	df 91       	pop	r29
   3e1fa:	cf 91       	pop	r28
   3e1fc:	1f 91       	pop	r17
   3e1fe:	08 95       	ret

0003e200 <delay_ms>:
	uint8_t result = transfer(0);
   3e200:	20 e0       	ldi	r18, 0x00	; 0
   3e202:	30 e0       	ldi	r19, 0x00	; 0
   3e204:	08 c0       	rjmp	.+16     	; 0x3e216 <delay_ms+0x16>
	SS_HIGH();
   3e206:	ef ec       	ldi	r30, 0xCF	; 207
	return result;
}
   3e208:	f7 e0       	ldi	r31, 0x07	; 7
   3e20a:	31 97       	sbiw	r30, 0x01	; 1
   3e20c:	f1 f7       	brne	.-4      	; 0x3e20a <delay_ms+0xa>
   3e20e:	00 c0       	rjmp	.+0      	; 0x3e210 <delay_ms+0x10>
   3e210:	00 00       	nop
   3e212:	2f 5f       	subi	r18, 0xFF	; 255
}

//*****************************************************************************
void delay_ms(unsigned int timedelay) {
	unsigned int i;
	for (i = 0; i < timedelay; i++) {
   3e214:	3f 4f       	sbci	r19, 0xFF	; 255
   3e216:	28 17       	cp	r18, r24
   3e218:	39 07       	cpc	r19, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e21a:	a9 f7       	brne	.-22     	; 0x3e206 <delay_ms+0x6>
   3e21c:	08 95       	ret

0003e21e <dec_hex>:
   3e21e:	cf 92       	push	r12
   3e220:	df 92       	push	r13
   3e222:	ef 92       	push	r14
   3e224:	ff 92       	push	r15
   3e226:	cf 93       	push	r28
   3e228:	df 93       	push	r29
   3e22a:	cd b7       	in	r28, 0x3d	; 61
   3e22c:	de b7       	in	r29, 0x3e	; 62
   3e22e:	c8 5c       	subi	r28, 0xC8	; 200
		_delay_ms(0.5);
	}
}
   3e230:	d0 40       	sbci	r29, 0x00	; 0
	return UART_DATA_REG;
}


void dec_hex(long int num)   // Function Definition
{
   3e232:	0f b6       	in	r0, 0x3f	; 63
   3e234:	f8 94       	cli
   3e236:	de bf       	out	0x3e, r29	; 62
   3e238:	0f be       	out	0x3f, r0	; 63
   3e23a:	cd bf       	out	0x3d, r28	; 61
   3e23c:	6b 01       	movw	r12, r22
   3e23e:	7c 01       	movw	r14, r24
   3e240:	61 15       	cp	r22, r1
   3e242:	71 05       	cpc	r23, r1
   3e244:	81 05       	cpc	r24, r1
   3e246:	91 05       	cpc	r25, r1
   3e248:	21 f4       	brne	.+8      	; 0x3e252 <dec_hex+0x34>
   3e24a:	80 e3       	ldi	r24, 0x30	; 48
   3e24c:	79 df       	rcall	.-270    	; 0x3e140 <sendchar>
   3e24e:	80 e3       	ldi	r24, 0x30	; 48
   3e250:	77 df       	rcall	.-274    	; 0x3e140 <sendchar>
   3e252:	fe 01       	movw	r30, r28
long int rem[50],i=0,length=0;
if(num == 0){
   3e254:	31 96       	adiw	r30, 0x01	; 1
   3e256:	80 e0       	ldi	r24, 0x00	; 0
   3e258:	90 e0       	ldi	r25, 0x00	; 0
   3e25a:	dc 01       	movw	r26, r24
   3e25c:	14 c0       	rjmp	.+40     	; 0x3e286 <dec_hex+0x68>
	sendchar('0');
   3e25e:	b7 01       	movw	r22, r14
   3e260:	a6 01       	movw	r20, r12
   3e262:	4f 70       	andi	r20, 0x0F	; 15
	sendchar('0');
   3e264:	50 70       	andi	r21, 0x00	; 0
   3e266:	60 70       	andi	r22, 0x00	; 0
   3e268:	70 70       	andi	r23, 0x00	; 0
   3e26a:	41 93       	st	Z+, r20
   3e26c:	51 93       	st	Z+, r21
	return UART_DATA_REG;
}


void dec_hex(long int num)   // Function Definition
{
   3e26e:	61 93       	st	Z+, r22
   3e270:	71 93       	st	Z+, r23
   3e272:	24 e0       	ldi	r18, 0x04	; 4
   3e274:	f5 94       	asr	r15
	sendchar('0');
	sendchar('0');
}
while(num>0)
   {
      rem[i]=num%16;
   3e276:	e7 94       	ror	r14
   3e278:	d7 94       	ror	r13
   3e27a:	c7 94       	ror	r12
   3e27c:	2a 95       	dec	r18
   3e27e:	d1 f7       	brne	.-12     	; 0x3e274 <dec_hex+0x56>
   3e280:	01 96       	adiw	r24, 0x01	; 1
   3e282:	a1 1d       	adc	r26, r1
   3e284:	b1 1d       	adc	r27, r1
   3e286:	1c 14       	cp	r1, r12
   3e288:	1d 04       	cpc	r1, r13
      num=num/16;
   3e28a:	1e 04       	cpc	r1, r14
   3e28c:	1f 04       	cpc	r1, r15
   3e28e:	3c f3       	brlt	.-50     	; 0x3e25e <dec_hex+0x40>
   3e290:	6c 01       	movw	r12, r24
   3e292:	7d 01       	movw	r14, r26
   3e294:	8d c0       	rjmp	.+282    	; 0x3e3b0 <dec_hex+0x192>
   3e296:	f6 01       	movw	r30, r12
      i++;
   3e298:	ee 0f       	add	r30, r30
   3e29a:	ff 1f       	adc	r31, r31
   3e29c:	ee 0f       	add	r30, r30
long int rem[50],i=0,length=0;
if(num == 0){
	sendchar('0');
	sendchar('0');
}
while(num>0)
   3e29e:	ff 1f       	adc	r31, r31
   3e2a0:	81 e0       	ldi	r24, 0x01	; 1
   3e2a2:	90 e0       	ldi	r25, 0x00	; 0
   3e2a4:	8c 0f       	add	r24, r28
   3e2a6:	9d 1f       	adc	r25, r29
      num=num/16;
      i++;
      length++;
   }

for(i=length-1;i>=0;i--)
   3e2a8:	e8 0f       	add	r30, r24
   3e2aa:	f9 1f       	adc	r31, r25
   3e2ac:	80 81       	ld	r24, Z
	}
	return UART_DATA_REG;
}


void dec_hex(long int num)   // Function Definition
   3e2ae:	91 81       	ldd	r25, Z+1	; 0x01
   3e2b0:	a2 81       	ldd	r26, Z+2	; 0x02
   3e2b2:	b3 81       	ldd	r27, Z+3	; 0x03
   3e2b4:	87 30       	cpi	r24, 0x07	; 7
   3e2b6:	91 05       	cpc	r25, r1
   3e2b8:	a1 05       	cpc	r26, r1
   3e2ba:	b1 05       	cpc	r27, r1
   3e2bc:	09 f4       	brne	.+2      	; 0x3e2c0 <dec_hex+0xa2>
   3e2be:	64 c0       	rjmp	.+200    	; 0x3e388 <dec_hex+0x16a>
   3e2c0:	88 30       	cpi	r24, 0x08	; 8
   3e2c2:	91 05       	cpc	r25, r1
      length++;
   }

for(i=length-1;i>=0;i--)
  {
    switch(rem[i])
   3e2c4:	a1 05       	cpc	r26, r1
   3e2c6:	b1 05       	cpc	r27, r1
   3e2c8:	3c f5       	brge	.+78     	; 0x3e318 <dec_hex+0xfa>
   3e2ca:	83 30       	cpi	r24, 0x03	; 3
   3e2cc:	91 05       	cpc	r25, r1
   3e2ce:	a1 05       	cpc	r26, r1
   3e2d0:	b1 05       	cpc	r27, r1
   3e2d2:	09 f4       	brne	.+2      	; 0x3e2d6 <dec_hex+0xb8>
   3e2d4:	51 c0       	rjmp	.+162    	; 0x3e378 <dec_hex+0x15a>
   3e2d6:	84 30       	cpi	r24, 0x04	; 4
   3e2d8:	91 05       	cpc	r25, r1
   3e2da:	a1 05       	cpc	r26, r1
   3e2dc:	b1 05       	cpc	r27, r1
   3e2de:	8c f4       	brge	.+34     	; 0x3e302 <dec_hex+0xe4>
   3e2e0:	81 30       	cpi	r24, 0x01	; 1
   3e2e2:	91 05       	cpc	r25, r1
   3e2e4:	a1 05       	cpc	r26, r1
   3e2e6:	b1 05       	cpc	r27, r1
   3e2e8:	09 f4       	brne	.+2      	; 0x3e2ec <dec_hex+0xce>
   3e2ea:	42 c0       	rjmp	.+132    	; 0x3e370 <dec_hex+0x152>
   3e2ec:	82 30       	cpi	r24, 0x02	; 2
   3e2ee:	91 05       	cpc	r25, r1
   3e2f0:	a1 05       	cpc	r26, r1
   3e2f2:	b1 05       	cpc	r27, r1
   3e2f4:	0c f0       	brlt	.+2      	; 0x3e2f8 <dec_hex+0xda>
   3e2f6:	3e c0       	rjmp	.+124    	; 0x3e374 <dec_hex+0x156>
   3e2f8:	00 97       	sbiw	r24, 0x00	; 0
   3e2fa:	a1 05       	cpc	r26, r1
   3e2fc:	b1 05       	cpc	r27, r1
   3e2fe:	b1 f1       	breq	.+108    	; 0x3e36c <dec_hex+0x14e>
   3e300:	55 c0       	rjmp	.+170    	; 0x3e3ac <dec_hex+0x18e>
   3e302:	85 30       	cpi	r24, 0x05	; 5
   3e304:	91 05       	cpc	r25, r1
   3e306:	a1 05       	cpc	r26, r1
   3e308:	b1 05       	cpc	r27, r1
   3e30a:	d1 f1       	breq	.+116    	; 0x3e380 <dec_hex+0x162>
   3e30c:	86 30       	cpi	r24, 0x06	; 6
   3e30e:	91 05       	cpc	r25, r1
   3e310:	a1 05       	cpc	r26, r1
   3e312:	b1 05       	cpc	r27, r1
   3e314:	bc f5       	brge	.+110    	; 0x3e384 <dec_hex+0x166>
   3e316:	32 c0       	rjmp	.+100    	; 0x3e37c <dec_hex+0x15e>
   3e318:	8b 30       	cpi	r24, 0x0B	; 11
   3e31a:	91 05       	cpc	r25, r1
   3e31c:	a1 05       	cpc	r26, r1
   3e31e:	b1 05       	cpc	r27, r1
   3e320:	d9 f1       	breq	.+118    	; 0x3e398 <dec_hex+0x17a>
   3e322:	8c 30       	cpi	r24, 0x0C	; 12
   3e324:	91 05       	cpc	r25, r1
   3e326:	a1 05       	cpc	r26, r1
   3e328:	b1 05       	cpc	r27, r1
   3e32a:	5c f4       	brge	.+22     	; 0x3e342 <dec_hex+0x124>
   3e32c:	89 30       	cpi	r24, 0x09	; 9
   3e32e:	91 05       	cpc	r25, r1
   3e330:	a1 05       	cpc	r26, r1
   3e332:	b1 05       	cpc	r27, r1
   3e334:	69 f1       	breq	.+90     	; 0x3e390 <dec_hex+0x172>
   3e336:	8a 30       	cpi	r24, 0x0A	; 10
   3e338:	91 05       	cpc	r25, r1
   3e33a:	a1 05       	cpc	r26, r1
   3e33c:	b1 05       	cpc	r27, r1
   3e33e:	54 f5       	brge	.+84     	; 0x3e394 <dec_hex+0x176>
   3e340:	25 c0       	rjmp	.+74     	; 0x3e38c <dec_hex+0x16e>
   3e342:	8d 30       	cpi	r24, 0x0D	; 13
   3e344:	91 05       	cpc	r25, r1
   3e346:	a1 05       	cpc	r26, r1
   3e348:	b1 05       	cpc	r27, r1
   3e34a:	51 f1       	breq	.+84     	; 0x3e3a0 <dec_hex+0x182>
   3e34c:	8d 30       	cpi	r24, 0x0D	; 13
   3e34e:	91 05       	cpc	r25, r1
   3e350:	a1 05       	cpc	r26, r1
   3e352:	b1 05       	cpc	r27, r1
   3e354:	1c f1       	brlt	.+70     	; 0x3e39c <dec_hex+0x17e>
   3e356:	8e 30       	cpi	r24, 0x0E	; 14
   3e358:	91 05       	cpc	r25, r1
   3e35a:	a1 05       	cpc	r26, r1
   3e35c:	b1 05       	cpc	r27, r1
   3e35e:	11 f1       	breq	.+68     	; 0x3e3a4 <dec_hex+0x186>
   3e360:	8f 30       	cpi	r24, 0x0F	; 15
   3e362:	91 05       	cpc	r25, r1
   3e364:	a1 05       	cpc	r26, r1
   3e366:	b1 05       	cpc	r27, r1
   3e368:	09 f5       	brne	.+66     	; 0x3e3ac <dec_hex+0x18e>
   3e36a:	1e c0       	rjmp	.+60     	; 0x3e3a8 <dec_hex+0x18a>
   3e36c:	80 e3       	ldi	r24, 0x30	; 48
   3e36e:	1f c0       	rjmp	.+62     	; 0x3e3ae <dec_hex+0x190>
   3e370:	81 e3       	ldi	r24, 0x31	; 49
   3e372:	1d c0       	rjmp	.+58     	; 0x3e3ae <dec_hex+0x190>
   3e374:	82 e3       	ldi	r24, 0x32	; 50
   3e376:	1b c0       	rjmp	.+54     	; 0x3e3ae <dec_hex+0x190>
   3e378:	83 e3       	ldi	r24, 0x33	; 51
   3e37a:	19 c0       	rjmp	.+50     	; 0x3e3ae <dec_hex+0x190>
   3e37c:	84 e3       	ldi	r24, 0x34	; 52
   3e37e:	17 c0       	rjmp	.+46     	; 0x3e3ae <dec_hex+0x190>
   3e380:	85 e3       	ldi	r24, 0x35	; 53
   3e382:	15 c0       	rjmp	.+42     	; 0x3e3ae <dec_hex+0x190>
    {
    case 0:
        sendchar('0');
   3e384:	86 e3       	ldi	r24, 0x36	; 54
   3e386:	13 c0       	rjmp	.+38     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 1:
        sendchar('1');
   3e388:	87 e3       	ldi	r24, 0x37	; 55
   3e38a:	11 c0       	rjmp	.+34     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 2:
        sendchar('2');
   3e38c:	88 e3       	ldi	r24, 0x38	; 56
   3e38e:	0f c0       	rjmp	.+30     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 3:
        sendchar('3');
   3e390:	89 e3       	ldi	r24, 0x39	; 57
   3e392:	0d c0       	rjmp	.+26     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 4:
        sendchar('4');
   3e394:	81 e4       	ldi	r24, 0x41	; 65
   3e396:	0b c0       	rjmp	.+22     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 5:
        sendchar('5');
   3e398:	82 e4       	ldi	r24, 0x42	; 66
   3e39a:	09 c0       	rjmp	.+18     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 6:
        sendchar('6');
   3e39c:	83 e4       	ldi	r24, 0x43	; 67
   3e39e:	07 c0       	rjmp	.+14     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 7:
        sendchar('7');
   3e3a0:	84 e4       	ldi	r24, 0x44	; 68
   3e3a2:	05 c0       	rjmp	.+10     	; 0x3e3ae <dec_hex+0x190>
        break;
    case 8:
        sendchar('8');
   3e3a4:	85 e4       	ldi	r24, 0x45	; 69
   3e3a6:	03 c0       	rjmp	.+6      	; 0x3e3ae <dec_hex+0x190>
        break;
    case 9:
        sendchar('9');
   3e3a8:	86 e4       	ldi	r24, 0x46	; 70
   3e3aa:	01 c0       	rjmp	.+2      	; 0x3e3ae <dec_hex+0x190>
        break;
      case 10:
          sendchar('A');
   3e3ac:	88 e5       	ldi	r24, 0x58	; 88
   3e3ae:	c8 de       	rcall	.-624    	; 0x3e140 <sendchar>
          break;
      case 11:
    	  sendchar('B');
   3e3b0:	08 94       	sec
   3e3b2:	c1 08       	sbc	r12, r1
          break;
      case 12:
    	  sendchar('C');
   3e3b4:	d1 08       	sbc	r13, r1
   3e3b6:	e1 08       	sbc	r14, r1
          break;
      case 13:
    	  sendchar('D');
   3e3b8:	f1 08       	sbc	r15, r1
   3e3ba:	9f ef       	ldi	r25, 0xFF	; 255
          break;
      case 14:
    	  sendchar('E');
   3e3bc:	c9 16       	cp	r12, r25
   3e3be:	9f ef       	ldi	r25, 0xFF	; 255
          break;
      case 15:
    	  sendchar('F');
   3e3c0:	d9 06       	cpc	r13, r25
   3e3c2:	9f ef       	ldi	r25, 0xFF	; 255
          break;
      default :
         sendchar('X');
   3e3c4:	e9 06       	cpc	r14, r25
   3e3c6:	9f ef       	ldi	r25, 0xFF	; 255
   3e3c8:	f9 06       	cpc	r15, r25
      num=num/16;
      i++;
      length++;
   }

for(i=length-1;i>=0;i--)
   3e3ca:	09 f0       	breq	.+2      	; 0x3e3ce <dec_hex+0x1b0>
   3e3cc:	64 cf       	rjmp	.-312    	; 0x3e296 <dec_hex+0x78>
   3e3ce:	c8 53       	subi	r28, 0x38	; 56
   3e3d0:	df 4f       	sbci	r29, 0xFF	; 255
   3e3d2:	0f b6       	in	r0, 0x3f	; 63
   3e3d4:	f8 94       	cli
   3e3d6:	de bf       	out	0x3e, r29	; 62
   3e3d8:	0f be       	out	0x3f, r0	; 63
   3e3da:	cd bf       	out	0x3d, r28	; 61
   3e3dc:	df 91       	pop	r29
   3e3de:	cf 91       	pop	r28
   3e3e0:	ff 90       	pop	r15
   3e3e2:	ef 90       	pop	r14
   3e3e4:	df 90       	pop	r13
   3e3e6:	cf 90       	pop	r12
      default :
         sendchar('X');
         break;
    }
  }
}
   3e3e8:	08 95       	ret

0003e3ea <PrintFromPROGMEM>:
   3e3ea:	cf 93       	push	r28
   3e3ec:	df 93       	push	r29
   3e3ee:	ec 01       	movw	r28, r24
   3e3f0:	c6 0f       	add	r28, r22
   3e3f2:	d1 1d       	adc	r29, r1
   3e3f4:	ce 01       	movw	r24, r28
   3e3f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e3f8:	b0 e0       	ldi	r27, 0x00	; 0
   3e3fa:	21 96       	adiw	r28, 0x01	; 1
   3e3fc:	ab bf       	out	0x3b, r26	; 59
   3e3fe:	fc 01       	movw	r30, r24
   3e400:	87 91       	elpm	r24, Z+
   3e402:	88 23       	and	r24, r24
const char gTextMsg_CPU_Name[] PROGMEM = "UNKNOWN";
#endif

//************************************************************************
void PrintFromPROGMEM(const void *dataPtr, unsigned char offset)
{
   3e404:	11 f0       	breq	.+4      	; 0x3e40a <PrintFromPROGMEM+0x20>
   3e406:	9c de       	rcall	.-712    	; 0x3e140 <sendchar>
	char theChar;

	dataPtr += offset;
   3e408:	f5 cf       	rjmp	.-22     	; 0x3e3f4 <PrintFromPROGMEM+0xa>
   3e40a:	df 91       	pop	r29
   3e40c:	cf 91       	pop	r28

	do {
#if (FLASHEND > 0x10000)
		theChar = pgm_read_byte_far((uint16_t)dataPtr++);
   3e40e:	08 95       	ret

0003e410 <PrintNewLine>:
   3e410:	8d e0       	ldi	r24, 0x0D	; 13
   3e412:	96 de       	rcall	.-724    	; 0x3e140 <sendchar>
   3e414:	8a e0       	ldi	r24, 0x0A	; 10
   3e416:	94 ce       	rjmp	.-728    	; 0x3e140 <sendchar>

0003e418 <PrintFromPROGMEMln>:
   3e418:	e8 df       	rcall	.-48     	; 0x3e3ea <PrintFromPROGMEM>
   3e41a:	fa cf       	rjmp	.-12     	; 0x3e410 <PrintNewLine>

0003e41c <PrintString>:
#else
		theChar = pgm_read_byte_near((uint16_t)dataPtr++);
#endif
		if (theChar != 0)
   3e41c:	cf 93       	push	r28
   3e41e:	df 93       	push	r29
		{
			sendchar(theChar);
   3e420:	ec 01       	movw	r28, r24
   3e422:	89 91       	ld	r24, Y+
   3e424:	88 23       	and	r24, r24
		}
	}while (theChar != 0);
}
   3e426:	11 f0       	breq	.+4      	; 0x3e42c <PrintString+0x10>
   3e428:	8b de       	rcall	.-746    	; 0x3e140 <sendchar>
   3e42a:	fb cf       	rjmp	.-10     	; 0x3e422 <PrintString+0x6>

//************************************************************************
void PrintNewLine(void)
{
	sendchar(0x0d);
   3e42c:	df 91       	pop	r29
   3e42e:	cf 91       	pop	r28
   3e430:	08 95       	ret

0003e432 <PrintHexByte>:
	sendchar(0x0a);
   3e432:	cf 93       	push	r28
   3e434:	c8 2f       	mov	r28, r24
   3e436:	98 2f       	mov	r25, r24
}
   3e438:	92 95       	swap	r25

//************************************************************************
void PrintFromPROGMEMln(const void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e43a:	9f 70       	andi	r25, 0x0F	; 15
   3e43c:	89 2f       	mov	r24, r25

	PrintNewLine();
   3e43e:	80 5d       	subi	r24, 0xD0	; 208
   3e440:	8a 33       	cpi	r24, 0x3A	; 58
}
   3e442:	08 f0       	brcs	.+2      	; 0x3e446 <PrintHexByte+0x14>

//************************************************************************
void PrintString(char *textString)
{
   3e444:	89 5f       	subi	r24, 0xF9	; 249
   3e446:	7c de       	rcall	.-776    	; 0x3e140 <sendchar>
   3e448:	cf 70       	andi	r28, 0x0F	; 15

	theChar = 1;
	ii = 0;
	while (theChar != 0)
	{
		theChar = textString[ii];
   3e44a:	8c 2f       	mov	r24, r28
		if (theChar != 0)
   3e44c:	80 5d       	subi	r24, 0xD0	; 208
   3e44e:	8a 33       	cpi	r24, 0x3A	; 58
		{
			sendchar(theChar);
   3e450:	08 f0       	brcs	.+2      	; 0x3e454 <PrintHexByte+0x22>
   3e452:	89 5f       	subi	r24, 0xF9	; 249
   3e454:	75 de       	rcall	.-790    	; 0x3e140 <sendchar>
		}
		ii++;
	}
}
   3e456:	cf 91       	pop	r28
   3e458:	08 95       	ret

0003e45a <PrintDecInt>:
   3e45a:	0f 93       	push	r16

//************************************************************************
void PrintHexByte(unsigned char theByte)
{
   3e45c:	1f 93       	push	r17
   3e45e:	cf 93       	push	r28
	char theChar;

	theChar = 0x30 + ((theByte >> 4) & 0x0f);
   3e460:	df 93       	push	r29
   3e462:	ec 01       	movw	r28, r24
   3e464:	8b 01       	movw	r16, r22
   3e466:	85 36       	cpi	r24, 0x65	; 101
   3e468:	91 05       	cpc	r25, r1
	if (theChar > 0x39)
   3e46a:	1c f4       	brge	.+6      	; 0x3e472 <PrintDecInt+0x18>
   3e46c:	63 30       	cpi	r22, 0x03	; 3
	{
		theChar += 7;
   3e46e:	71 05       	cpc	r23, r1
	}
	sendchar(theChar );
   3e470:	3c f0       	brlt	.+14     	; 0x3e480 <PrintDecInt+0x26>
   3e472:	ce 01       	movw	r24, r28

	theChar = 0x30 + (theByte & 0x0f);
   3e474:	64 e6       	ldi	r22, 0x64	; 100
   3e476:	70 e0       	ldi	r23, 0x00	; 0
   3e478:	c2 d4       	rcall	.+2436   	; 0x3edfe <__divmodhi4>
	if (theChar > 0x39)
   3e47a:	86 2f       	mov	r24, r22
   3e47c:	80 5d       	subi	r24, 0xD0	; 208
	{
		theChar += 7;
   3e47e:	60 de       	rcall	.-832    	; 0x3e140 <sendchar>
	}
	sendchar(theChar );
   3e480:	cb 30       	cpi	r28, 0x0B	; 11
   3e482:	d1 05       	cpc	r29, r1
}
   3e484:	1c f4       	brge	.+6      	; 0x3e48c <PrintDecInt+0x32>
   3e486:	02 30       	cpi	r16, 0x02	; 2

//************************************************************************
void PrintDecInt(int theNumber, int digitCnt)
{
   3e488:	11 05       	cpc	r17, r1
   3e48a:	54 f0       	brlt	.+20     	; 0x3e4a0 <PrintDecInt+0x46>
   3e48c:	ce 01       	movw	r24, r28
   3e48e:	64 e6       	ldi	r22, 0x64	; 100
   3e490:	70 e0       	ldi	r23, 0x00	; 0
   3e492:	b5 d4       	rcall	.+2410   	; 0x3edfe <__divmodhi4>
	int theChar;
	int myNumber;

	myNumber = theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e494:	6a e0       	ldi	r22, 0x0A	; 10
   3e496:	70 e0       	ldi	r23, 0x00	; 0
   3e498:	b2 d4       	rcall	.+2404   	; 0x3edfe <__divmodhi4>
   3e49a:	86 2f       	mov	r24, r22
   3e49c:	80 5d       	subi	r24, 0xD0	; 208
   3e49e:	50 de       	rcall	.-864    	; 0x3e140 <sendchar>
	{
		theChar = 0x30 + myNumber / 100;
   3e4a0:	ce 01       	movw	r24, r28
   3e4a2:	6a e0       	ldi	r22, 0x0A	; 10
   3e4a4:	70 e0       	ldi	r23, 0x00	; 0
   3e4a6:	ab d4       	rcall	.+2390   	; 0x3edfe <__divmodhi4>
   3e4a8:	80 5d       	subi	r24, 0xD0	; 208
		sendchar(theChar );
   3e4aa:	4a de       	rcall	.-876    	; 0x3e140 <sendchar>
   3e4ac:	df 91       	pop	r29
   3e4ae:	cf 91       	pop	r28
   3e4b0:	1f 91       	pop	r17
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e4b2:	0f 91       	pop	r16
   3e4b4:	08 95       	ret

0003e4b6 <init_spi>:
   3e4b6:	20 9a       	sbi	0x04, 0	; 4
   3e4b8:	22 9a       	sbi	0x04, 2	; 4
   3e4ba:	21 9a       	sbi	0x04, 1	; 4
   3e4bc:	2b 9a       	sbi	0x05, 3	; 5
	{
		theChar = 0x30 + ((myNumber % 100) / 10 );
   3e4be:	08 95       	ret

0003e4c0 <dly_100us>:
   3e4c0:	80 ea       	ldi	r24, 0xA0	; 160
   3e4c2:	31 97       	sbiw	r30, 0x01	; 1
   3e4c4:	31 97       	sbiw	r30, 0x01	; 1
   3e4c6:	31 97       	sbiw	r30, 0x01	; 1
   3e4c8:	00 00       	nop
   3e4ca:	8a 95       	dec	r24
   3e4cc:	d1 f7       	brne	.-12     	; 0x3e4c2 <dly_100us+0x2>
   3e4ce:	08 95       	ret

0003e4d0 <select>:
		sendchar(theChar );
   3e4d0:	02 d0       	rcall	.+4      	; 0x3e4d6 <deselect>
   3e4d2:	28 98       	cbi	0x05, 0	; 5
   3e4d4:	01 c0       	rjmp	.+2      	; 0x3e4d8 <rcv_spi>

0003e4d6 <deselect>:
   3e4d6:	28 9a       	sbi	0x05, 0	; 5

0003e4d8 <rcv_spi>:
	}
	theChar = 0x30 + (myNumber % 10);
   3e4d8:	8f ef       	ldi	r24, 0xFF	; 255

0003e4da <xmit_spi>:
   3e4da:	98 e0       	ldi	r25, 0x08	; 8
   3e4dc:	87 fd       	sbrc	r24, 7
   3e4de:	2a 9a       	sbi	0x05, 2	; 5
   3e4e0:	87 ff       	sbrs	r24, 7
	sendchar(theChar );
   3e4e2:	2a 98       	cbi	0x05, 2	; 5
   3e4e4:	88 0f       	add	r24, r24
   3e4e6:	1b 99       	sbic	0x03, 3	; 3
}
   3e4e8:	83 95       	inc	r24
   3e4ea:	29 9a       	sbi	0x05, 1	; 5
   3e4ec:	29 98       	cbi	0x05, 1	; 5
   3e4ee:	9a 95       	dec	r25
   3e4f0:	a9 f7       	brne	.-22     	; 0x3e4dc <xmit_spi+0x2>
	inc	r24		; /
	sbi	PORT_CK		; A positive pulse to SCLK
	cbi	PORT_CK		; /
	dec	r25		; Repeat 8 times
	brne	1b		; /
	ret
   3e4f2:	08 95       	ret

0003e4f4 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
   3e4f4:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3e4f6:	8b bf       	out	0x3b, r24	; 59
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
   3e4f8:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e4fa:	80 93 57 00 	sts	0x0057, r24
	spm
   3e4fe:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3e500:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3e504:	80 fd       	sbrc	r24, 0
	rjmp	1b
   3e506:	fc cf       	rjmp	.-8      	; 0x3e500 <flash_erase+0xc>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3e508:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e50a:	80 93 57 00 	sts	0x0057, r24
	spm
   3e50e:	e8 95       	spm

9:	ret
   3e510:	08 95       	ret

0003e512 <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
   3e512:	0f 92       	push	r0
	push	r1
   3e514:	1f 92       	push	r1

#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3e516:	8b bf       	out	0x3b, r24	; 59
#endif

	; Fill page buffer
	movw	ZL, r22
   3e518:	fb 01       	movw	r30, r22
	movw	XL, r20
   3e51a:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
   3e51c:	90 e8       	ldi	r25, 0x80	; 128
1:	ld	r0, X+
   3e51e:	0d 90       	ld	r0, X+
	ld	r1, X+
   3e520:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
   3e522:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e524:	80 93 57 00 	sts	0x0057, r24
	spm
   3e528:	e8 95       	spm
	adiw	ZL, 2
   3e52a:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
   3e52c:	9a 95       	dec	r25
	brne	1b
   3e52e:	b9 f7       	brne	.-18     	; 0x3e51e <flash_write+0xc>

	; Initiate write operation
	movw	ZL, r22
   3e530:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
   3e532:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e534:	80 93 57 00 	sts	0x0057, r24
	spm
   3e538:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3e53a:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3e53e:	80 fd       	sbrc	r24, 0
	rjmp	2b
   3e540:	fc cf       	rjmp	.-8      	; 0x3e53a <flash_write+0x28>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3e542:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3e544:	80 93 57 00 	sts	0x0057, r24
	spm
   3e548:	e8 95       	spm

9:	pop	r1
   3e54a:	1f 90       	pop	r1
	pop	r0
   3e54c:	0f 90       	pop	r0
	ret
   3e54e:	08 95       	ret

0003e550 <main>:
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3e550:	cf 93       	push	r28
   3e552:	df 93       	push	r29
   3e554:	cd b7       	in	r28, 0x3d	; 61
   3e556:	de b7       	in	r29, 0x3e	; 62
   3e558:	cf 52       	subi	r28, 0x2F	; 47
   3e55a:	d1 40       	sbci	r29, 0x01	; 1
   3e55c:	0f b6       	in	r0, 0x3f	; 63
   3e55e:	f8 94       	cli
   3e560:	de bf       	out	0x3e, r29	; 62
   3e562:	0f be       	out	0x3f, r0	; 63
   3e564:	cd bf       	out	0x3d, r28	; 61

	setDataMode(0x00);
   3e566:	80 e0       	ldi	r24, 0x00	; 0
   3e568:	fd dd       	rcall	.-1030   	; 0x3e164 <setDataMode>
   3e56a:	81 e0       	ldi	r24, 0x01	; 1
	setBitOrder(1);
   3e56c:	00 de       	rcall	.-1024   	; 0x3e16e <setBitOrder>
   3e56e:	84 e0       	ldi	r24, 0x04	; 4
   3e570:	07 de       	rcall	.-1010   	; 0x3e180 <setClockDivider>
	setClockDivider(0x04);
   3e572:	8e ef       	ldi	r24, 0xFE	; 254
   3e574:	85 b9       	out	0x05, r24	; 5
   3e576:	86 ef       	ldi	r24, 0xF6	; 246

	SPI_PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS) | _BV(LED1) | _BV(LED2) | _BV(LED3);
   3e578:	84 b9       	out	0x04, r24	; 4
   3e57a:	2d 98       	cbi	0x05, 5	; 5
	SPI_DDRB = _BV(SCK) | _BV(MOSI) |_BV(SS) | _BV(LED1) | _BV(LED2) | _BV(LED3);
   3e57c:	2e 98       	cbi	0x05, 6	; 5
   3e57e:	2f 98       	cbi	0x05, 7	; 5
	
	LED1_LOW();
   3e580:	2c 9a       	sbi	0x05, 4	; 5
	LED2_LOW();
   3e582:	8c b5       	in	r24, 0x2c	; 44
	LED3_LOW();
   3e584:	80 61       	ori	r24, 0x10	; 16
	
	SS_HIGH();
   3e586:	8c bd       	out	0x2c, r24	; 44
//	SS_MASTER_HIGH();

	SPCR |= _BV(MSTR);
   3e588:	8c b5       	in	r24, 0x2c	; 44
   3e58a:	80 64       	ori	r24, 0x40	; 64
   3e58c:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPE);
   3e58e:	01 e2       	ldi	r16, 0x21	; 33
   3e590:	0e bf       	out	0x3e, r16	; 62
   3e592:	0f ef       	ldi	r16, 0xFF	; 255
	unsigned int rcvdCharCntr = 0;
#endif

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e594:	0d bf       	out	0x3d, r16	; 61
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e596:	94 b7       	in	r25, 0x34	; 52
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e598:	f8 94       	cli
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e59a:	a8 95       	wdr
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t mcuStatusReg;
	mcuStatusReg = MCUSR;
   3e59c:	14 be       	out	0x34, r1	; 52

	__asm__ __volatile__ ("cli");
   3e59e:	80 91 60 00 	lds	r24, 0x0060
	__asm__ __volatile__ ("wdr");
	MCUSR = 0;
   3e5a2:	88 61       	ori	r24, 0x18	; 24
	WDTCSR |= _BV(WDCE) | _BV(WDE);
   3e5a4:	80 93 60 00 	sts	0x0060, r24
   3e5a8:	10 92 60 00 	sts	0x0060, r1
   3e5ac:	78 94       	sei
	WDTCSR = 0;
   3e5ae:	93 ff       	sbrs	r25, 3
   3e5b0:	05 c0       	rjmp	.+10     	; 0x3e5bc <main+0x6c>
	__asm__ __volatile__ ("sei");
   3e5b2:	e0 91 04 02 	lds	r30, 0x0204

	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF)) {
   3e5b6:	f0 91 05 02 	lds	r31, 0x0205
		app_start();
   3e5ba:	19 95       	eicall
   3e5bc:	80 91 c0 00 	lds	r24, 0x00C0
   3e5c0:	82 60       	ori	r24, 0x02	; 2
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG |= (1 << UART_DOUBLE_SPEED);
   3e5c2:	80 93 c0 00 	sts	0x00C0, r24
   3e5c6:	80 e1       	ldi	r24, 0x10	; 16
   3e5c8:	80 93 c4 00 	sts	0x00C4, r24
#endif
	UART_BAUD_RATE_LOW = UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e5cc:	88 e1       	ldi	r24, 0x18	; 24
   3e5ce:	80 93 c1 00 	sts	0x00C1, r24
	UART_CONTROL_REG = (1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e5d2:	00 00       	nop
   3e5d4:	40 e0       	ldi	r20, 0x00	; 0
   3e5d6:	50 e0       	ldi	r21, 0x00	; 0

	asm volatile ("nop");
   3e5d8:	ba 01       	movw	r22, r20
		app_start();
	}
	//************************************************************************
#endif

	boot_timer = 0;
   3e5da:	12 c0       	rjmp	.+36     	; 0x3e600 <main+0xb0>
   3e5dc:	25 e0       	ldi	r18, 0x05	; 5
   3e5de:	2a 95       	dec	r18
   3e5e0:	f1 f7       	brne	.-4      	; 0x3e5de <main+0x8e>
   3e5e2:	00 00       	nop
   3e5e4:	4f 5f       	subi	r20, 0xFF	; 255
   3e5e6:	5f 4f       	sbci	r21, 0xFF	; 255
   3e5e8:	6f 4f       	sbci	r22, 0xFF	; 255

	while (boot_state == 0) {
		while ((!(Serial_Available())) && (boot_state == 0)) // wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
   3e5ea:	7f 4f       	sbci	r23, 0xFF	; 255
   3e5ec:	81 e0       	ldi	r24, 0x01	; 1
   3e5ee:	90 e0       	ldi	r25, 0x00	; 0
   3e5f0:	41 3a       	cpi	r20, 0xA1	; 161
			if (boot_timer > boot_timeout) {
				boot_state = 1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e5f2:	36 e8       	ldi	r19, 0x86	; 134
   3e5f4:	53 07       	cpc	r21, r19
   3e5f6:	31 e0       	ldi	r19, 0x01	; 1
   3e5f8:	63 07       	cpc	r22, r19
   3e5fa:	30 e0       	ldi	r19, 0x00	; 0
   3e5fc:	73 07       	cpc	r23, r19
   3e5fe:	10 f4       	brcc	.+4      	; 0x3e604 <main+0xb4>
   3e600:	80 e0       	ldi	r24, 0x00	; 0
   3e602:	90 e0       	ldi	r25, 0x00	; 0
   3e604:	20 91 c0 00 	lds	r18, 0x00C0
   3e608:	27 fd       	sbrc	r18, 7
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE); // delete TXCflag
}

//************************************************************************
static int Serial_Available(void) {
	return (UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)); // wait for data
   3e60a:	02 c0       	rjmp	.+4      	; 0x3e610 <main+0xc0>
   3e60c:	00 97       	sbiw	r24, 0x00	; 0
//    sendchar(0x0d);
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state == 0) {
		while ((!(Serial_Available())) && (boot_state == 0)) // wait for data
   3e60e:	31 f3       	breq	.-52     	; 0x3e5dc <main+0x8c>
   3e610:	01 96       	adiw	r24, 0x01	; 1
   3e612:	81 30       	cpi	r24, 0x01	; 1
   3e614:	91 05       	cpc	r25, r1
//    sendchar('.');
//    sendchar(0x0d);
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state == 0) {
   3e616:	09 f0       	breq	.+2      	; 0x3e61a <main+0xca>
		//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
		// SDCARD BOOTLOADER
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}

	if (boot_state == 1) {
   3e618:	25 c3       	rjmp	.+1610   	; 0x3ec64 <main+0x714>
   3e61a:	e1 c2       	rjmp	.+1474   	; 0x3ebde <main+0x68e>
   3e61c:	80 e0       	ldi	r24, 0x00	; 0
   3e61e:	90 e0       	ldi	r25, 0x00	; 0
   3e620:	81 30       	cpi	r24, 0x01	; 1
   3e622:	91 05       	cpc	r25, r1
   3e624:	c9 f4       	brne	.+50     	; 0x3e658 <main+0x108>
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState = ST_START;
			while (msgParseState != ST_PROCESS) {
				if (boot_state == 1) {
   3e626:	1f c0       	rjmp	.+62     	; 0x3e666 <main+0x116>
   3e628:	01 96       	adiw	r24, 0x01	; 1
   3e62a:	a1 1d       	adc	r26, r1
   3e62c:	b1 1d       	adc	r27, r1
static unsigned char recchar_timeout(void) {
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE))) {
		// wait for data
		count++;
   3e62e:	81 30       	cpi	r24, 0x01	; 1
   3e630:	e2 e1       	ldi	r30, 0x12	; 18
   3e632:	9e 07       	cpc	r25, r30
		if (count > MAX_TIME_COUNT) {
   3e634:	ea e7       	ldi	r30, 0x7A	; 122
   3e636:	ae 07       	cpc	r26, r30
   3e638:	e0 e0       	ldi	r30, 0x00	; 0
   3e63a:	be 07       	cpc	r27, r30
   3e63c:	80 f0       	brcs	.+32     	; 0x3e65e <main+0x10e>
   3e63e:	c2 5d       	subi	r28, 0xD2	; 210
   3e640:	de 4f       	sbci	r29, 0xFE	; 254
   3e642:	88 81       	ld	r24, Y
#if (FLASHEND > 0x10000)
			data = pgm_read_word_far(0); //*	get the first word of the user program
#else
			data = pgm_read_word_near(0); //*	get the first word of the user program
#endif
			if (data != 0xffff) //*	make sure its valid before jumping to it.
   3e644:	99 81       	ldd	r25, Y+1	; 0x01
   3e646:	ce 52       	subi	r28, 0x2E	; 46
   3e648:	d1 40       	sbci	r29, 0x01	; 1
   3e64a:	af ef       	ldi	r26, 0xFF	; 255
   3e64c:	8f 3f       	cpi	r24, 0xFF	; 255
   3e64e:	9a 07       	cpc	r25, r26
   3e650:	19 f0       	breq	.+6      	; 0x3e658 <main+0x108>
   3e652:	ee 27       	eor	r30, r30
   3e654:	ff 27       	eor	r31, r31
   3e656:	09 94       	ijmp
					{
				asm volatile(
   3e658:	80 e0       	ldi	r24, 0x00	; 0
   3e65a:	90 e0       	ldi	r25, 0x00	; 0
   3e65c:	dc 01       	movw	r26, r24
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState = ST_START;
			while (msgParseState != ST_PROCESS) {
				if (boot_state == 1) {
   3e65e:	30 91 c0 00 	lds	r19, 0x00C0
   3e662:	37 ff       	sbrs	r19, 7
#define	MAX_TIME_COUNT	(F_CPU >> 1)
//*****************************************************************************
static unsigned char recchar_timeout(void) {
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE))) {
   3e664:	e1 cf       	rjmp	.-62     	; 0x3e628 <main+0xd8>
   3e666:	30 91 c6 00 	lds	r19, 0x00C6
   3e66a:	08 94       	sec
				);
			}
			count = 0;
		}
	}
	return UART_DATA_REG;
   3e66c:	c1 1c       	adc	r12, r1
   3e66e:	d1 1c       	adc	r13, r1
					c = recchar_timeout();

				}

#ifdef ENABLE_MONITOR
				rcvdCharCntr++;
   3e670:	31 32       	cpi	r19, 0x21	; 33
   3e672:	f1 f4       	brne	.+60     	; 0x3e6b0 <main+0x160>
   3e674:	ba e0       	ldi	r27, 0x0A	; 10

				if ((c == '!') && (rcvdCharCntr < 10))
   3e676:	cb 16       	cp	r12, r27
   3e678:	d1 04       	cpc	r13, r1
   3e67a:	d0 f4       	brcc	.+52     	; 0x3e6b0 <main+0x160>
   3e67c:	6f 5f       	subi	r22, 0xFF	; 255
   3e67e:	7f 4f       	sbci	r23, 0xFF	; 255
   3e680:	63 30       	cpi	r22, 0x03	; 3
				{
					exPointCntr++;
   3e682:	71 05       	cpc	r23, r1
   3e684:	b9 f4       	brne	.+46     	; 0x3e6b4 <main+0x164>
					if (exPointCntr == 3)
   3e686:	ce 5d       	subi	r28, 0xDE	; 222
   3e688:	de 4f       	sbci	r29, 0xFE	; 254
   3e68a:	19 83       	std	Y+1, r17	; 0x01
   3e68c:	08 83       	st	Y, r16
   3e68e:	c2 52       	subi	r28, 0x22	; 34
   3e690:	d1 40       	sbci	r29, 0x01	; 1
   3e692:	ca 5d       	subi	r28, 0xDA	; 218
   3e694:	de 4f       	sbci	r29, 0xFE	; 254
   3e696:	d9 82       	std	Y+1, r13	; 0x01
   3e698:	c8 82       	st	Y, r12
   3e69a:	c6 52       	subi	r28, 0x26	; 38
   3e69c:	d1 40       	sbci	r29, 0x01	; 1
   3e69e:	cc 5d       	subi	r28, 0xDC	; 220
   3e6a0:	de 4f       	sbci	r29, 0xFE	; 254
   3e6a2:	19 82       	std	Y+1, r1	; 0x01
					{
						exPointCntr = 0; //	reset back to zero so we dont get in an endless loop
   3e6a4:	18 82       	st	Y, r1
   3e6a6:	c4 52       	subi	r28, 0x24	; 36
   3e6a8:	d1 40       	sbci	r29, 0x01	; 1
   3e6aa:	33 24       	eor	r3, r3
   3e6ac:	33 94       	inc	r3
   3e6ae:	57 c0       	rjmp	.+174    	; 0x3e75e <main+0x20e>
						isLeave = 1;
   3e6b0:	60 e0       	ldi	r22, 0x00	; 0
   3e6b2:	70 e0       	ldi	r23, 0x00	; 0
   3e6b4:	23 30       	cpi	r18, 0x03	; 3
						break;
					}
				}
				else
				{
					exPointCntr = 0;
   3e6b6:	d9 f0       	breq	.+54     	; 0x3e6ee <main+0x19e>
   3e6b8:	24 30       	cpi	r18, 0x04	; 4
				}
#endif

				switch (msgParseState) {
   3e6ba:	28 f4       	brcc	.+10     	; 0x3e6c6 <main+0x176>
   3e6bc:	21 30       	cpi	r18, 0x01	; 1
   3e6be:	71 f0       	breq	.+28     	; 0x3e6dc <main+0x18c>
   3e6c0:	22 30       	cpi	r18, 0x02	; 2
   3e6c2:	80 f4       	brcc	.+32     	; 0x3e6e4 <main+0x194>
   3e6c4:	07 c0       	rjmp	.+14     	; 0x3e6d4 <main+0x184>
   3e6c6:	25 30       	cpi	r18, 0x05	; 5
   3e6c8:	09 f1       	breq	.+66     	; 0x3e70c <main+0x1bc>
   3e6ca:	25 30       	cpi	r18, 0x05	; 5
   3e6cc:	b8 f0       	brcs	.+46     	; 0x3e6fc <main+0x1ac>
   3e6ce:	26 30       	cpi	r18, 0x06	; 6
   3e6d0:	81 f5       	brne	.+96     	; 0x3e732 <main+0x1e2>
   3e6d2:	2b c0       	rjmp	.+86     	; 0x3e72a <main+0x1da>
   3e6d4:	3b 31       	cpi	r19, 0x1B	; 27
   3e6d6:	09 f0       	breq	.+2      	; 0x3e6da <main+0x18a>
   3e6d8:	a1 cf       	rjmp	.-190    	; 0x3e61c <main+0xcc>
				case ST_START:
					if (c == MESSAGE_START) {
   3e6da:	89 c3       	rjmp	.+1810   	; 0x3edee <main+0x89e>
   3e6dc:	e3 26       	eor	r14, r19
   3e6de:	23 2e       	mov	r2, r19
   3e6e0:	22 e0       	ldi	r18, 0x02	; 2

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum = c;
					msgParseState = ST_MSG_SIZE_1;
					checksum ^= c;
   3e6e2:	9c cf       	rjmp	.-200    	; 0x3e61c <main+0xcc>
					else
					{
						msgParseState = ST_START;
					}
#endif
					break;
   3e6e4:	53 2f       	mov	r21, r19
					break;

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum = c;
					msgParseState = ST_MSG_SIZE_1;
   3e6e6:	40 e0       	ldi	r20, 0x00	; 0
					else
					{
						msgParseState = ST_START;
					}
#endif
					break;
   3e6e8:	e3 26       	eor	r14, r19

				case ST_MSG_SIZE_1:
					msgLength = c << 8;
   3e6ea:	23 e0       	ldi	r18, 0x03	; 3
   3e6ec:	97 cf       	rjmp	.-210    	; 0x3e61c <main+0xcc>
					msgParseState = ST_MSG_SIZE_2;
					checksum ^= c;
   3e6ee:	83 2f       	mov	r24, r19
#endif
					break;

				case ST_MSG_SIZE_1:
					msgLength = c << 8;
					msgParseState = ST_MSG_SIZE_2;
   3e6f0:	90 e0       	ldi	r25, 0x00	; 0
					checksum ^= c;
					break;
   3e6f2:	48 2b       	or	r20, r24

				case ST_MSG_SIZE_2:
					msgLength |= c;
   3e6f4:	59 2b       	or	r21, r25
   3e6f6:	e3 26       	eor	r14, r19
   3e6f8:	24 e0       	ldi	r18, 0x04	; 4
   3e6fa:	90 cf       	rjmp	.-224    	; 0x3e61c <main+0xcc>
					msgParseState = ST_GET_TOKEN;
					checksum ^= c;
   3e6fc:	3e 30       	cpi	r19, 0x0E	; 14
					checksum ^= c;
					break;

				case ST_MSG_SIZE_2:
					msgLength |= c;
					msgParseState = ST_GET_TOKEN;
   3e6fe:	09 f0       	breq	.+2      	; 0x3e702 <main+0x1b2>
					checksum ^= c;
					break;
   3e700:	7a c3       	rjmp	.+1780   	; 0x3edf6 <main+0x8a6>

				case ST_GET_TOKEN:
					if (c == TOKEN) {
   3e702:	e3 26       	eor	r14, r19
   3e704:	00 e0       	ldi	r16, 0x00	; 0
   3e706:	10 e0       	ldi	r17, 0x00	; 0
						msgParseState = ST_GET_DATA;
						checksum ^= c;
   3e708:	25 e0       	ldi	r18, 0x05	; 5
						ii = 0;
   3e70a:	88 cf       	rjmp	.-240    	; 0x3e61c <main+0xcc>
   3e70c:	e1 e0       	ldi	r30, 0x01	; 1
					checksum ^= c;
					break;

				case ST_GET_TOKEN:
					if (c == TOKEN) {
						msgParseState = ST_GET_DATA;
   3e70e:	f0 e0       	ldi	r31, 0x00	; 0
   3e710:	ec 0f       	add	r30, r28
						msgParseState = ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++] = c;
   3e712:	fd 1f       	adc	r31, r29
   3e714:	e0 0f       	add	r30, r16
   3e716:	f1 1f       	adc	r31, r17
   3e718:	30 83       	st	Z, r19
   3e71a:	0f 5f       	subi	r16, 0xFF	; 255
   3e71c:	1f 4f       	sbci	r17, 0xFF	; 255
   3e71e:	e3 26       	eor	r14, r19
   3e720:	04 17       	cp	r16, r20
   3e722:	15 07       	cpc	r17, r21
					checksum ^= c;
   3e724:	09 f0       	breq	.+2      	; 0x3e728 <main+0x1d8>
					if (ii == msgLength) {
   3e726:	7a cf       	rjmp	.-268    	; 0x3e61c <main+0xcc>
   3e728:	68 c3       	rjmp	.+1744   	; 0x3edfa <main+0x8aa>
   3e72a:	3e 15       	cp	r19, r14
   3e72c:	09 f0       	breq	.+2      	; 0x3e730 <main+0x1e0>
   3e72e:	63 c3       	rjmp	.+1734   	; 0x3edf6 <main+0x8a6>
						msgParseState = ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if (c == checksum) {
   3e730:	03 c0       	rjmp	.+6      	; 0x3e738 <main+0x1e8>
   3e732:	27 30       	cpi	r18, 0x07	; 7
   3e734:	09 f0       	breq	.+2      	; 0x3e738 <main+0x1e8>
   3e736:	72 cf       	rjmp	.-284    	; 0x3e61c <main+0xcc>
		while (!isLeave) {
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState = ST_START;
			while (msgParseState != ST_PROCESS) {
   3e738:	ce 5d       	subi	r28, 0xDE	; 222
   3e73a:	de 4f       	sbci	r29, 0xFE	; 254
   3e73c:	19 83       	std	Y+1, r17	; 0x01
   3e73e:	08 83       	st	Y, r16
   3e740:	c2 52       	subi	r28, 0x22	; 34
   3e742:	d1 40       	sbci	r29, 0x01	; 1
   3e744:	cc 5d       	subi	r28, 0xDC	; 220
   3e746:	de 4f       	sbci	r29, 0xFE	; 254
   3e748:	79 83       	std	Y+1, r23	; 0x01
   3e74a:	68 83       	st	Y, r22
   3e74c:	c4 52       	subi	r28, 0x24	; 36
   3e74e:	d1 40       	sbci	r29, 0x01	; 1
   3e750:	ca 5d       	subi	r28, 0xDA	; 218
   3e752:	de 4f       	sbci	r29, 0xFE	; 254
   3e754:	d9 82       	std	Y+1, r13	; 0x01
   3e756:	c8 82       	st	Y, r12
   3e758:	c6 52       	subi	r28, 0x26	; 38
   3e75a:	d1 40       	sbci	r29, 0x01	; 1
   3e75c:	33 24       	eor	r3, r3
   3e75e:	89 81       	ldd	r24, Y+1	; 0x01
   3e760:	83 31       	cpi	r24, 0x13	; 19
						msgParseState = ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if (c == checksum) {
   3e762:	09 f4       	brne	.+2      	; 0x3e766 <main+0x216>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0]) {
   3e764:	02 c1       	rjmp	.+516    	; 0x3e96a <main+0x41a>
   3e766:	84 31       	cpi	r24, 0x14	; 20
   3e768:	c8 f4       	brcc	.+50     	; 0x3e79c <main+0x24c>
   3e76a:	86 30       	cpi	r24, 0x06	; 6
   3e76c:	09 f4       	brne	.+2      	; 0x3e770 <main+0x220>
   3e76e:	d0 c0       	rjmp	.+416    	; 0x3e910 <main+0x3c0>
   3e770:	87 30       	cpi	r24, 0x07	; 7
   3e772:	50 f4       	brcc	.+20     	; 0x3e788 <main+0x238>
   3e774:	82 30       	cpi	r24, 0x02	; 2
   3e776:	09 f4       	brne	.+2      	; 0x3e77a <main+0x22a>
   3e778:	f6 c0       	rjmp	.+492    	; 0x3e966 <main+0x416>
   3e77a:	83 30       	cpi	r24, 0x03	; 3
   3e77c:	09 f4       	brne	.+2      	; 0x3e780 <main+0x230>
   3e77e:	6a c0       	rjmp	.+212    	; 0x3e854 <main+0x304>
   3e780:	81 30       	cpi	r24, 0x01	; 1
   3e782:	09 f0       	breq	.+2      	; 0x3e786 <main+0x236>
   3e784:	fe c1       	rjmp	.+1020   	; 0x3eb82 <main+0x632>
   3e786:	4f c0       	rjmp	.+158    	; 0x3e826 <main+0x2d6>
   3e788:	81 31       	cpi	r24, 0x11	; 17
   3e78a:	09 f4       	brne	.+2      	; 0x3e78e <main+0x23e>
   3e78c:	70 c0       	rjmp	.+224    	; 0x3e86e <main+0x31e>
   3e78e:	82 31       	cpi	r24, 0x12	; 18
   3e790:	08 f0       	brcs	.+2      	; 0x3e794 <main+0x244>
   3e792:	b0 c0       	rjmp	.+352    	; 0x3e8f4 <main+0x3a4>
   3e794:	80 31       	cpi	r24, 0x10	; 16
   3e796:	09 f0       	breq	.+2      	; 0x3e79a <main+0x24a>
   3e798:	f4 c1       	rjmp	.+1000   	; 0x3eb82 <main+0x632>
   3e79a:	e5 c0       	rjmp	.+458    	; 0x3e966 <main+0x416>
   3e79c:	88 31       	cpi	r24, 0x18	; 24
   3e79e:	09 f4       	brne	.+2      	; 0x3e7a2 <main+0x252>
   3e7a0:	83 c0       	rjmp	.+262    	; 0x3e8a8 <main+0x358>
   3e7a2:	89 31       	cpi	r24, 0x19	; 25
   3e7a4:	50 f4       	brcc	.+20     	; 0x3e7ba <main+0x26a>
   3e7a6:	85 31       	cpi	r24, 0x15	; 21
   3e7a8:	09 f4       	brne	.+2      	; 0x3e7ac <main+0x25c>
   3e7aa:	df c0       	rjmp	.+446    	; 0x3e96a <main+0x41a>
   3e7ac:	85 31       	cpi	r24, 0x15	; 21
   3e7ae:	08 f4       	brcc	.+2      	; 0x3e7b2 <main+0x262>
   3e7b0:	88 c1       	rjmp	.+784    	; 0x3eac2 <main+0x572>
   3e7b2:	86 31       	cpi	r24, 0x16	; 22
   3e7b4:	09 f0       	breq	.+2      	; 0x3e7b8 <main+0x268>
   3e7b6:	e5 c1       	rjmp	.+970    	; 0x3eb82 <main+0x632>
   3e7b8:	84 c1       	rjmp	.+776    	; 0x3eac2 <main+0x572>
   3e7ba:	8a 31       	cpi	r24, 0x1A	; 26
   3e7bc:	09 f4       	brne	.+2      	; 0x3e7c0 <main+0x270>
   3e7be:	67 c0       	rjmp	.+206    	; 0x3e88e <main+0x33e>
   3e7c0:	8a 31       	cpi	r24, 0x1A	; 26
   3e7c2:	08 f4       	brcc	.+2      	; 0x3e7c6 <main+0x276>
   3e7c4:	85 c0       	rjmp	.+266    	; 0x3e8d0 <main+0x380>
   3e7c6:	8b 31       	cpi	r24, 0x1B	; 27
   3e7c8:	09 f4       	brne	.+2      	; 0x3e7cc <main+0x27c>
   3e7ca:	54 c0       	rjmp	.+168    	; 0x3e874 <main+0x324>
   3e7cc:	8d 31       	cpi	r24, 0x1D	; 29
   3e7ce:	09 f0       	breq	.+2      	; 0x3e7d2 <main+0x282>
   3e7d0:	d8 c1       	rjmp	.+944    	; 0x3eb82 <main+0x632>
   3e7d2:	8d 81       	ldd	r24, Y+5	; 0x05
   3e7d4:	80 33       	cpi	r24, 0x30	; 48
   3e7d6:	39 f4       	brne	.+14     	; 0x3e7e6 <main+0x296>
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI: {
				unsigned char answerByte;
				unsigned char flag = 0;

				if (msgBuffer[4] == 0x30) {
   3e7d8:	9f 81       	ldd	r25, Y+7	; 0x07
   3e7da:	99 23       	and	r25, r25
   3e7dc:	a9 f0       	breq	.+42     	; 0x3e808 <main+0x2b8>
					unsigned char signatureIndex = msgBuffer[6];
   3e7de:	91 30       	cpi	r25, 0x01	; 1

					if (signatureIndex == 0) {
   3e7e0:	a9 f4       	brne	.+42     	; 0x3e80c <main+0x2bc>
   3e7e2:	e8 e9       	ldi	r30, 0x98	; 152
						answerByte = (SIGNATURE_BYTES >> 16) & 0x000000FF;
					} else if (signatureIndex == 1) {
   3e7e4:	16 c0       	rjmp	.+44     	; 0x3e812 <main+0x2c2>
   3e7e6:	98 2f       	mov	r25, r24
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e7e8:	90 75       	andi	r25, 0x50	; 80
   3e7ea:	91 f0       	breq	.+36     	; 0x3e810 <main+0x2c0>
					} else {
						answerByte = SIGNATURE_BYTES & 0x000000FF;
					}
				} else if (msgBuffer[4] & 0x50) {
   3e7ec:	80 35       	cpi	r24, 0x50	; 80
   3e7ee:	19 f4       	brne	.+6      	; 0x3e7f6 <main+0x2a6>
   3e7f0:	e0 e0       	ldi	r30, 0x00	; 0
					//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
					//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
					//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
					if (msgBuffer[4] == 0x50) {
   3e7f2:	f0 e0       	ldi	r31, 0x00	; 0
   3e7f4:	04 c0       	rjmp	.+8      	; 0x3e7fe <main+0x2ae>
						answerByte = boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3e7f6:	88 35       	cpi	r24, 0x58	; 88
   3e7f8:	59 f4       	brne	.+22     	; 0x3e810 <main+0x2c0>
   3e7fa:	e3 e0       	ldi	r30, 0x03	; 3
					} else if (msgBuffer[4] == 0x58) {
   3e7fc:	f0 e0       	ldi	r31, 0x00	; 0
   3e7fe:	99 e0       	ldi	r25, 0x09	; 9
						answerByte = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3e800:	90 93 57 00 	sts	0x0057, r25
   3e804:	e4 91       	lpm	r30, Z
   3e806:	05 c0       	rjmp	.+10     	; 0x3e812 <main+0x2c2>
   3e808:	ee e1       	ldi	r30, 0x1E	; 30
   3e80a:	03 c0       	rjmp	.+6      	; 0x3e812 <main+0x2c2>
   3e80c:	e1 e0       	ldi	r30, 0x01	; 1

				if (msgBuffer[4] == 0x30) {
					unsigned char signatureIndex = msgBuffer[6];

					if (signatureIndex == 0) {
						answerByte = (SIGNATURE_BYTES >> 16) & 0x000000FF;
   3e80e:	01 c0       	rjmp	.+2      	; 0x3e812 <main+0x2c2>
   3e810:	e0 e0       	ldi	r30, 0x00	; 0
					} else if (signatureIndex == 1) {
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					} else {
						answerByte = SIGNATURE_BYTES & 0x000000FF;
   3e812:	1a 82       	std	Y+2, r1	; 0x02
   3e814:	1b 82       	std	Y+3, r1	; 0x03
					if (msgBuffer[4] == 0x50) {
						answerByte = boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					} else if (msgBuffer[4] == 0x58) {
						answerByte = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					} else {
						answerByte = 0;
   3e816:	8c 83       	std	Y+4, r24	; 0x04
				} else {
					answerByte = 0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}
				if (!flag) {
					msgLength = 7;
					msgBuffer[1] = STATUS_CMD_OK;
   3e818:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[2] = 0;
   3e81a:	ee 83       	std	Y+6, r30	; 0x06
					msgBuffer[3] = msgBuffer[4];
   3e81c:	1f 82       	std	Y+7, r1	; 0x07
					msgBuffer[4] = 0;
   3e81e:	37 e0       	ldi	r19, 0x07	; 7
					msgBuffer[5] = answerByte;
   3e820:	c3 2e       	mov	r12, r19
					msgBuffer[6] = STATUS_CMD_OK;
   3e822:	d1 2c       	mov	r13, r1
					}
				} else {
					answerByte = 0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}
				if (!flag) {
					msgLength = 7;
   3e824:	b3 c1       	rjmp	.+870    	; 0x3eb8c <main+0x63c>
   3e826:	1a 82       	std	Y+2, r1	; 0x02
   3e828:	88 e0       	ldi	r24, 0x08	; 8
   3e82a:	8b 83       	std	Y+3, r24	; 0x03
			}
				break;
#endif
			case CMD_SIGN_ON:
				msgLength = 11;
				msgBuffer[1] = STATUS_CMD_OK;
   3e82c:	81 e4       	ldi	r24, 0x41	; 65
				msgBuffer[2] = 8;
   3e82e:	8c 83       	std	Y+4, r24	; 0x04
   3e830:	86 e5       	ldi	r24, 0x56	; 86
				msgBuffer[3] = 'A';
   3e832:	8d 83       	std	Y+5, r24	; 0x05
   3e834:	82 e5       	ldi	r24, 0x52	; 82
				msgBuffer[4] = 'V';
   3e836:	8e 83       	std	Y+6, r24	; 0x06
   3e838:	89 e4       	ldi	r24, 0x49	; 73
				msgBuffer[5] = 'R';
   3e83a:	8f 83       	std	Y+7, r24	; 0x07
   3e83c:	83 e5       	ldi	r24, 0x53	; 83
				msgBuffer[6] = 'I';
   3e83e:	88 87       	std	Y+8, r24	; 0x08
   3e840:	80 e5       	ldi	r24, 0x50	; 80
				msgBuffer[7] = 'S';
   3e842:	89 87       	std	Y+9, r24	; 0x09
   3e844:	8f e5       	ldi	r24, 0x5F	; 95
				msgBuffer[8] = 'P';
   3e846:	8a 87       	std	Y+10, r24	; 0x0a
   3e848:	82 e3       	ldi	r24, 0x32	; 50
				msgBuffer[9] = '_';
   3e84a:	8b 87       	std	Y+11, r24	; 0x0b
   3e84c:	2b e0       	ldi	r18, 0x0B	; 11
				msgBuffer[10] = '2';
   3e84e:	c2 2e       	mov	r12, r18
   3e850:	d1 2c       	mov	r13, r1
				}
			}
				break;
#endif
			case CMD_SIGN_ON:
				msgLength = 11;
   3e852:	9c c1       	rjmp	.+824    	; 0x3eb8c <main+0x63c>
   3e854:	ea 81       	ldd	r30, Y+2	; 0x02
   3e856:	e0 59       	subi	r30, 0x90	; 144
				msgBuffer[6] = 'I';
				msgBuffer[7] = 'S';
				msgBuffer[8] = 'P';
				msgBuffer[9] = '_';
				msgBuffer[10] = '2';
				break;
   3e858:	e3 30       	cpi	r30, 0x03	; 3
   3e85a:	28 f4       	brcc	.+10     	; 0x3e866 <main+0x316>
   3e85c:	f0 e0       	ldi	r31, 0x00	; 0
   3e85e:	ef 5f       	subi	r30, 0xFF	; 255
   3e860:	fd 4f       	sbci	r31, 0xFD	; 253
   3e862:	80 81       	ld	r24, Z
   3e864:	01 c0       	rjmp	.+2      	; 0x3e868 <main+0x318>
   3e866:	80 e0       	ldi	r24, 0x00	; 0
   3e868:	1a 82       	std	Y+2, r1	; 0x02
   3e86a:	8b 83       	std	Y+3, r24	; 0x03

			case CMD_GET_PARAMETER: {
				unsigned char value;

				switch (msgBuffer[1]) {
   3e86c:	3f c0       	rjmp	.+126    	; 0x3e8ec <main+0x39c>
				default:
					value = 0;
					break;
				}
				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
   3e86e:	33 24       	eor	r3, r3
				msgBuffer[2] = value;
   3e870:	33 94       	inc	r3
   3e872:	79 c0       	rjmp	.+242    	; 0x3e966 <main+0x416>
			}
				break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave = 1;
   3e874:	8d 81       	ldd	r24, Y+5	; 0x05
   3e876:	88 23       	and	r24, r24
   3e878:	21 f0       	breq	.+8      	; 0x3e882 <main+0x332>
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
				break;

			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex = msgBuffer[4];
   3e87a:	81 30       	cpi	r24, 0x01	; 1
				unsigned char signature;

				if (signatureIndex == 0)
   3e87c:	21 f4       	brne	.+8      	; 0x3e886 <main+0x336>
   3e87e:	88 e9       	ldi	r24, 0x98	; 152
					signature = (SIGNATURE_BYTES >> 16) & 0x000000FF;
				else if (signatureIndex == 1)
   3e880:	03 c0       	rjmp	.+6      	; 0x3e888 <main+0x338>
   3e882:	8e e1       	ldi	r24, 0x1E	; 30
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e884:	01 c0       	rjmp	.+2      	; 0x3e888 <main+0x338>
   3e886:	81 e0       	ldi	r24, 0x01	; 1
			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex = msgBuffer[4];
				unsigned char signature;

				if (signatureIndex == 0)
					signature = (SIGNATURE_BYTES >> 16) & 0x000000FF;
   3e888:	1a 82       	std	Y+2, r1	; 0x02
   3e88a:	8b 83       	std	Y+3, r24	; 0x03
				else if (signatureIndex == 1)
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
   3e88c:	08 c0       	rjmp	.+16     	; 0x3e89e <main+0x34e>

				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
   3e88e:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = signature;
   3e890:	e1 e0       	ldi	r30, 0x01	; 1
   3e892:	f0 e0       	ldi	r31, 0x00	; 0
			}
				break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
   3e894:	89 e0       	ldi	r24, 0x09	; 9
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3e896:	80 93 57 00 	sts	0x0057, r24
   3e89a:	e4 91       	lpm	r30, Z
   3e89c:	eb 83       	std	Y+3, r30	; 0x03
   3e89e:	1c 82       	std	Y+4, r1	; 0x04
   3e8a0:	94 e0       	ldi	r25, 0x04	; 4
   3e8a2:	c9 2e       	mov	r12, r25
				msgBuffer[3] = STATUS_CMD_OK;
   3e8a4:	d1 2c       	mov	r13, r1
				msgBuffer[3] = STATUS_CMD_OK;
			}
				break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
   3e8a6:	72 c1       	rjmp	.+740    	; 0x3eb8c <main+0x63c>
   3e8a8:	8b 81       	ldd	r24, Y+3	; 0x03
   3e8aa:	80 35       	cpi	r24, 0x50	; 80
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3] = STATUS_CMD_OK;
				break;
   3e8ac:	49 f4       	brne	.+18     	; 0x3e8c0 <main+0x370>

			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if (msgBuffer[2] == 0x50) {
   3e8ae:	8c 81       	ldd	r24, Y+4	; 0x04
   3e8b0:	88 30       	cpi	r24, 0x08	; 8
   3e8b2:	19 f4       	brne	.+6      	; 0x3e8ba <main+0x36a>
					if (msgBuffer[3] == 0x08)
   3e8b4:	e2 e0       	ldi	r30, 0x02	; 2
   3e8b6:	f0 e0       	ldi	r31, 0x00	; 0
   3e8b8:	05 c0       	rjmp	.+10     	; 0x3e8c4 <main+0x374>
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3e8ba:	e0 e0       	ldi	r30, 0x00	; 0
   3e8bc:	f0 e0       	ldi	r31, 0x00	; 0
   3e8be:	02 c0       	rjmp	.+4      	; 0x3e8c4 <main+0x374>
					else
						fuseBits = boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3e8c0:	e3 e0       	ldi	r30, 0x03	; 3
   3e8c2:	f0 e0       	ldi	r31, 0x00	; 0
   3e8c4:	89 e0       	ldi	r24, 0x09	; 9
				} else {
					fuseBits = boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3e8c6:	80 93 57 00 	sts	0x0057, r24
   3e8ca:	e4 91       	lpm	r30, Z
   3e8cc:	1a 82       	std	Y+2, r1	; 0x02
   3e8ce:	e6 cf       	rjmp	.-52     	; 0x3e89c <main+0x34c>
   3e8d0:	8d 81       	ldd	r24, Y+5	; 0x05
				}
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
   3e8d2:	83 6c       	ori	r24, 0xC3	; 195
   3e8d4:	99 e0       	ldi	r25, 0x09	; 9

#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP: {
				unsigned char lockBits = msgBuffer[4];

				lockBits = (~lockBits) & 0x3C; // mask BLBxx bits
   3e8d6:	e1 e0       	ldi	r30, 0x01	; 1
				boot_lock_bits_set(lockBits);
   3e8d8:	f0 e0       	ldi	r31, 0x00	; 0
   3e8da:	08 2e       	mov	r0, r24
   3e8dc:	90 93 57 00 	sts	0x0057, r25
   3e8e0:	e8 95       	spm
   3e8e2:	07 b6       	in	r0, 0x37	; 55
   3e8e4:	00 fc       	sbrc	r0, 0
   3e8e6:	fd cf       	rjmp	.-6      	; 0x3e8e2 <main+0x392>
				// and program it
				boot_spm_busy_wait();
   3e8e8:	1a 82       	std	Y+2, r1	; 0x02
   3e8ea:	1b 82       	std	Y+3, r1	; 0x03
   3e8ec:	83 e0       	ldi	r24, 0x03	; 3

				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
   3e8ee:	c8 2e       	mov	r12, r24
				msgBuffer[2] = STATUS_CMD_OK;
   3e8f0:	d1 2c       	mov	r13, r1
				lockBits = (~lockBits) & 0x3C; // mask BLBxx bits
				boot_lock_bits_set(lockBits);
				// and program it
				boot_spm_busy_wait();

				msgLength = 3;
   3e8f2:	4c c1       	rjmp	.+664    	; 0x3eb8c <main+0x63c>
   3e8f4:	80 ec       	ldi	r24, 0xC0	; 192
   3e8f6:	8a 83       	std	Y+2, r24	; 0x02
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = STATUS_CMD_OK;
			}
				break;
   3e8f8:	02 e0       	ldi	r16, 0x02	; 2
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1] = STATUS_CMD_FAILED; //*	isue 543, return FAILED instead of OK
   3e8fa:	c0 2e       	mov	r12, r16
   3e8fc:	d1 2c       	mov	r13, r1
			}
				break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
   3e8fe:	c2 5e       	subi	r28, 0xE2	; 226
   3e900:	de 4f       	sbci	r29, 0xFE	; 254
   3e902:	18 82       	st	Y, r1
				msgBuffer[2] = STATUS_CMD_OK;
			}
				break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
   3e904:	19 82       	std	Y+1, r1	; 0x01
   3e906:	1a 82       	std	Y+2, r1	; 0x02
   3e908:	1b 82       	std	Y+3, r1	; 0x03
   3e90a:	ce 51       	subi	r28, 0x1E	; 30
   3e90c:	d1 40       	sbci	r29, 0x01	; 1
   3e90e:	3e c1       	rjmp	.+636    	; 0x3eb8c <main+0x63c>
   3e910:	8a 81       	ldd	r24, Y+2	; 0x02
   3e912:	90 e0       	ldi	r25, 0x00	; 0
				msgLength = 2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1] = STATUS_CMD_FAILED; //*	isue 543, return FAILED instead of OK
				break;
   3e914:	a0 e0       	ldi	r26, 0x00	; 0

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address = ( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3e916:	b0 e0       	ldi	r27, 0x00	; 0
   3e918:	78 2e       	mov	r7, r24
   3e91a:	66 24       	eor	r6, r6
   3e91c:	55 24       	eor	r5, r5
   3e91e:	44 24       	eor	r4, r4
   3e920:	8b 81       	ldd	r24, Y+3	; 0x03
   3e922:	90 e0       	ldi	r25, 0x00	; 0
   3e924:	a0 e0       	ldi	r26, 0x00	; 0
   3e926:	b0 e0       	ldi	r27, 0x00	; 0
   3e928:	dc 01       	movw	r26, r24
   3e92a:	99 27       	eor	r25, r25
   3e92c:	88 27       	eor	r24, r24
   3e92e:	48 2a       	or	r4, r24
   3e930:	59 2a       	or	r5, r25
   3e932:	6a 2a       	or	r6, r26
   3e934:	7b 2a       	or	r7, r27
   3e936:	8d 81       	ldd	r24, Y+5	; 0x05
   3e938:	90 e0       	ldi	r25, 0x00	; 0
   3e93a:	a0 e0       	ldi	r26, 0x00	; 0
   3e93c:	b0 e0       	ldi	r27, 0x00	; 0
   3e93e:	48 2a       	or	r4, r24
   3e940:	59 2a       	or	r5, r25
   3e942:	6a 2a       	or	r6, r26
   3e944:	7b 2a       	or	r7, r27
   3e946:	8c 81       	ldd	r24, Y+4	; 0x04
   3e948:	90 e0       	ldi	r25, 0x00	; 0
   3e94a:	a0 e0       	ldi	r26, 0x00	; 0
   3e94c:	b0 e0       	ldi	r27, 0x00	; 0
   3e94e:	ba 2f       	mov	r27, r26
   3e950:	a9 2f       	mov	r26, r25
   3e952:	98 2f       	mov	r25, r24
   3e954:	88 27       	eor	r24, r24
   3e956:	48 2a       	or	r4, r24
   3e958:	59 2a       	or	r5, r25
   3e95a:	6a 2a       	or	r6, r26
   3e95c:	7b 2a       	or	r7, r27
   3e95e:	44 0c       	add	r4, r4
   3e960:	55 1c       	adc	r5, r5
   3e962:	66 1c       	adc	r6, r6
   3e964:	77 1c       	adc	r7, r7
   3e966:	1a 82       	std	Y+2, r1	; 0x02
   3e968:	0e c1       	rjmp	.+540    	; 0x3eb86 <main+0x636>
   3e96a:	ea 81       	ldd	r30, Y+2	; 0x02
#else
				address = (((msgBuffer[3]) << 8) | (msgBuffer[4])) << 1; //convert word to byte address
#endif
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
   3e96c:	c7 5d       	subi	r28, 0xD7	; 215
   3e96e:	de 4f       	sbci	r29, 0xFE	; 254
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
   3e970:	e8 83       	st	Y, r30
   3e972:	c9 52       	subi	r28, 0x29	; 41
   3e974:	d1 40       	sbci	r29, 0x01	; 1
   3e976:	c8 5d       	subi	r28, 0xD8	; 216
   3e978:	de 4f       	sbci	r29, 0xFE	; 254
   3e97a:	18 82       	st	Y, r1
   3e97c:	c8 52       	subi	r28, 0x28	; 40
   3e97e:	d1 40       	sbci	r29, 0x01	; 1
   3e980:	cb 80       	ldd	r12, Y+3	; 0x03
   3e982:	dd 24       	eor	r13, r13
   3e984:	c8 5d       	subi	r28, 0xD8	; 216
   3e986:	de 4f       	sbci	r29, 0xFE	; 254
   3e988:	28 81       	ld	r18, Y
   3e98a:	39 81       	ldd	r19, Y+1	; 0x01
   3e98c:	c8 52       	subi	r28, 0x28	; 40
   3e98e:	d1 40       	sbci	r29, 0x01	; 1
   3e990:	c2 2a       	or	r12, r18
   3e992:	d3 2a       	or	r13, r19
   3e994:	83 31       	cpi	r24, 0x13	; 19
   3e996:	09 f0       	breq	.+2      	; 0x3e99a <main+0x44a>
   3e998:	6c c0       	rjmp	.+216    	; 0x3ea72 <main+0x522>
				unsigned char *p = msgBuffer + 10;
				unsigned int data;
				unsigned char highByte, lowByte;
				address_t tempaddress = address;

				if (msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3e99a:	c2 5e       	subi	r28, 0xE2	; 226
   3e99c:	de 4f       	sbci	r29, 0xFE	; 254
   3e99e:	28 81       	ld	r18, Y
					// erase only main section (bootloader protection)
					if (eraseAddress < APP_END) {
   3e9a0:	39 81       	ldd	r19, Y+1	; 0x01
   3e9a2:	4a 81       	ldd	r20, Y+2	; 0x02
   3e9a4:	5b 81       	ldd	r21, Y+3	; 0x03
   3e9a6:	ce 51       	subi	r28, 0x1E	; 30
   3e9a8:	d1 40       	sbci	r29, 0x01	; 1
   3e9aa:	20 30       	cpi	r18, 0x00	; 0
   3e9ac:	80 ec       	ldi	r24, 0xC0	; 192
   3e9ae:	38 07       	cpc	r19, r24
   3e9b0:	83 e0       	ldi	r24, 0x03	; 3
   3e9b2:	48 07       	cpc	r20, r24
   3e9b4:	80 e0       	ldi	r24, 0x00	; 0
   3e9b6:	58 07       	cpc	r21, r24
   3e9b8:	f0 f4       	brcc	.+60     	; 0x3e9f6 <main+0x4a6>
   3e9ba:	83 e0       	ldi	r24, 0x03	; 3
   3e9bc:	f9 01       	movw	r30, r18
   3e9be:	40 93 5b 00 	sts	0x005B, r20
						boot_page_erase(eraseAddress);
   3e9c2:	80 93 57 00 	sts	0x0057, r24
   3e9c6:	e8 95       	spm
   3e9c8:	07 b6       	in	r0, 0x37	; 55
   3e9ca:	00 fc       	sbrc	r0, 0
   3e9cc:	fd cf       	rjmp	.-6      	; 0x3e9c8 <main+0x478>
						// Perform page erase
						boot_spm_busy_wait(); // Wait until the memory is erased.
   3e9ce:	c2 5e       	subi	r28, 0xE2	; 226
   3e9d0:	de 4f       	sbci	r29, 0xFE	; 254
   3e9d2:	28 81       	ld	r18, Y
						eraseAddress += SPM_PAGESIZE; // point to next page to be erase
   3e9d4:	39 81       	ldd	r19, Y+1	; 0x01
   3e9d6:	4a 81       	ldd	r20, Y+2	; 0x02
   3e9d8:	5b 81       	ldd	r21, Y+3	; 0x03
   3e9da:	ce 51       	subi	r28, 0x1E	; 30
   3e9dc:	d1 40       	sbci	r29, 0x01	; 1
   3e9de:	20 50       	subi	r18, 0x00	; 0
   3e9e0:	3f 4f       	sbci	r19, 0xFF	; 255
   3e9e2:	4f 4f       	sbci	r20, 0xFF	; 255
   3e9e4:	5f 4f       	sbci	r21, 0xFF	; 255
   3e9e6:	c2 5e       	subi	r28, 0xE2	; 226
   3e9e8:	de 4f       	sbci	r29, 0xFE	; 254
   3e9ea:	28 83       	st	Y, r18
   3e9ec:	39 83       	std	Y+1, r19	; 0x01
   3e9ee:	4a 83       	std	Y+2, r20	; 0x02
   3e9f0:	5b 83       	std	Y+3, r21	; 0x03
   3e9f2:	ce 51       	subi	r28, 0x1E	; 30
   3e9f4:	d1 40       	sbci	r29, 0x01	; 1
   3e9f6:	8b 85       	ldd	r24, Y+11	; 0x0b
   3e9f8:	de 01       	movw	r26, r28
   3e9fa:	1d 96       	adiw	r26, 0x0d	; 13
   3e9fc:	93 01       	movw	r18, r6
   3e9fe:	82 01       	movw	r16, r4
   3ea00:	41 e0       	ldi	r20, 0x01	; 1
			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if (msgBuffer[2] == 0x50) {
					if (msgBuffer[3] == 0x08)
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3ea02:	b6 01       	movw	r22, r12
   3ea04:	fd 01       	movw	r30, r26
					do {
						lowByte = *p++;
						highByte = *p++;

						data = (highByte << 8) | lowByte;
						boot_page_fill(address, data);
   3ea06:	31 97       	sbiw	r30, 0x01	; 1
   3ea08:	50 81       	ld	r21, Z
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3ea0a:	c5 5d       	subi	r28, 0xD5	; 213
   3ea0c:	de 4f       	sbci	r29, 0xFE	; 254
					/* Write FLASH */
					do {
						lowByte = *p++;
						highByte = *p++;

						data = (highByte << 8) | lowByte;
   3ea0e:	58 83       	st	Y, r21
   3ea10:	cb 52       	subi	r28, 0x2B	; 43
   3ea12:	d1 40       	sbci	r29, 0x01	; 1
   3ea14:	c6 5d       	subi	r28, 0xD6	; 214
   3ea16:	de 4f       	sbci	r29, 0xFE	; 254
   3ea18:	18 82       	st	Y, r1
   3ea1a:	ca 52       	subi	r28, 0x2A	; 42
   3ea1c:	d1 40       	sbci	r29, 0x01	; 1
   3ea1e:	90 e0       	ldi	r25, 0x00	; 0
   3ea20:	c6 5d       	subi	r28, 0xD6	; 214
   3ea22:	de 4f       	sbci	r29, 0xFE	; 254
   3ea24:	e8 81       	ld	r30, Y
   3ea26:	f9 81       	ldd	r31, Y+1	; 0x01
   3ea28:	ca 52       	subi	r28, 0x2A	; 42
   3ea2a:	d1 40       	sbci	r29, 0x01	; 1
   3ea2c:	8e 2b       	or	r24, r30
   3ea2e:	9f 2b       	or	r25, r31
   3ea30:	0c 01       	movw	r0, r24
   3ea32:	f8 01       	movw	r30, r16
   3ea34:	20 93 5b 00 	sts	0x005B, r18
						boot_page_fill(address, data);
   3ea38:	40 93 57 00 	sts	0x0057, r20
   3ea3c:	e8 95       	spm
   3ea3e:	11 24       	eor	r1, r1
   3ea40:	0e 5f       	subi	r16, 0xFE	; 254
   3ea42:	1f 4f       	sbci	r17, 0xFF	; 255
   3ea44:	2f 4f       	sbci	r18, 0xFF	; 255

						address = address + 2; // Select next word in memory
   3ea46:	3f 4f       	sbci	r19, 0xFF	; 255
   3ea48:	62 50       	subi	r22, 0x02	; 2
   3ea4a:	70 40       	sbci	r23, 0x00	; 0
   3ea4c:	19 f0       	breq	.+6      	; 0x3ea54 <main+0x504>
						size -= 2; // Reduce number of bytes to write by two
   3ea4e:	8c 91       	ld	r24, X
   3ea50:	12 96       	adiw	r26, 0x02	; 2
					} while (size); // Loop until all bytes written
   3ea52:	d8 cf       	rjmp	.-80     	; 0x3ea04 <main+0x4b4>
					}

					/* Write FLASH */
					do {
						lowByte = *p++;
						highByte = *p++;
   3ea54:	85 e0       	ldi	r24, 0x05	; 5
   3ea56:	f2 01       	movw	r30, r4
   3ea58:	60 92 5b 00 	sts	0x005B, r6

						address = address + 2; // Select next word in memory
						size -= 2; // Reduce number of bytes to write by two
					} while (size); // Loop until all bytes written

					boot_page_write(tempaddress);
   3ea5c:	80 93 57 00 	sts	0x0057, r24
   3ea60:	e8 95       	spm
   3ea62:	07 b6       	in	r0, 0x37	; 55
   3ea64:	00 fc       	sbrc	r0, 0
   3ea66:	fd cf       	rjmp	.-6      	; 0x3ea62 <main+0x512>
					boot_spm_busy_wait();
   3ea68:	81 e1       	ldi	r24, 0x11	; 17
   3ea6a:	80 93 57 00 	sts	0x0057, r24
					boot_rww_enable(); // Re-enable the RWW section
   3ea6e:	e8 95       	spm
   3ea70:	24 c0       	rjmp	.+72     	; 0x3eaba <main+0x56a>
   3ea72:	53 01       	movw	r10, r6
   3ea74:	42 01       	movw	r8, r4
   3ea76:	b6 94       	lsr	r11
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
   3ea78:	a7 94       	ror	r10
   3ea7a:	97 94       	ror	r9
   3ea7c:	87 94       	ror	r8
   3ea7e:	00 e0       	ldi	r16, 0x00	; 0
   3ea80:	10 e0       	ldi	r17, 0x00	; 0
   3ea82:	6b e0       	ldi	r22, 0x0B	; 11
					/* write EEPROM */
					while (size) {
   3ea84:	e6 2e       	mov	r14, r22
   3ea86:	f1 2c       	mov	r15, r1
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
				unsigned char *p = msgBuffer + 10;
   3ea88:	ec 0e       	add	r14, r28
   3ea8a:	fd 1e       	adc	r15, r29
   3ea8c:	09 c0       	rjmp	.+18     	; 0x3eaa0 <main+0x550>
   3ea8e:	d7 01       	movw	r26, r14
   3ea90:	6d 91       	ld	r22, X+
					boot_rww_enable(); // Re-enable the RWW section
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
					/* write EEPROM */
					while (size) {
   3ea92:	7d 01       	movw	r14, r26
						eeprom_write_byte((uint8_t*) ii, *p++);
   3ea94:	c8 01       	movw	r24, r16
   3ea96:	88 0d       	add	r24, r8
   3ea98:	99 1d       	adc	r25, r9
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3ea9a:	24 d2       	rcall	.+1096   	; 0x3eee4 <__eewr_byte_m2560>
   3ea9c:	0f 5f       	subi	r16, 0xFF	; 255
   3ea9e:	1f 4f       	sbci	r17, 0xFF	; 255
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
					/* write EEPROM */
					while (size) {
						eeprom_write_byte((uint8_t*) ii, *p++);
   3eaa0:	0c 15       	cp	r16, r12
   3eaa2:	1d 05       	cpc	r17, r13
   3eaa4:	a1 f7       	brne	.-24     	; 0x3ea8e <main+0x53e>
   3eaa6:	20 e0       	ldi	r18, 0x00	; 0
					boot_rww_enable(); // Re-enable the RWW section
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
					/* write EEPROM */
					while (size) {
   3eaa8:	30 e0       	ldi	r19, 0x00	; 0
   3eaaa:	00 0f       	add	r16, r16
   3eaac:	11 1f       	adc	r17, r17
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3eaae:	22 1f       	adc	r18, r18
   3eab0:	33 1f       	adc	r19, r19
   3eab2:	04 0d       	add	r16, r4
   3eab4:	15 1d       	adc	r17, r5
   3eab6:	26 1d       	adc	r18, r6
   3eab8:	37 1d       	adc	r19, r7
					boot_rww_enable(); // Re-enable the RWW section
				} else {
					//*	issue 543, this should work, It has not been tested.
					uint16_t ii = address >> 1;
					/* write EEPROM */
					while (size) {
   3eaba:	1a 82       	std	Y+2, r1	; 0x02
   3eabc:	28 01       	movw	r4, r16
   3eabe:	39 01       	movw	r6, r18
   3eac0:	62 c0       	rjmp	.+196    	; 0x3eb86 <main+0x636>
						ii++;
						size--;
					}
				}
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
   3eac2:	ba 81       	ldd	r27, Y+2	; 0x02
			}
				break;
   3eac4:	c3 5d       	subi	r28, 0xD3	; 211
   3eac6:	de 4f       	sbci	r29, 0xFE	; 254
   3eac8:	b8 83       	st	Y, r27

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP: {
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
   3eaca:	cd 52       	subi	r28, 0x2D	; 45
   3eacc:	d1 40       	sbci	r29, 0x01	; 1
   3eace:	c4 5d       	subi	r28, 0xD4	; 212
   3ead0:	de 4f       	sbci	r29, 0xFE	; 254
   3ead2:	18 82       	st	Y, r1
   3ead4:	cc 52       	subi	r28, 0x2C	; 44
   3ead6:	d1 40       	sbci	r29, 0x01	; 1
   3ead8:	2b 81       	ldd	r18, Y+3	; 0x03
   3eada:	30 e0       	ldi	r19, 0x00	; 0
   3eadc:	c4 5d       	subi	r28, 0xD4	; 212
   3eade:	de 4f       	sbci	r29, 0xFE	; 254
   3eae0:	48 81       	ld	r20, Y
   3eae2:	59 81       	ldd	r21, Y+1	; 0x01
   3eae4:	cc 52       	subi	r28, 0x2C	; 44
   3eae6:	d1 40       	sbci	r29, 0x01	; 1
   3eae8:	24 2b       	or	r18, r20
   3eaea:	35 2b       	or	r19, r21
   3eaec:	93 e0       	ldi	r25, 0x03	; 3
   3eaee:	c9 2e       	mov	r12, r25
   3eaf0:	d1 2c       	mov	r13, r1
   3eaf2:	c2 0e       	add	r12, r18
				unsigned char *p = msgBuffer + 1;
				msgLength = size + 3;
   3eaf4:	d3 1e       	adc	r13, r19
   3eaf6:	1a 82       	std	Y+2, r1	; 0x02
   3eaf8:	84 31       	cpi	r24, 0x14	; 20
   3eafa:	c9 f4       	brne	.+50     	; 0x3eb2e <main+0x5de>
   3eafc:	de 01       	movw	r26, r28

				*p++ = STATUS_CMD_OK;
   3eafe:	13 96       	adiw	r26, 0x03	; 3
				if (msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3eb00:	a9 01       	movw	r20, r18
   3eb02:	9d 01       	movw	r18, r26
   3eb04:	d3 01       	movw	r26, r6
   3eb06:	c2 01       	movw	r24, r4
   3eb08:	ab bf       	out	0x3b, r26	; 59
   3eb0a:	fc 01       	movw	r30, r24
   3eb0c:	67 91       	elpm	r22, Z+
   3eb0e:	76 91       	elpm	r23, Z

					// Read FLASH
					do {
						//#if defined(RAMPZ)
#if (FLASHEND > 0x10000)
						data = pgm_read_word_far(address);
   3eb10:	f9 01       	movw	r30, r18
   3eb12:	60 83       	st	Z, r22
   3eb14:	71 83       	std	Z+1, r23	; 0x01
   3eb16:	2e 5f       	subi	r18, 0xFE	; 254
#else
						data = pgm_read_word_near(address);
#endif
						*p++ = (unsigned char) data; //LSB
   3eb18:	3f 4f       	sbci	r19, 0xFF	; 255
   3eb1a:	02 96       	adiw	r24, 0x02	; 2
						*p++ = (unsigned char) (data >> 8); //MSB
   3eb1c:	a1 1d       	adc	r26, r1
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3eb1e:	b1 1d       	adc	r27, r1
   3eb20:	42 50       	subi	r20, 0x02	; 2
#else
						data = pgm_read_word_near(address);
#endif
						*p++ = (unsigned char) data; //LSB
						*p++ = (unsigned char) (data >> 8); //MSB
						address += 2; // Select next word in memory
   3eb22:	50 40       	sbci	r21, 0x00	; 0
   3eb24:	89 f7       	brne	.-30     	; 0x3eb08 <main+0x5b8>
   3eb26:	2c 01       	movw	r4, r24
						size -= 2;
   3eb28:	3d 01       	movw	r6, r26
   3eb2a:	d9 01       	movw	r26, r18
					} while (size);
   3eb2c:	28 c0       	rjmp	.+80     	; 0x3eb7e <main+0x62e>
   3eb2e:	f9 01       	movw	r30, r18
   3eb30:	b3 01       	movw	r22, r6
   3eb32:	a2 01       	movw	r20, r4
   3eb34:	8e 01       	movw	r16, r28
				unsigned int size = ((msgBuffer[1]) << 8) | msgBuffer[2];
				unsigned char *p = msgBuffer + 1;
				msgLength = size + 3;

				*p++ = STATUS_CMD_OK;
				if (msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3eb36:	0d 5f       	subi	r16, 0xFD	; 253
   3eb38:	1f 4f       	sbci	r17, 0xFF	; 255
   3eb3a:	41 bd       	out	0x21, r20	; 33
   3eb3c:	bb 27       	eor	r27, r27
   3eb3e:	a7 2f       	mov	r26, r23
   3eb40:	96 2f       	mov	r25, r22
						size -= 2;
					} while (size);
				} else {
					/* Read EEPROM */
					do {
						EEARL = address; // Setup EEPROM address
   3eb42:	85 2f       	mov	r24, r21
						EEARH = ((address >> 8));
   3eb44:	82 bd       	out	0x22, r24	; 34
   3eb46:	4f 5f       	subi	r20, 0xFF	; 255
   3eb48:	5f 4f       	sbci	r21, 0xFF	; 255
   3eb4a:	6f 4f       	sbci	r22, 0xFF	; 255
   3eb4c:	7f 4f       	sbci	r23, 0xFF	; 255
						address++; // Select next EEPROM byte
   3eb4e:	f8 9a       	sbi	0x1f, 0	; 31
   3eb50:	80 b5       	in	r24, 0x20	; 32
   3eb52:	d8 01       	movw	r26, r16
   3eb54:	8d 93       	st	X+, r24
						EECR |= (1 << EERE); // Read EEPROM
   3eb56:	8d 01       	movw	r16, r26
						*p++ = EEDR; // Send EEPROM data
   3eb58:	31 97       	sbiw	r30, 0x01	; 1
   3eb5a:	79 f7       	brne	.-34     	; 0x3eb3a <main+0x5ea>
   3eb5c:	c9 01       	movw	r24, r18
   3eb5e:	01 97       	sbiw	r24, 0x01	; 1
						size--;
   3eb60:	a0 e0       	ldi	r26, 0x00	; 0
					} while (size);
   3eb62:	b0 e0       	ldi	r27, 0x00	; 0
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3eb64:	01 96       	adiw	r24, 0x01	; 1
   3eb66:	a1 1d       	adc	r26, r1
   3eb68:	b1 1d       	adc	r27, r1
   3eb6a:	48 0e       	add	r4, r24
   3eb6c:	59 1e       	adc	r5, r25
   3eb6e:	6a 1e       	adc	r6, r26
   3eb70:	7b 1e       	adc	r7, r27
						EEARH = ((address >> 8));
						address++; // Select next EEPROM byte
						EECR |= (1 << EERE); // Read EEPROM
						*p++ = EEDR; // Send EEPROM data
						size--;
					} while (size);
   3eb72:	a3 e0       	ldi	r26, 0x03	; 3
   3eb74:	b0 e0       	ldi	r27, 0x00	; 0
   3eb76:	ac 0f       	add	r26, r28
   3eb78:	bd 1f       	adc	r27, r29
   3eb7a:	a2 0f       	add	r26, r18
   3eb7c:	b3 1f       	adc	r27, r19
   3eb7e:	1c 92       	st	X, r1
   3eb80:	05 c0       	rjmp	.+10     	; 0x3eb8c <main+0x63c>
   3eb82:	80 ec       	ldi	r24, 0xC0	; 192
   3eb84:	8a 83       	std	Y+2, r24	; 0x02
				}
				*p++ = STATUS_CMD_OK;
   3eb86:	b2 e0       	ldi	r27, 0x02	; 2
			}
				break;
   3eb88:	cb 2e       	mov	r12, r27

			default:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_FAILED;
   3eb8a:	d1 2c       	mov	r13, r1
   3eb8c:	8b e1       	ldi	r24, 0x1B	; 27
				*p++ = STATUS_CMD_OK;
			}
				break;

			default:
				msgLength = 2;
   3eb8e:	d8 da       	rcall	.-2640   	; 0x3e140 <sendchar>
   3eb90:	82 2d       	mov	r24, r2
   3eb92:	d6 da       	rcall	.-2644   	; 0x3e140 <sendchar>
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3eb94:	8d 2d       	mov	r24, r13
   3eb96:	d4 da       	rcall	.-2648   	; 0x3e140 <sendchar>
   3eb98:	8c 2d       	mov	r24, r12
			checksum = MESSAGE_START ^ 0;

			sendchar(seqNum);
   3eb9a:	d2 da       	rcall	.-2652   	; 0x3e140 <sendchar>
   3eb9c:	8e e0       	ldi	r24, 0x0E	; 14
   3eb9e:	d0 da       	rcall	.-2656   	; 0x3e140 <sendchar>
			checksum ^= seqNum;

			c = ((msgLength >> 8) & 0xFF);
			sendchar(c);
   3eba0:	a5 e1       	ldi	r26, 0x15	; 21
   3eba2:	ea 2e       	mov	r14, r26
   3eba4:	e2 24       	eor	r14, r2
			checksum ^= c;

			c = msgLength & 0x00FF;
			sendchar(c);
   3eba6:	ec 24       	eor	r14, r12
   3eba8:	ed 24       	eor	r14, r13
   3ebaa:	4e 01       	movw	r8, r28
			checksum ^= c;

			sendchar(TOKEN);
   3ebac:	08 94       	sec
   3ebae:	81 1c       	adc	r8, r1
   3ebb0:	91 1c       	adc	r9, r1
			sendchar(seqNum);
			checksum ^= seqNum;

			c = ((msgLength >> 8) & 0xFF);
			sendchar(c);
			checksum ^= c;
   3ebb2:	09 c0       	rjmp	.+18     	; 0x3ebc6 <main+0x676>
   3ebb4:	f4 01       	movw	r30, r8
   3ebb6:	11 91       	ld	r17, Z+

			c = msgLength & 0x00FF;
			sendchar(c);
			checksum ^= c;
   3ebb8:	4f 01       	movw	r8, r30

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3ebba:	81 2f       	mov	r24, r17

			p = msgBuffer;
   3ebbc:	c1 da       	rcall	.-2686   	; 0x3e140 <sendchar>
   3ebbe:	e1 26       	eor	r14, r17
   3ebc0:	08 94       	sec
   3ebc2:	c1 08       	sbc	r12, r1
			while (msgLength) {
   3ebc4:	d1 08       	sbc	r13, r1
				c = *p++;
   3ebc6:	c1 14       	cp	r12, r1
   3ebc8:	d1 04       	cpc	r13, r1
   3ebca:	a1 f7       	brne	.-24     	; 0x3ebb4 <main+0x664>
				sendchar(c);
   3ebcc:	8e 2d       	mov	r24, r14
   3ebce:	b8 da       	rcall	.-2704   	; 0x3e140 <sendchar>
   3ebd0:	23 94       	inc	r2
				checksum ^= c;
   3ebd2:	33 20       	and	r3, r3
				msgLength--;
   3ebd4:	09 f0       	breq	.+2      	; 0x3ebd8 <main+0x688>
   3ebd6:	fd c0       	rjmp	.+506    	; 0x3edd2 <main+0x882>
   3ebd8:	80 e0       	ldi	r24, 0x00	; 0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p = msgBuffer;
			while (msgLength) {
   3ebda:	90 e0       	ldi	r25, 0x00	; 0
   3ebdc:	2d c0       	rjmp	.+90     	; 0x3ec38 <main+0x6e8>
   3ebde:	ca 5d       	subi	r28, 0xDA	; 218
				c = *p++;
				sendchar(c);
				checksum ^= c;
				msgLength--;
			}
			sendchar(checksum);
   3ebe0:	de 4f       	sbci	r29, 0xFE	; 254
   3ebe2:	19 82       	std	Y+1, r1	; 0x01
   3ebe4:	18 82       	st	Y, r1
			seqNum++;
   3ebe6:	c6 52       	subi	r28, 0x26	; 38
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}

	if (boot_state == 1) {
		//*	main loop
		while (!isLeave) {
   3ebe8:	d1 40       	sbci	r29, 0x01	; 1
   3ebea:	cc 5d       	subi	r28, 0xDC	; 220
   3ebec:	de 4f       	sbci	r29, 0xFE	; 254
   3ebee:	19 82       	std	Y+1, r1	; 0x01
   3ebf0:	18 82       	st	Y, r1
   3ebf2:	c4 52       	subi	r28, 0x24	; 36
		//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
		// SDCARD BOOTLOADER
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}

	if (boot_state == 1) {
   3ebf4:	d1 40       	sbci	r29, 0x01	; 1
   3ebf6:	22 24       	eor	r2, r2
   3ebf8:	10 e0       	ldi	r17, 0x00	; 0
   3ebfa:	ce 5d       	subi	r28, 0xDE	; 222
   3ebfc:	de 4f       	sbci	r29, 0xFE	; 254
   3ebfe:	19 82       	std	Y+1, r1	; 0x01
   3ec00:	18 82       	st	Y, r1
   3ec02:	c2 52       	subi	r28, 0x22	; 34
   3ec04:	d1 40       	sbci	r29, 0x01	; 1
   3ec06:	c2 5e       	subi	r28, 0xE2	; 226
   3ec08:	de 4f       	sbci	r29, 0xFE	; 254
   3ec0a:	18 82       	st	Y, r1
   3ec0c:	19 82       	std	Y+1, r1	; 0x01
   3ec0e:	1a 82       	std	Y+2, r1	; 0x02
   3ec10:	1b 82       	std	Y+3, r1	; 0x03
   3ec12:	ce 51       	subi	r28, 0x1E	; 30
   3ec14:	d1 40       	sbci	r29, 0x01	; 1
   3ec16:	44 24       	eor	r4, r4
   3ec18:	55 24       	eor	r5, r5
   3ec1a:	32 01       	movw	r6, r4
   3ec1c:	20 e0       	ldi	r18, 0x00	; 0
   3ec1e:	30 e0       	ldi	r19, 0x00	; 0
   3ec20:	a9 01       	movw	r20, r18
   3ec22:	4b bf       	out	0x3b, r20	; 59
   3ec24:	f9 01       	movw	r30, r18
   3ec26:	47 91       	elpm	r20, Z+
   3ec28:	56 91       	elpm	r21, Z
   3ec2a:	c2 5d       	subi	r28, 0xD2	; 210
   3ec2c:	de 4f       	sbci	r29, 0xFE	; 254
   3ec2e:	59 83       	std	Y+1, r21	; 0x01
   3ec30:	48 83       	st	Y, r20
		// wait for data
		count++;
		if (count > MAX_TIME_COUNT) {
			unsigned int data;
#if (FLASHEND > 0x10000)
			data = pgm_read_word_far(0); //*	get the first word of the user program
   3ec32:	ce 52       	subi	r28, 0x2E	; 46
   3ec34:	d1 40       	sbci	r29, 0x01	; 1
   3ec36:	e1 2e       	mov	r14, r17
   3ec38:	40 e0       	ldi	r20, 0x00	; 0
   3ec3a:	50 e0       	ldi	r21, 0x00	; 0
   3ec3c:	20 e0       	ldi	r18, 0x00	; 0
   3ec3e:	ce 5d       	subi	r28, 0xDE	; 222
   3ec40:	de 4f       	sbci	r29, 0xFE	; 254
   3ec42:	08 81       	ld	r16, Y
   3ec44:	19 81       	ldd	r17, Y+1	; 0x01
   3ec46:	c2 52       	subi	r28, 0x22	; 34
   3ec48:	d1 40       	sbci	r29, 0x01	; 1
   3ec4a:	cc 5d       	subi	r28, 0xDC	; 220
   3ec4c:	de 4f       	sbci	r29, 0xFE	; 254
		app_start();
	}
	//************************************************************************
#endif

	boot_timer = 0;
   3ec4e:	68 81       	ld	r22, Y
   3ec50:	79 81       	ldd	r23, Y+1	; 0x01
   3ec52:	c4 52       	subi	r28, 0x24	; 36
   3ec54:	d1 40       	sbci	r29, 0x01	; 1
   3ec56:	ca 5d       	subi	r28, 0xDA	; 218
   3ec58:	de 4f       	sbci	r29, 0xFE	; 254
   3ec5a:	c8 80       	ld	r12, Y
   3ec5c:	d9 80       	ldd	r13, Y+1	; 0x01
   3ec5e:	c6 52       	subi	r28, 0x26	; 38
   3ec60:	d1 40       	sbci	r29, 0x01	; 1
   3ec62:	de cc       	rjmp	.-1604   	; 0x3e620 <main+0xd0>
   3ec64:	82 30       	cpi	r24, 0x02	; 2
   3ec66:	91 05       	cpc	r25, r1
   3ec68:	09 f0       	breq	.+2      	; 0x3ec6c <main+0x71c>
   3ec6a:	b3 c0       	rjmp	.+358    	; 0x3edd2 <main+0x882>
   3ec6c:	8f ef       	ldi	r24, 0xFF	; 255
   3ec6e:	9f e0       	ldi	r25, 0x0F	; 15
   3ec70:	31 d1       	rcall	.+610    	; 0x3eed4 <__eerd_byte_m2560>
   3ec72:	80 3f       	cpi	r24, 0xF0	; 240
   3ec74:	09 f0       	breq	.+2      	; 0x3ec78 <main+0x728>
   3ec76:	ad c0       	rjmp	.+346    	; 0x3edd2 <main+0x882>
   3ec78:	85 e7       	ldi	r24, 0x75	; 117
#endif

		}
	}

	if (boot_state == 2) {
   3ec7a:	62 da       	rcall	.-2876   	; 0x3e140 <sendchar>
   3ec7c:	80 e7       	ldi	r24, 0x70	; 112
   3ec7e:	60 da       	rcall	.-2880   	; 0x3e140 <sendchar>
   3ec80:	87 e6       	ldi	r24, 0x67	; 103
		if (eeprom_read_byte(4095) == 0xF0) {
   3ec82:	5e da       	rcall	.-2884   	; 0x3e140 <sendchar>
   3ec84:	82 e7       	ldi	r24, 0x72	; 114
   3ec86:	5c da       	rcall	.-2888   	; 0x3e140 <sendchar>
   3ec88:	81 e6       	ldi	r24, 0x61	; 97
   3ec8a:	5a da       	rcall	.-2892   	; 0x3e140 <sendchar>
   3ec8c:	84 e6       	ldi	r24, 0x64	; 100
   3ec8e:	58 da       	rcall	.-2896   	; 0x3e140 <sendchar>
			sendchar('u');
   3ec90:	89 e6       	ldi	r24, 0x69	; 105
   3ec92:	56 da       	rcall	.-2900   	; 0x3e140 <sendchar>
   3ec94:	8e e6       	ldi	r24, 0x6E	; 110
			sendchar('p');
   3ec96:	54 da       	rcall	.-2904   	; 0x3e140 <sendchar>
   3ec98:	87 e6       	ldi	r24, 0x67	; 103
   3ec9a:	52 da       	rcall	.-2908   	; 0x3e140 <sendchar>
			sendchar('g');
   3ec9c:	8d e0       	ldi	r24, 0x0D	; 13
   3ec9e:	50 da       	rcall	.-2912   	; 0x3e140 <sendchar>
   3eca0:	8a e0       	ldi	r24, 0x0A	; 10
			sendchar('r');
   3eca2:	4e da       	rcall	.-2916   	; 0x3e140 <sendchar>
   3eca4:	84 e6       	ldi	r24, 0x64	; 100
   3eca6:	90 e0       	ldi	r25, 0x00	; 0
			sendchar('a');
   3eca8:	ab da       	rcall	.-2730   	; 0x3e200 <delay_ms>
   3ecaa:	8d e0       	ldi	r24, 0x0D	; 13
   3ecac:	49 da       	rcall	.-2926   	; 0x3e140 <sendchar>
			sendchar('d');
   3ecae:	8a e0       	ldi	r24, 0x0A	; 10
   3ecb0:	47 da       	rcall	.-2930   	; 0x3e140 <sendchar>
   3ecb2:	88 24       	eor	r8, r8
			sendchar('i');
   3ecb4:	99 24       	eor	r9, r9
   3ecb6:	54 01       	movw	r10, r8
   3ecb8:	f0 eb       	ldi	r31, 0xB0	; 176
			sendchar('n');
   3ecba:	4f 2e       	mov	r4, r31
   3ecbc:	f4 e0       	ldi	r31, 0x04	; 4
   3ecbe:	5f 2e       	mov	r5, r31
			sendchar('g');
   3ecc0:	61 2c       	mov	r6, r1
   3ecc2:	71 2c       	mov	r7, r1
   3ecc4:	40 e1       	ldi	r20, 0x10	; 16
			sendchar(0x0d);
   3ecc6:	c4 2e       	mov	r12, r20
   3ecc8:	d1 2c       	mov	r13, r1
   3ecca:	e1 2c       	mov	r14, r1
			sendchar(0x0a);
   3eccc:	f1 2c       	mov	r15, r1
   3ecce:	c8 0c       	add	r12, r8
   3ecd0:	d9 1c       	adc	r13, r9
			delay_ms(100);
   3ecd2:	ea 1c       	adc	r14, r10
   3ecd4:	fb 1c       	adc	r15, r11
   3ecd6:	82 e3       	ldi	r24, 0x32	; 50
   3ecd8:	90 e0       	ldi	r25, 0x00	; 0

			DWORD fa; /* Flash address */
			sendchar(0x0d);
   3ecda:	92 da       	rcall	.-2780   	; 0x3e200 <delay_ms>
   3ecdc:	c5 01       	movw	r24, r10
   3ecde:	b4 01       	movw	r22, r8
			sendchar(0x0a);
   3ece0:	09 dc       	rcall	.-2030   	; 0x3e4f4 <flash_erase>
   3ece2:	8e e0       	ldi	r24, 0x0E	; 14
   3ece4:	92 e0       	ldi	r25, 0x02	; 2
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
   3ece6:	6f ef       	ldi	r22, 0xFF	; 255
   3ece8:	70 e0       	ldi	r23, 0x00	; 0
   3ecea:	40 e0       	ldi	r20, 0x00	; 0
					// 	sendchar(0x0d);
					// 	sendchar(0x0a);
					// }
					// 
					// 
					if(((address +1)%1200) <= 300 && ((address +1)%1200) >= 0){
   3ecec:	51 e0       	ldi	r21, 0x01	; 1
   3ecee:	eb d0       	rcall	.+470    	; 0x3eec6 <memset>
   3ecf0:	ee e0       	ldi	r30, 0x0E	; 14
   3ecf2:	2e 2e       	mov	r2, r30
   3ecf4:	e2 e0       	ldi	r30, 0x02	; 2
   3ecf6:	3e 2e       	mov	r3, r30
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3ecf8:	00 e0       	ldi	r16, 0x00	; 0
   3ecfa:	10 e0       	ldi	r17, 0x00	; 0
   3ecfc:	c7 01       	movw	r24, r14
   3ecfe:	b6 01       	movw	r22, r12
   3ed00:	61 da       	rcall	.-2878   	; 0x3e1c4 <spiReadReg>
   3ed02:	d1 01       	movw	r26, r2
   3ed04:	8d 93       	st	X+, r24
   3ed06:	1d 01       	movw	r2, r26
   3ed08:	08 94       	sec
			sendchar(0x0d);
			sendchar(0x0a);
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
		//		PROGLED_PORT ^= (1 << PROGLED_PIN); // turn LED ON
				delay_ms(50);
   3ed0a:	c1 1c       	adc	r12, r1
   3ed0c:	d1 1c       	adc	r13, r1
   3ed0e:	e1 1c       	adc	r14, r1
   3ed10:	f1 1c       	adc	r15, r1
				flash_erase(fa); /* Erase a page */
   3ed12:	c7 01       	movw	r24, r14
   3ed14:	b6 01       	movw	r22, r12
   3ed16:	6f 5f       	subi	r22, 0xFF	; 255
   3ed18:	7f 4f       	sbci	r23, 0xFF	; 255
				memset(Buff, 0xFF, SPM_PAGESIZE); /* Clear buffer */
   3ed1a:	8f 4f       	sbci	r24, 0xFF	; 255
   3ed1c:	9f 4f       	sbci	r25, 0xFF	; 255
   3ed1e:	a3 01       	movw	r20, r6
   3ed20:	92 01       	movw	r18, r4
   3ed22:	80 d0       	rcall	.+256    	; 0x3ee24 <__divmodsi4>
   3ed24:	dc 01       	movw	r26, r24
   3ed26:	cb 01       	movw	r24, r22
   3ed28:	8d 32       	cpi	r24, 0x2D	; 45
   3ed2a:	e1 e0       	ldi	r30, 0x01	; 1
   3ed2c:	9e 07       	cpc	r25, r30
   3ed2e:	e0 e0       	ldi	r30, 0x00	; 0
   3ed30:	ae 07       	cpc	r26, r30
				for (int i = 0; i < SPM_PAGESIZE; i++) {
   3ed32:	e0 e0       	ldi	r30, 0x00	; 0
   3ed34:	be 07       	cpc	r27, r30
					Buff[i] = spiReadReg(address);
   3ed36:	18 f4       	brcc	.+6      	; 0x3ed3e <main+0x7ee>
   3ed38:	2d 9a       	sbi	0x05, 5	; 5
   3ed3a:	2e 98       	cbi	0x05, 6	; 5
   3ed3c:	10 c0       	rjmp	.+32     	; 0x3ed5e <main+0x80e>
   3ed3e:	ac 01       	movw	r20, r24
   3ed40:	bd 01       	movw	r22, r26
   3ed42:	40 59       	subi	r20, 0x90	; 144
					address++;
   3ed44:	51 40       	sbci	r21, 0x01	; 1
   3ed46:	60 40       	sbci	r22, 0x00	; 0
   3ed48:	70 40       	sbci	r23, 0x00	; 0
   3ed4a:	4d 32       	cpi	r20, 0x2D	; 45
   3ed4c:	f1 e0       	ldi	r31, 0x01	; 1
//*	for watch dog timer startup
void (*app_start)(void) = 0;
uint8_t check = 1;

//*****************************************************************************
int main(void) {
   3ed4e:	5f 07       	cpc	r21, r31
   3ed50:	f0 e0       	ldi	r31, 0x00	; 0
   3ed52:	6f 07       	cpc	r22, r31
   3ed54:	f0 e0       	ldi	r31, 0x00	; 0
   3ed56:	7f 07       	cpc	r23, r31
   3ed58:	20 f4       	brcc	.+8      	; 0x3ed62 <main+0x812>
					// 	sendchar(0x0d);
					// 	sendchar(0x0a);
					// }
					// 
					// 
					if(((address +1)%1200) <= 300 && ((address +1)%1200) >= 0){
   3ed5a:	2d 98       	cbi	0x05, 5	; 5
   3ed5c:	2e 9a       	sbi	0x05, 6	; 5
   3ed5e:	2f 98       	cbi	0x05, 7	; 5
   3ed60:	0e c0       	rjmp	.+28     	; 0x3ed7e <main+0x82e>
   3ed62:	08 97       	sbiw	r24, 0x08	; 8
   3ed64:	a1 09       	sbc	r26, r1
   3ed66:	b1 09       	sbc	r27, r1
   3ed68:	85 34       	cpi	r24, 0x45	; 69
   3ed6a:	24 e0       	ldi	r18, 0x04	; 4
   3ed6c:	92 07       	cpc	r25, r18
   3ed6e:	20 e0       	ldi	r18, 0x00	; 0
   3ed70:	a2 07       	cpc	r26, r18
   3ed72:	20 e0       	ldi	r18, 0x00	; 0
   3ed74:	b2 07       	cpc	r27, r18
						LED1_HIGH();
   3ed76:	18 f4       	brcc	.+6      	; 0x3ed7e <main+0x82e>
						LED2_LOW();
   3ed78:	2d 98       	cbi	0x05, 5	; 5
   3ed7a:	2e 98       	cbi	0x05, 6	; 5
						LED3_LOW();
					}else if(((address +1)%1200) <= 700 && ((address +1)%1200) >= 400){
   3ed7c:	2f 9a       	sbi	0x05, 7	; 5
   3ed7e:	0f 5f       	subi	r16, 0xFF	; 255
   3ed80:	1f 4f       	sbci	r17, 0xFF	; 255
   3ed82:	31 e0       	ldi	r19, 0x01	; 1
   3ed84:	00 30       	cpi	r16, 0x00	; 0
   3ed86:	13 07       	cpc	r17, r19
   3ed88:	09 f0       	breq	.+2      	; 0x3ed8c <main+0x83c>
   3ed8a:	b8 cf       	rjmp	.-144    	; 0x3ecfc <main+0x7ac>
   3ed8c:	c5 01       	movw	r24, r10
   3ed8e:	b4 01       	movw	r22, r8
   3ed90:	4e e0       	ldi	r20, 0x0E	; 14
   3ed92:	52 e0       	ldi	r21, 0x02	; 2
   3ed94:	be db       	rcall	.-2180   	; 0x3e512 <flash_write>
   3ed96:	80 e0       	ldi	r24, 0x00	; 0
						LED1_LOW();
   3ed98:	91 e0       	ldi	r25, 0x01	; 1
						LED2_HIGH();
   3ed9a:	a0 e0       	ldi	r26, 0x00	; 0
						LED3_LOW();
   3ed9c:	b0 e0       	ldi	r27, 0x00	; 0
   3ed9e:	88 0e       	add	r8, r24
					}else if( ((address +1) %1200) <= 1100  && ((address +1) %1200) >= 8){
   3eda0:	99 1e       	adc	r9, r25
   3eda2:	aa 1e       	adc	r10, r26
   3eda4:	bb 1e       	adc	r11, r27
   3eda6:	90 e0       	ldi	r25, 0x00	; 0
   3eda8:	89 16       	cp	r8, r25
   3edaa:	90 ee       	ldi	r25, 0xE0	; 224
   3edac:	99 06       	cpc	r9, r25
   3edae:	93 e0       	ldi	r25, 0x03	; 3
   3edb0:	a9 06       	cpc	r10, r25
   3edb2:	90 e0       	ldi	r25, 0x00	; 0
   3edb4:	b9 06       	cpc	r11, r25
						LED1_LOW();
   3edb6:	09 f0       	breq	.+2      	; 0x3edba <main+0x86a>
						LED2_LOW();
   3edb8:	85 cf       	rjmp	.-246    	; 0x3ecc4 <main+0x774>
						LED3_HIGH();
   3edba:	84 e6       	ldi	r24, 0x64	; 100
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
		//		PROGLED_PORT ^= (1 << PROGLED_PIN); // turn LED ON
				delay_ms(50);
				flash_erase(fa); /* Erase a page */
				memset(Buff, 0xFF, SPM_PAGESIZE); /* Clear buffer */
				for (int i = 0; i < SPM_PAGESIZE; i++) {
   3edbc:	c1 d9       	rcall	.-3198   	; 0x3e140 <sendchar>
   3edbe:	8d e0       	ldi	r24, 0x0D	; 13
   3edc0:	bf d9       	rcall	.-3202   	; 0x3e140 <sendchar>
   3edc2:	8a e0       	ldi	r24, 0x0A	; 10
   3edc4:	bd d9       	rcall	.-3206   	; 0x3e140 <sendchar>
   3edc6:	10 92 00 02 	sts	0x0200, r1
						LED1_LOW();
						LED2_LOW();
						LED3_HIGH();
					}
				}
				flash_write(fa, Buff); /* Write it if the data is available */
   3edca:	8f ef       	ldi	r24, 0xFF	; 255
   3edcc:	9f e0       	ldi	r25, 0x0F	; 15
   3edce:	60 e0       	ldi	r22, 0x00	; 0
   3edd0:	89 d0       	rcall	.+274    	; 0x3eee4 <__eewr_byte_m2560>
   3edd2:	00 00       	nop
   3edd4:	80 91 c0 00 	lds	r24, 0x00C0

			DWORD fa; /* Flash address */
			sendchar(0x0d);
			sendchar(0x0a);
			long address = 16;
			for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) { /* Update all application pages */
   3edd8:	8d 7f       	andi	r24, 0xFD	; 253
   3edda:	80 93 c0 00 	sts	0x00C0, r24
   3edde:	81 e1       	ldi	r24, 0x11	; 17
   3ede0:	80 93 57 00 	sts	0x0057, r24
   3ede4:	e8 95       	spm
   3ede6:	ee 27       	eor	r30, r30
   3ede8:	ff 27       	eor	r31, r31
   3edea:	09 94       	ijmp
   3edec:	ff cf       	rjmp	.-2      	; 0x3edec <main+0x89c>
   3edee:	3b e1       	ldi	r19, 0x1B	; 27
   3edf0:	e3 2e       	mov	r14, r19
   3edf2:	21 e0       	ldi	r18, 0x01	; 1
   3edf4:	13 cc       	rjmp	.-2010   	; 0x3e61c <main+0xcc>
   3edf6:	20 e0       	ldi	r18, 0x00	; 0
   3edf8:	11 cc       	rjmp	.-2014   	; 0x3e61c <main+0xcc>
						LED3_HIGH();
					}
				}
				flash_write(fa, Buff); /* Write it if the data is available */
			}
			sendchar('d');
   3edfa:	26 e0       	ldi	r18, 0x06	; 6
   3edfc:	0f cc       	rjmp	.-2018   	; 0x3e61c <main+0xcc>

0003edfe <__divmodhi4>:
   3edfe:	97 fb       	bst	r25, 7
   3ee00:	09 2e       	mov	r0, r25
   3ee02:	07 26       	eor	r0, r23
   3ee04:	0a d0       	rcall	.+20     	; 0x3ee1a <__divmodhi4_neg1>
   3ee06:	77 fd       	sbrc	r23, 7
   3ee08:	04 d0       	rcall	.+8      	; 0x3ee12 <__divmodhi4_neg2>
   3ee0a:	27 d0       	rcall	.+78     	; 0x3ee5a <__udivmodhi4>
   3ee0c:	06 d0       	rcall	.+12     	; 0x3ee1a <__divmodhi4_neg1>
   3ee0e:	00 20       	and	r0, r0
   3ee10:	1a f4       	brpl	.+6      	; 0x3ee18 <__divmodhi4_exit>

0003ee12 <__divmodhi4_neg2>:
   3ee12:	70 95       	com	r23
   3ee14:	61 95       	neg	r22
   3ee16:	7f 4f       	sbci	r23, 0xFF	; 255

0003ee18 <__divmodhi4_exit>:
   3ee18:	08 95       	ret

0003ee1a <__divmodhi4_neg1>:
   3ee1a:	f6 f7       	brtc	.-4      	; 0x3ee18 <__divmodhi4_exit>
   3ee1c:	90 95       	com	r25
   3ee1e:	81 95       	neg	r24
   3ee20:	9f 4f       	sbci	r25, 0xFF	; 255
   3ee22:	08 95       	ret

0003ee24 <__divmodsi4>:
   3ee24:	97 fb       	bst	r25, 7
   3ee26:	09 2e       	mov	r0, r25
   3ee28:	05 26       	eor	r0, r21
   3ee2a:	0e d0       	rcall	.+28     	; 0x3ee48 <__divmodsi4_neg1>
   3ee2c:	57 fd       	sbrc	r21, 7
   3ee2e:	04 d0       	rcall	.+8      	; 0x3ee38 <__divmodsi4_neg2>
   3ee30:	28 d0       	rcall	.+80     	; 0x3ee82 <__udivmodsi4>
   3ee32:	0a d0       	rcall	.+20     	; 0x3ee48 <__divmodsi4_neg1>
   3ee34:	00 1c       	adc	r0, r0
   3ee36:	38 f4       	brcc	.+14     	; 0x3ee46 <__divmodsi4_exit>

0003ee38 <__divmodsi4_neg2>:
   3ee38:	50 95       	com	r21
   3ee3a:	40 95       	com	r20
   3ee3c:	30 95       	com	r19
   3ee3e:	21 95       	neg	r18
   3ee40:	3f 4f       	sbci	r19, 0xFF	; 255
   3ee42:	4f 4f       	sbci	r20, 0xFF	; 255
   3ee44:	5f 4f       	sbci	r21, 0xFF	; 255

0003ee46 <__divmodsi4_exit>:
   3ee46:	08 95       	ret

0003ee48 <__divmodsi4_neg1>:
   3ee48:	f6 f7       	brtc	.-4      	; 0x3ee46 <__divmodsi4_exit>
   3ee4a:	90 95       	com	r25
   3ee4c:	80 95       	com	r24
   3ee4e:	70 95       	com	r23
   3ee50:	61 95       	neg	r22
   3ee52:	7f 4f       	sbci	r23, 0xFF	; 255
   3ee54:	8f 4f       	sbci	r24, 0xFF	; 255
   3ee56:	9f 4f       	sbci	r25, 0xFF	; 255
   3ee58:	08 95       	ret

0003ee5a <__udivmodhi4>:
   3ee5a:	aa 1b       	sub	r26, r26
   3ee5c:	bb 1b       	sub	r27, r27
   3ee5e:	51 e1       	ldi	r21, 0x11	; 17
   3ee60:	07 c0       	rjmp	.+14     	; 0x3ee70 <__udivmodhi4_ep>

0003ee62 <__udivmodhi4_loop>:
   3ee62:	aa 1f       	adc	r26, r26
   3ee64:	bb 1f       	adc	r27, r27
   3ee66:	a6 17       	cp	r26, r22
   3ee68:	b7 07       	cpc	r27, r23
   3ee6a:	10 f0       	brcs	.+4      	; 0x3ee70 <__udivmodhi4_ep>
   3ee6c:	a6 1b       	sub	r26, r22
   3ee6e:	b7 0b       	sbc	r27, r23

0003ee70 <__udivmodhi4_ep>:
   3ee70:	88 1f       	adc	r24, r24
   3ee72:	99 1f       	adc	r25, r25
   3ee74:	5a 95       	dec	r21
   3ee76:	a9 f7       	brne	.-22     	; 0x3ee62 <__udivmodhi4_loop>
   3ee78:	80 95       	com	r24
   3ee7a:	90 95       	com	r25
   3ee7c:	bc 01       	movw	r22, r24
   3ee7e:	cd 01       	movw	r24, r26
   3ee80:	08 95       	ret

0003ee82 <__udivmodsi4>:
   3ee82:	a1 e2       	ldi	r26, 0x21	; 33
   3ee84:	1a 2e       	mov	r1, r26
   3ee86:	aa 1b       	sub	r26, r26
   3ee88:	bb 1b       	sub	r27, r27
   3ee8a:	fd 01       	movw	r30, r26
   3ee8c:	0d c0       	rjmp	.+26     	; 0x3eea8 <__udivmodsi4_ep>

0003ee8e <__udivmodsi4_loop>:
   3ee8e:	aa 1f       	adc	r26, r26
   3ee90:	bb 1f       	adc	r27, r27
   3ee92:	ee 1f       	adc	r30, r30
   3ee94:	ff 1f       	adc	r31, r31
   3ee96:	a2 17       	cp	r26, r18
   3ee98:	b3 07       	cpc	r27, r19
   3ee9a:	e4 07       	cpc	r30, r20
   3ee9c:	f5 07       	cpc	r31, r21
   3ee9e:	20 f0       	brcs	.+8      	; 0x3eea8 <__udivmodsi4_ep>
   3eea0:	a2 1b       	sub	r26, r18
   3eea2:	b3 0b       	sbc	r27, r19
   3eea4:	e4 0b       	sbc	r30, r20
   3eea6:	f5 0b       	sbc	r31, r21

0003eea8 <__udivmodsi4_ep>:
   3eea8:	66 1f       	adc	r22, r22
   3eeaa:	77 1f       	adc	r23, r23
   3eeac:	88 1f       	adc	r24, r24
   3eeae:	99 1f       	adc	r25, r25
   3eeb0:	1a 94       	dec	r1
   3eeb2:	69 f7       	brne	.-38     	; 0x3ee8e <__udivmodsi4_loop>
   3eeb4:	60 95       	com	r22
   3eeb6:	70 95       	com	r23
   3eeb8:	80 95       	com	r24
   3eeba:	90 95       	com	r25
   3eebc:	9b 01       	movw	r18, r22
   3eebe:	ac 01       	movw	r20, r24
   3eec0:	bd 01       	movw	r22, r26
   3eec2:	cf 01       	movw	r24, r30
   3eec4:	08 95       	ret

0003eec6 <memset>:
   3eec6:	dc 01       	movw	r26, r24
   3eec8:	01 c0       	rjmp	.+2      	; 0x3eecc <memset+0x6>
   3eeca:	6d 93       	st	X+, r22
   3eecc:	41 50       	subi	r20, 0x01	; 1
   3eece:	50 40       	sbci	r21, 0x00	; 0
   3eed0:	e0 f7       	brcc	.-8      	; 0x3eeca <memset+0x4>
   3eed2:	08 95       	ret

0003eed4 <__eerd_byte_m2560>:
   3eed4:	f9 99       	sbic	0x1f, 1	; 31
   3eed6:	fe cf       	rjmp	.-4      	; 0x3eed4 <__eerd_byte_m2560>
   3eed8:	92 bd       	out	0x22, r25	; 34
   3eeda:	81 bd       	out	0x21, r24	; 33
   3eedc:	f8 9a       	sbi	0x1f, 0	; 31
   3eede:	99 27       	eor	r25, r25
   3eee0:	80 b5       	in	r24, 0x20	; 32
   3eee2:	08 95       	ret

0003eee4 <__eewr_byte_m2560>:
   3eee4:	26 2f       	mov	r18, r22

0003eee6 <__eewr_r18_m2560>:
   3eee6:	f9 99       	sbic	0x1f, 1	; 31
   3eee8:	fe cf       	rjmp	.-4      	; 0x3eee6 <__eewr_r18_m2560>
   3eeea:	1f ba       	out	0x1f, r1	; 31
   3eeec:	92 bd       	out	0x22, r25	; 34
   3eeee:	81 bd       	out	0x21, r24	; 33
   3eef0:	20 bd       	out	0x20, r18	; 32
   3eef2:	0f b6       	in	r0, 0x3f	; 63
   3eef4:	f8 94       	cli
   3eef6:	fa 9a       	sbi	0x1f, 2	; 31
   3eef8:	f9 9a       	sbi	0x1f, 1	; 31
   3eefa:	0f be       	out	0x3f, r0	; 63
   3eefc:	01 96       	adiw	r24, 0x01	; 1
   3eefe:	08 95       	ret

0003ef00 <_exit>:
   3ef00:	f8 94       	cli

0003ef02 <__stop_program>:
   3ef02:	ff cf       	rjmp	.-2      	; 0x3ef02 <__stop_program>
