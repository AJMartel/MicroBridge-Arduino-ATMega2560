   1               		.file	"mmc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	send_cmd:
  13               	.LFB0:
  14               		.file 1 "mmc.c"
   1:mmc.c         **** /*-----------------------------------------------------------------------/
   2:mmc.c         **** /  PFF - Generic low level disk control module            (C)ChaN, 2010
   3:mmc.c         **** /------------------------------------------------------------------------/
   4:mmc.c         **** /
   5:mmc.c         **** /  Copyright (C) 2010, ChaN, all right reserved.
   6:mmc.c         **** /
   7:mmc.c         **** / * This software is a free software and there is NO WARRANTY.
   8:mmc.c         **** / * No restriction on use. You can use, modify and redistribute it for
   9:mmc.c         **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  10:mmc.c         **** / * Redistributions of source code must retain the above copyright notice.
  11:mmc.c         **** /
  12:mmc.c         **** /------------------------------------------------------------------------/
  13:mmc.c         **** / Dec 6, 2010  First release
  14:mmc.c         **** */
  15:mmc.c         **** 
  16:mmc.c         **** #include "pff.h"
  17:mmc.c         **** #include "diskio.h"
  18:mmc.c         **** #include <avr/io.h>
  19:mmc.c         **** 
  20:mmc.c         **** void init_spi (void);		/* Initialize SPI port (asmfunc.S) */
  21:mmc.c         **** void deselect (void);		/* Select MMC (asmfunc.S) */
  22:mmc.c         **** void select (void);			/* Deselect MMC (asmfunc.S) */
  23:mmc.c         **** void xmit_spi (BYTE d);		/* Send a byte to the MMC (asmfunc.S) */
  24:mmc.c         **** BYTE rcv_spi (void);		/* Send a 0xFF to the MMC and get the received byte (asmfunc.S) */
  25:mmc.c         **** void dly_100us (void);		/* Delay 100 microseconds (asmfunc.S) */
  26:mmc.c         **** 
  27:mmc.c         **** 
  28:mmc.c         **** 
  29:mmc.c         **** /*--------------------------------------------------------------------------
  30:mmc.c         **** 
  31:mmc.c         ****    Module Private Functions
  32:mmc.c         **** 
  33:mmc.c         **** ---------------------------------------------------------------------------*/
  34:mmc.c         **** 
  35:mmc.c         **** /* Definitions for MMC/SDC command */
  36:mmc.c         **** #define CMD0	(0x40+0)	/* GO_IDLE_STATE */
  37:mmc.c         **** #define CMD1	(0x40+1)	/* SEND_OP_COND (MMC) */
  38:mmc.c         **** #define	ACMD41	(0xC0+41)	/* SEND_OP_COND (SDC) */
  39:mmc.c         **** #define CMD8	(0x40+8)	/* SEND_IF_COND */
  40:mmc.c         **** #define CMD16	(0x40+16)	/* SET_BLOCKLEN */
  41:mmc.c         **** #define CMD17	(0x40+17)	/* READ_SINGLE_BLOCK */
  42:mmc.c         **** #define CMD24	(0x40+24)	/* WRITE_BLOCK */
  43:mmc.c         **** #define CMD55	(0x40+55)	/* APP_CMD */
  44:mmc.c         **** #define CMD58	(0x40+58)	/* READ_OCR */
  45:mmc.c         **** 
  46:mmc.c         **** 
  47:mmc.c         **** /* Card type flags (CardType) */
  48:mmc.c         **** #define CT_MMC				0x01	/* MMC ver 3 */
  49:mmc.c         **** #define CT_SD1				0x02	/* SD ver 1 */
  50:mmc.c         **** #define CT_SD2				0x04	/* SD ver 2 */
  51:mmc.c         **** #define CT_BLOCK			0x08	/* Block addressing */
  52:mmc.c         **** 
  53:mmc.c         **** 
  54:mmc.c         **** static
  55:mmc.c         **** BYTE CardType;
  56:mmc.c         **** 
  57:mmc.c         **** 
  58:mmc.c         **** /*-----------------------------------------------------------------------*/
  59:mmc.c         **** /* Send a command packet to MMC                                          */
  60:mmc.c         **** /*-----------------------------------------------------------------------*/
  61:mmc.c         **** 
  62:mmc.c         **** static
  63:mmc.c         **** BYTE send_cmd (
  64:mmc.c         **** 	BYTE cmd,		/* 1st byte (Start + Index) */
  65:mmc.c         **** 	DWORD arg		/* Argument (32 bits) */
  66:mmc.c         **** )
  67:mmc.c         **** {
  15               		.loc 1 67 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 FF92      		push r15
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 4
  21               		.cfi_offset 15, -3
  22 0002 0F93      		push r16
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 5
  25               		.cfi_offset 16, -4
  26 0004 1F93      		push r17
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 6
  29               		.cfi_offset 17, -5
  30 0006 CF93      		push r28
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 7
  33               		.cfi_offset 28, -6
  34 0008 DF93      		push r29
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 8
  37               		.cfi_offset 29, -7
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 5 */
  41               	.L__stack_usage = 5
  42 000a C82F      		mov r28,r24
  43 000c D42F      		mov r29,r20
  44 000e 152F      		mov r17,r21
  45 0010 062F      		mov r16,r22
  46 0012 F72E      		mov r15,r23
  68:mmc.c         **** 	BYTE n, res;
  69:mmc.c         **** 
  70:mmc.c         **** 
  71:mmc.c         **** 	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
  47               		.loc 1 71 0
  48 0014 87FF      		sbrs r24,7
  49 0016 00C0      		rjmp .L2
  50               	.LVL1:
  72:mmc.c         **** 		cmd &= 0x7F;
  73:mmc.c         **** 		res = send_cmd(CMD55, 0);
  51               		.loc 1 73 0
  52 0018 40E0      		ldi r20,0
  53 001a 50E0      		ldi r21,0
  54 001c BA01      		movw r22,r20
  55               	.LVL2:
  56 001e 87E7      		ldi r24,lo8(119)
  57               	.LVL3:
  58 0020 0E94 0000 		call send_cmd
  59               	.LVL4:
  74:mmc.c         **** 		if (res > 1) return res;
  60               		.loc 1 74 0
  61 0024 8230      		cpi r24,lo8(2)
  62 0026 00F4      		brsh .L3
  72:mmc.c         **** 		cmd &= 0x7F;
  63               		.loc 1 72 0
  64 0028 CF77      		andi r28,lo8(127)
  65               	.LVL5:
  66               	.L2:
  75:mmc.c         **** 	}
  76:mmc.c         **** 
  77:mmc.c         **** 	/* Select the card */
  78:mmc.c         **** 	select();
  67               		.loc 1 78 0
  68 002a 0E94 0000 		call select
  69               	.LVL6:
  79:mmc.c         **** 
  80:mmc.c         **** 	/* Send a command packet */
  81:mmc.c         **** 	xmit_spi(cmd);						/* Start + Command index */
  70               		.loc 1 81 0
  71 002e 8C2F      		mov r24,r28
  72 0030 0E94 0000 		call xmit_spi
  73               	.LVL7:
  82:mmc.c         **** 	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
  74               		.loc 1 82 0
  75 0034 8F2D      		mov r24,r15
  76 0036 0E94 0000 		call xmit_spi
  77               	.LVL8:
  83:mmc.c         **** 	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
  78               		.loc 1 83 0
  79 003a 802F      		mov r24,r16
  80 003c 0E94 0000 		call xmit_spi
  81               	.LVL9:
  84:mmc.c         **** 	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
  82               		.loc 1 84 0
  83 0040 812F      		mov r24,r17
  84 0042 0E94 0000 		call xmit_spi
  85               	.LVL10:
  85:mmc.c         **** 	xmit_spi((BYTE)arg);				/* Argument[7..0] */
  86               		.loc 1 85 0
  87 0046 8D2F      		mov r24,r29
  88 0048 0E94 0000 		call xmit_spi
  89               	.LVL11:
  86:mmc.c         **** 	n = 0x01;							/* Dummy CRC + Stop */
  87:mmc.c         **** 	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
  90               		.loc 1 87 0
  91 004c C034      		cpi r28,lo8(64)
  92 004e 01F0      		breq .L7
  88:mmc.c         **** 	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
  93               		.loc 1 88 0
  94 0050 C834      		cpi r28,lo8(72)
  95 0052 01F0      		breq .L8
  86:mmc.c         **** 	n = 0x01;							/* Dummy CRC + Stop */
  96               		.loc 1 86 0
  97 0054 81E0      		ldi r24,lo8(1)
  98 0056 00C0      		rjmp .L4
  99               	.L7:
  87:mmc.c         **** 	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 100               		.loc 1 87 0
 101 0058 85E9      		ldi r24,lo8(-107)
 102 005a 00C0      		rjmp .L4
 103               	.L8:
 104               		.loc 1 88 0
 105 005c 87E8      		ldi r24,lo8(-121)
 106               	.L4:
 107               	.LVL12:
  89:mmc.c         **** 	xmit_spi(n);
 108               		.loc 1 89 0
 109 005e 0E94 0000 		call xmit_spi
 110               	.LVL13:
 111 0062 CAE0      		ldi r28,lo8(10)
 112               	.LVL14:
 113               	.L5:
  90:mmc.c         **** 
  91:mmc.c         **** 	/* Receive a command response */
  92:mmc.c         **** 	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
  93:mmc.c         **** 	do {
  94:mmc.c         **** 		res = rcv_spi();
 114               		.loc 1 94 0 discriminator 1
 115 0064 0E94 0000 		call rcv_spi
 116               	.LVL15:
  95:mmc.c         **** 	} while ((res & 0x80) && --n);
 117               		.loc 1 95 0 discriminator 1
 118 0068 87FF      		sbrs r24,7
 119 006a 00C0      		rjmp .L3
 120               	.LVL16:
 121 006c C150      		subi r28,lo8(-(-1))
 122               	.LVL17:
 123 006e 01F4      		brne .L5
 124               	.LVL18:
 125               	.L3:
 126               	/* epilogue start */
  96:mmc.c         **** 
  97:mmc.c         **** 	return res;			/* Return with the response value */
  98:mmc.c         **** }
 127               		.loc 1 98 0
 128 0070 DF91      		pop r29
 129 0072 CF91      		pop r28
 130 0074 1F91      		pop r17
 131 0076 0F91      		pop r16
 132 0078 FF90      		pop r15
 133 007a 0895      		ret
 134               		.cfi_endproc
 135               	.LFE0:
 137               	.global	disk_initialize
 139               	disk_initialize:
 140               	.LFB1:
  99:mmc.c         **** 
 100:mmc.c         **** 
 101:mmc.c         **** 
 102:mmc.c         **** 
 103:mmc.c         **** /*--------------------------------------------------------------------------
 104:mmc.c         **** 
 105:mmc.c         ****    Public Functions
 106:mmc.c         **** 
 107:mmc.c         **** ---------------------------------------------------------------------------*/
 108:mmc.c         **** 
 109:mmc.c         **** /*-----------------------------------------------------------------------*/
 110:mmc.c         **** /* Initialize Disk Drive                                                 */
 111:mmc.c         **** /*-----------------------------------------------------------------------*/
 112:mmc.c         **** 
 113:mmc.c         **** DSTATUS disk_initialize (void)
 114:mmc.c         **** {
 141               		.loc 1 114 0
 142               		.cfi_startproc
 143 007c EF92      		push r14
 144               	.LCFI5:
 145               		.cfi_def_cfa_offset 4
 146               		.cfi_offset 14, -3
 147 007e FF92      		push r15
 148               	.LCFI6:
 149               		.cfi_def_cfa_offset 5
 150               		.cfi_offset 15, -4
 151 0080 0F93      		push r16
 152               	.LCFI7:
 153               		.cfi_def_cfa_offset 6
 154               		.cfi_offset 16, -5
 155 0082 1F93      		push r17
 156               	.LCFI8:
 157               		.cfi_def_cfa_offset 7
 158               		.cfi_offset 17, -6
 159 0084 CF93      		push r28
 160               	.LCFI9:
 161               		.cfi_def_cfa_offset 8
 162               		.cfi_offset 28, -7
 163 0086 DF93      		push r29
 164               	.LCFI10:
 165               		.cfi_def_cfa_offset 9
 166               		.cfi_offset 29, -8
 167 0088 00D0      		rcall .
 168 008a 1F92      		push __zero_reg__
 169               	.LCFI11:
 170               		.cfi_def_cfa_offset 13
 171 008c CDB7      		in r28,__SP_L__
 172 008e DEB7      		in r29,__SP_H__
 173               	.LCFI12:
 174               		.cfi_def_cfa_register 28
 175               	/* prologue: function */
 176               	/* frame size = 4 */
 177               	/* stack size = 10 */
 178               	.L__stack_usage = 10
 115:mmc.c         **** 	BYTE n, cmd, ty, ocr[4];
 116:mmc.c         **** 	UINT tmr;
 117:mmc.c         **** 
 118:mmc.c         **** 	init_spi();							/* Initialize ports to control MMC */
 179               		.loc 1 118 0
 180 0090 0E94 0000 		call init_spi
 181               	.LVL19:
 182 0094 14E6      		ldi r17,lo8(100)
 183               	.LVL20:
 184               	.L14:
 119:mmc.c         **** 	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
 185               		.loc 1 119 0 discriminator 2
 186 0096 0E94 0000 		call dly_100us
 187               	.LVL21:
 188 009a 1150      		subi r17,lo8(-(-1))
 189               	.LVL22:
 190 009c 01F4      		brne .L14
 191               		.loc 1 119 0 is_stmt 0
 192 009e 1AE0      		ldi r17,lo8(10)
 193               	.LVL23:
 194               	.L16:
 120:mmc.c         **** 	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
 195               		.loc 1 120 0 is_stmt 1 discriminator 2
 196 00a0 0E94 0000 		call deselect
 197               	.LVL24:
 198 00a4 1150      		subi r17,lo8(-(-1))
 199               	.LVL25:
 200 00a6 01F4      		brne .L16
 201               	.LVL26:
 121:mmc.c         **** 
 122:mmc.c         **** 	ty = 0;
 123:mmc.c         **** 	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 202               		.loc 1 123 0
 203 00a8 40E0      		ldi r20,0
 204 00aa 50E0      		ldi r21,0
 205 00ac BA01      		movw r22,r20
 206 00ae 80E4      		ldi r24,lo8(64)
 207 00b0 0E94 0000 		call send_cmd
 208               	.LVL27:
 209 00b4 8130      		cpi r24,lo8(1)
 210 00b6 01F0      		breq .+2
 211 00b8 00C0      		rjmp .L35
 124:mmc.c         **** 		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
 212               		.loc 1 124 0
 213 00ba 4AEA      		ldi r20,lo8(-86)
 214 00bc 51E0      		ldi r21,lo8(1)
 215 00be 60E0      		ldi r22,0
 216 00c0 70E0      		ldi r23,0
 217 00c2 88E4      		ldi r24,lo8(72)
 218 00c4 0E94 0000 		call send_cmd
 219               	.LVL28:
 220 00c8 8130      		cpi r24,lo8(1)
 221 00ca 01F4      		brne .L19
 222 00cc 7E01      		movw r14,r28
 223 00ce 85E0      		ldi r24,5
 224 00d0 E80E      		add r14,r24
 225 00d2 F11C      		adc r15,__zero_reg__
 226 00d4 8E01      		movw r16,r28
 227 00d6 0F5F      		subi r16,-1
 228 00d8 1F4F      		sbci r17,-1
 229               	.LVL29:
 230               	.L21:
 125:mmc.c         **** 			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
 231               		.loc 1 125 0 discriminator 2
 232 00da 0E94 0000 		call rcv_spi
 233               	.LVL30:
 234 00de F801      		movw r30,r16
 235 00e0 8193      		st Z+,r24
 236 00e2 8F01      		movw r16,r30
 237 00e4 EE15      		cp r30,r14
 238 00e6 FF05      		cpc r31,r15
 239 00e8 01F4      		brne .L21
 126:mmc.c         **** 			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
 240               		.loc 1 126 0
 241 00ea 8B81      		ldd r24,Y+3
 242 00ec 8130      		cpi r24,lo8(1)
 243 00ee 01F0      		breq .+2
 244 00f0 00C0      		rjmp .L35
 245               		.loc 1 126 0 is_stmt 0 discriminator 1
 246 00f2 8C81      		ldd r24,Y+4
 247 00f4 8A3A      		cpi r24,lo8(-86)
 248 00f6 01F0      		breq .+2
 249 00f8 00C0      		rjmp .L35
 250               		.loc 1 126 0
 251 00fa 00E1      		ldi r16,lo8(16)
 252 00fc 17E2      		ldi r17,lo8(39)
 253               	.L23:
 254               	.LVL31:
 127:mmc.c         **** 				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving i
 255               		.loc 1 127 0 is_stmt 1 discriminator 2
 256 00fe 40E0      		ldi r20,0
 257 0100 50E0      		ldi r21,0
 258 0102 60E0      		ldi r22,0
 259 0104 70E4      		ldi r23,lo8(64)
 260 0106 89EE      		ldi r24,lo8(-23)
 261 0108 0E94 0000 		call send_cmd
 262               	.LVL32:
 263 010c 8823      		tst r24
 264 010e 01F0      		breq .L48
 265               		.loc 1 127 0 is_stmt 0 discriminator 1
 266 0110 0E94 0000 		call dly_100us
 267               	.LVL33:
 268 0114 0150      		subi r16,1
 269 0116 1109      		sbc r17,__zero_reg__
 270               	.LVL34:
 271 0118 01F4      		brne .L23
 272 011a 00C0      		rjmp .L35
 273               	.LVL35:
 274               	.L19:
 128:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 129:mmc.c         **** 					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 130:mmc.c         **** 					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 131:mmc.c         **** 				}
 132:mmc.c         **** 			}
 133:mmc.c         **** 		} else {							/* SDv1 or MMCv3 */
 134:mmc.c         **** 			if (send_cmd(ACMD41, 0) <= 1) 	{
 275               		.loc 1 134 0 is_stmt 1
 276 011c 40E0      		ldi r20,0
 277 011e 50E0      		ldi r21,0
 278 0120 BA01      		movw r22,r20
 279 0122 89EE      		ldi r24,lo8(-23)
 280 0124 0E94 0000 		call send_cmd
 281               	.LVL36:
 282 0128 8230      		cpi r24,lo8(2)
 283 012a 00F4      		brsh .L34
 135:mmc.c         **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 284               		.loc 1 135 0
 285 012c 22E0      		ldi r18,lo8(2)
 286 012e F22E      		mov r15,r18
 287 0130 39EE      		ldi r19,lo8(-23)
 288 0132 E32E      		mov r14,r19
 289 0134 00C0      		rjmp .L27
 290               	.L34:
 136:mmc.c         **** 			} else {
 137:mmc.c         **** 				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 291               		.loc 1 137 0
 292 0136 FF24      		clr r15
 293 0138 F394      		inc r15
 294 013a 91E4      		ldi r25,lo8(65)
 295 013c E92E      		mov r14,r25
 296               	.L27:
 297               	.LVL37:
 298 013e 00E1      		ldi r16,lo8(16)
 299 0140 17E2      		ldi r17,lo8(39)
 300               	.LVL38:
 301               	.L28:
 138:mmc.c         **** 			}
 139:mmc.c         **** 			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
 302               		.loc 1 139 0 discriminator 2
 303 0142 40E0      		ldi r20,0
 304 0144 50E0      		ldi r21,0
 305 0146 BA01      		movw r22,r20
 306 0148 8E2D      		mov r24,r14
 307 014a 0E94 0000 		call send_cmd
 308               	.LVL39:
 309 014e 8823      		tst r24
 310 0150 01F0      		breq .L49
 311               		.loc 1 139 0 is_stmt 0 discriminator 1
 312 0152 0E94 0000 		call dly_100us
 313               	.LVL40:
 314 0156 0150      		subi r16,1
 315 0158 1109      		sbc r17,__zero_reg__
 316               	.LVL41:
 317 015a 01F4      		brne .L28
 318 015c 00C0      		rjmp .L35
 319               	.L49:
 140:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 320               		.loc 1 140 0 is_stmt 1
 321 015e 40E0      		ldi r20,0
 322 0160 52E0      		ldi r21,lo8(2)
 323 0162 60E0      		ldi r22,0
 324 0164 70E0      		ldi r23,0
 325 0166 80E5      		ldi r24,lo8(80)
 326 0168 0E94 0000 		call send_cmd
 327               	.LVL42:
 328 016c 8111      		cpse r24,__zero_reg__
 329               	.LVL43:
 330               	.L35:
 141:mmc.c         **** 				ty = 0;
 331               		.loc 1 141 0
 332 016e F12C      		mov r15,__zero_reg__
 333               	.L18:
 334               	.LVL44:
 142:mmc.c         **** 		}
 143:mmc.c         **** 	}
 144:mmc.c         **** 	CardType = ty;
 335               		.loc 1 144 0
 336 0170 F092 0000 		sts CardType,r15
 145:mmc.c         **** 	deselect();
 337               		.loc 1 145 0
 338 0174 0E94 0000 		call deselect
 339               	.LVL45:
 146:mmc.c         **** 
 147:mmc.c         **** 	return ty ? 0 : STA_NOINIT;
 340               		.loc 1 147 0
 341 0178 81E0      		ldi r24,lo8(1)
 342 017a FF20      		tst r15
 343 017c 01F0      		breq .L39
 344 017e 80E0      		ldi r24,0
 345 0180 00C0      		rjmp .L39
 346               	.LVL46:
 347               	.L48:
 128:mmc.c         **** 					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 348               		.loc 1 128 0
 349 0182 40E0      		ldi r20,0
 350 0184 50E0      		ldi r21,0
 351 0186 BA01      		movw r22,r20
 352 0188 8AE7      		ldi r24,lo8(122)
 353 018a 0E94 0000 		call send_cmd
 354               	.LVL47:
 355 018e 8111      		cpse r24,__zero_reg__
 356 0190 00C0      		rjmp .L35
 357 0192 8E01      		movw r16,r28
 358               	.LVL48:
 359 0194 0F5F      		subi r16,-1
 360 0196 1F4F      		sbci r17,-1
 361               	.L32:
 129:mmc.c         **** 					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 362               		.loc 1 129 0 discriminator 2
 363 0198 0E94 0000 		call rcv_spi
 364               	.LVL49:
 365 019c F801      		movw r30,r16
 366 019e 8193      		st Z+,r24
 367 01a0 8F01      		movw r16,r30
 368 01a2 EE15      		cp r30,r14
 369 01a4 FF05      		cpc r31,r15
 370 01a6 01F4      		brne .L32
 130:mmc.c         **** 				}
 371               		.loc 1 130 0
 372 01a8 8981      		ldd r24,Y+1
 373 01aa 86FF      		sbrs r24,6
 374 01ac 00C0      		rjmp .L33
 375 01ae 4CE0      		ldi r20,lo8(12)
 376 01b0 F42E      		mov r15,r20
 377 01b2 00C0      		rjmp .L18
 378               	.L33:
 379 01b4 84E0      		ldi r24,lo8(4)
 380 01b6 F82E      		mov r15,r24
 381 01b8 00C0      		rjmp .L18
 382               	.LVL50:
 383               	.L39:
 384               	/* epilogue start */
 148:mmc.c         **** }
 385               		.loc 1 148 0
 386 01ba 0F90      		pop __tmp_reg__
 387 01bc 0F90      		pop __tmp_reg__
 388 01be 0F90      		pop __tmp_reg__
 389 01c0 0F90      		pop __tmp_reg__
 390 01c2 DF91      		pop r29
 391 01c4 CF91      		pop r28
 392 01c6 1F91      		pop r17
 393 01c8 0F91      		pop r16
 394 01ca FF90      		pop r15
 395               	.LVL51:
 396 01cc EF90      		pop r14
 397 01ce 0895      		ret
 398               		.cfi_endproc
 399               	.LFE1:
 401               	.global	disk_readp
 403               	disk_readp:
 404               	.LFB2:
 149:mmc.c         **** 
 150:mmc.c         **** 
 151:mmc.c         **** 
 152:mmc.c         **** /*-----------------------------------------------------------------------*/
 153:mmc.c         **** /* Read partial sector                                                   */
 154:mmc.c         **** /*-----------------------------------------------------------------------*/
 155:mmc.c         **** 
 156:mmc.c         **** DRESULT disk_readp (
 157:mmc.c         **** 	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
 158:mmc.c         **** 	DWORD lba,		/* Sector number (LBA) */
 159:mmc.c         **** 	WORD ofs,		/* Byte offset to read from (0..511) */
 160:mmc.c         **** 	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
 161:mmc.c         **** )
 162:mmc.c         **** {
 405               		.loc 1 162 0
 406               		.cfi_startproc
 407               	.LVL52:
 408 01d0 AF92      		push r10
 409               	.LCFI13:
 410               		.cfi_def_cfa_offset 4
 411               		.cfi_offset 10, -3
 412 01d2 BF92      		push r11
 413               	.LCFI14:
 414               		.cfi_def_cfa_offset 5
 415               		.cfi_offset 11, -4
 416 01d4 CF92      		push r12
 417               	.LCFI15:
 418               		.cfi_def_cfa_offset 6
 419               		.cfi_offset 12, -5
 420 01d6 DF92      		push r13
 421               	.LCFI16:
 422               		.cfi_def_cfa_offset 7
 423               		.cfi_offset 13, -6
 424 01d8 EF92      		push r14
 425               	.LCFI17:
 426               		.cfi_def_cfa_offset 8
 427               		.cfi_offset 14, -7
 428 01da FF92      		push r15
 429               	.LCFI18:
 430               		.cfi_def_cfa_offset 9
 431               		.cfi_offset 15, -8
 432 01dc 0F93      		push r16
 433               	.LCFI19:
 434               		.cfi_def_cfa_offset 10
 435               		.cfi_offset 16, -9
 436 01de 1F93      		push r17
 437               	.LCFI20:
 438               		.cfi_def_cfa_offset 11
 439               		.cfi_offset 17, -10
 440 01e0 CF93      		push r28
 441               	.LCFI21:
 442               		.cfi_def_cfa_offset 12
 443               		.cfi_offset 28, -11
 444 01e2 DF93      		push r29
 445               	.LCFI22:
 446               		.cfi_def_cfa_offset 13
 447               		.cfi_offset 29, -12
 448 01e4 1F92      		push __zero_reg__
 449               	.LCFI23:
 450               		.cfi_def_cfa_offset 14
 451 01e6 CDB7      		in r28,__SP_L__
 452 01e8 DEB7      		in r29,__SP_H__
 453               	.LCFI24:
 454               		.cfi_def_cfa_register 28
 455               	/* prologue: function */
 456               	/* frame size = 1 */
 457               	/* stack size = 11 */
 458               	.L__stack_usage = 11
 459 01ea D82E      		mov r13,r24
 460 01ec C92E      		mov r12,r25
 461 01ee 7901      		movw r14,r18
 163:mmc.c         **** 	DRESULT res;
 164:mmc.c         **** 	BYTE rc;
 165:mmc.c         **** 	WORD bc;
 166:mmc.c         **** 
 167:mmc.c         **** 
 168:mmc.c         **** 	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
 462               		.loc 1 168 0
 463 01f0 8091 0000 		lds r24,CardType
 464               	.LVL53:
 465 01f4 83FD      		sbrc r24,3
 466 01f6 00C0      		rjmp .L51
 467               		.loc 1 168 0 is_stmt 0 discriminator 1
 468 01f8 E9E0      		ldi r30,9
 469               		1:
 470 01fa 440F      		lsl r20
 471 01fc 551F      		rol r21
 472 01fe 661F      		rol r22
 473 0200 771F      		rol r23
 474 0202 EA95      		dec r30
 475 0204 01F4      		brne 1b
 476               	.LVL54:
 477               	.L51:
 169:mmc.c         **** 
 170:mmc.c         **** 	res = RES_ERROR;
 171:mmc.c         **** 	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 478               		.loc 1 171 0 is_stmt 1
 479 0206 81E5      		ldi r24,lo8(81)
 480 0208 0E94 0000 		call send_cmd
 481               	.LVL55:
 482 020c 8823      		tst r24
 483 020e 01F0      		breq .L52
 484               	.L55:
 170:mmc.c         **** 	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 485               		.loc 1 170 0
 486 0210 81E0      		ldi r24,lo8(1)
 487 0212 00C0      		rjmp .L53
 488               	.L52:
 489               		.loc 1 171 0
 490 0214 60E4      		ldi r22,lo8(64)
 491 0216 A62E      		mov r10,r22
 492 0218 6CE9      		ldi r22,lo8(-100)
 493 021a B62E      		mov r11,r22
 494               	.L56:
 495               	.LVL56:
 172:mmc.c         **** 
 173:mmc.c         **** 		bc = 40000;
 174:mmc.c         **** 		do {							/* Wait for data packet */
 175:mmc.c         **** 			rc = rcv_spi();
 496               		.loc 1 175 0 discriminator 1
 497 021c 0E94 0000 		call rcv_spi
 498               	.LVL57:
 176:mmc.c         **** 		} while (rc == 0xFF && --bc);
 499               		.loc 1 176 0 discriminator 1
 500 0220 8F3F      		cpi r24,lo8(-1)
 501 0222 01F4      		brne .L54
 502               	.LVL58:
 503 0224 81E0      		ldi r24,1
 504 0226 A81A      		sub r10,r24
 505 0228 B108      		sbc r11,__zero_reg__
 506               	.LVL59:
 507 022a 01F4      		brne .L56
 508 022c 00C0      		rjmp .L55
 509               	.LVL60:
 510               	.L54:
 177:mmc.c         **** 
 178:mmc.c         **** 		if (rc == 0xFE) {				/* A data packet arrived */
 511               		.loc 1 178 0
 512 022e 8E3F      		cpi r24,lo8(-2)
 513 0230 01F4      		brne .L55
 179:mmc.c         **** 			bc = 514 - ofs - cnt;
 514               		.loc 1 179 0
 515 0232 52E0      		ldi r21,lo8(2)
 516 0234 A52E      		mov r10,r21
 517 0236 BA2C      		mov r11,r10
 518               	.LVL61:
 519 0238 A01A      		sub r10,r16
 520 023a B10A      		sbc r11,r17
 521 023c AE18      		sub r10,r14
 522 023e BF08      		sbc r11,r15
 523               	.LVL62:
 524               	.L72:
 180:mmc.c         **** 
 181:mmc.c         **** 			/* Skip leading bytes */
 182:mmc.c         **** 			if (ofs) {
 525               		.loc 1 182 0
 526 0240 E114      		cp r14,__zero_reg__
 527 0242 F104      		cpc r15,__zero_reg__
 528 0244 01F4      		brne .L60
 529 0246 ED2C      		mov r14,r13
 530               	.LVL63:
 531 0248 FC2C      		mov r15,r12
 532 024a 00C0      		rjmp .L58
 533               	.LVL64:
 534               	.L60:
 183:mmc.c         **** 				do rcv_spi(); while (--ofs);
 535               		.loc 1 183 0 discriminator 1
 536 024c 0E94 0000 		call rcv_spi
 537               	.LVL65:
 538 0250 E1E0      		ldi r30,1
 539 0252 EE1A      		sub r14,r30
 540 0254 F108      		sbc r15,__zero_reg__
 541               	.LVL66:
 542 0256 00C0      		rjmp .L72
 543               	.LVL67:
 544               	.L58:
 184:mmc.c         **** 			}
 185:mmc.c         **** 
 186:mmc.c         **** 			/* Receive a part of the sector */
 187:mmc.c         **** 			do {
 188:mmc.c         **** 				*buff++ = rcv_spi();
 545               		.loc 1 188 0 discriminator 1
 546 0258 0E94 0000 		call rcv_spi
 547               	.LVL68:
 548 025c F701      		movw r30,r14
 549 025e 8193      		st Z+,r24
 550               	.LVL69:
 551 0260 7F01      		movw r14,r30
 189:mmc.c         **** 			} while (--cnt);
 552               		.loc 1 189 0 discriminator 1
 553 0262 0150      		subi r16,1
 554 0264 1109      		sbc r17,__zero_reg__
 555               	.LVL70:
 556 0266 01F4      		brne .L58
 557               	.LVL71:
 558               	.L62:
 190:mmc.c         **** 
 191:mmc.c         **** 			/* Skip trailing bytes and CRC */
 192:mmc.c         **** 			do rcv_spi(); while (--bc);
 559               		.loc 1 192 0 discriminator 1
 560 0268 0E94 0000 		call rcv_spi
 561               	.LVL72:
 562 026c F1E0      		ldi r31,1
 563 026e AF1A      		sub r10,r31
 564 0270 B108      		sbc r11,__zero_reg__
 565               	.LVL73:
 566 0272 01F4      		brne .L62
 193:mmc.c         **** 
 194:mmc.c         **** 			res = RES_OK;
 567               		.loc 1 194 0
 568 0274 80E0      		ldi r24,0
 569               	.LVL74:
 570               	.L53:
 195:mmc.c         **** 		}
 196:mmc.c         **** 	}
 197:mmc.c         **** 
 198:mmc.c         **** 	deselect();
 571               		.loc 1 198 0
 572 0276 8983      		std Y+1,r24
 573 0278 0E94 0000 		call deselect
 574               	.LVL75:
 199:mmc.c         **** 
 200:mmc.c         **** 	return res;
 201:mmc.c         **** }
 575               		.loc 1 201 0
 576 027c 8981      		ldd r24,Y+1
 577               	/* epilogue start */
 578 027e 0F90      		pop __tmp_reg__
 579 0280 DF91      		pop r29
 580 0282 CF91      		pop r28
 581 0284 1F91      		pop r17
 582 0286 0F91      		pop r16
 583               	.LVL76:
 584 0288 FF90      		pop r15
 585 028a EF90      		pop r14
 586 028c DF90      		pop r13
 587 028e CF90      		pop r12
 588 0290 BF90      		pop r11
 589 0292 AF90      		pop r10
 590 0294 0895      		ret
 591               		.cfi_endproc
 592               	.LFE2:
 594               		.local	CardType
 595               		.comm	CardType,1,1
 596               	.Letext0:
 597               		.file 2 "integer.h"
 598               		.file 3 "diskio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mmc.c
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:2      *ABS*:0000003e __SP_H__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:3      *ABS*:0000003d __SP_L__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:4      *ABS*:0000003f __SREG__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:12     .text:00000000 send_cmd
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:139    .text:0000007c disk_initialize
                             .bss:00000000 CardType
C:\Users\Luke\AppData\Local\Temp\ccJ7fPV4.s:403    .text:000001d0 disk_readp

UNDEFINED SYMBOLS
select
xmit_spi
rcv_spi
init_spi
dly_100us
deselect
__do_clear_bss
